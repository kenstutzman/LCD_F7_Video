
LCD_F7_Video.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064b4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b1c  08006684  08006684  00016684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080081a0  080081a0  000200a4  2**0
                  CONTENTS
  4 .ARM          00000008  080081a0  080081a0  000181a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080081a8  080081a8  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080081a8  080081a8  000181a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080081ac  080081ac  000181ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  080081b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a8  200000a4  08008254  000200a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000044c  08008254  0002044c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014cf7  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003342  00000000  00000000  00034dcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001158  00000000  00000000  00038110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fb8  00000000  00000000  00039268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027680  00000000  00000000  0003a220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014c03  00000000  00000000  000618a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f0264  00000000  00000000  000764a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00166707  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a6c  00000000  00000000  0016675c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000a4 	.word	0x200000a4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800666c 	.word	0x0800666c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000a8 	.word	0x200000a8
 800020c:	0800666c 	.word	0x0800666c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005ac:	f3bf 8f4f 	dsb	sy
}
 80005b0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005b2:	f3bf 8f6f 	isb	sy
}
 80005b6:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80005b8:	4b0d      	ldr	r3, [pc, #52]	; (80005f0 <SCB_EnableICache+0x48>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80005c0:	f3bf 8f4f 	dsb	sy
}
 80005c4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005c6:	f3bf 8f6f 	isb	sy
}
 80005ca:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80005cc:	4b08      	ldr	r3, [pc, #32]	; (80005f0 <SCB_EnableICache+0x48>)
 80005ce:	695b      	ldr	r3, [r3, #20]
 80005d0:	4a07      	ldr	r2, [pc, #28]	; (80005f0 <SCB_EnableICache+0x48>)
 80005d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005d6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80005d8:	f3bf 8f4f 	dsb	sy
}
 80005dc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005de:	f3bf 8f6f 	isb	sy
}
 80005e2:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 80005e4:	bf00      	nop
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	e000ed00 	.word	0xe000ed00

080005f4 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b085      	sub	sp, #20
 80005f8:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80005fa:	4b1f      	ldr	r3, [pc, #124]	; (8000678 <SCB_EnableDCache+0x84>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000602:	f3bf 8f4f 	dsb	sy
}
 8000606:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000608:	4b1b      	ldr	r3, [pc, #108]	; (8000678 <SCB_EnableDCache+0x84>)
 800060a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800060e:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	0b5b      	lsrs	r3, r3, #13
 8000614:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000618:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	08db      	lsrs	r3, r3, #3
 800061e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000622:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	015a      	lsls	r2, r3, #5
 8000628:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800062c:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800062e:	68ba      	ldr	r2, [r7, #8]
 8000630:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000632:	4911      	ldr	r1, [pc, #68]	; (8000678 <SCB_EnableDCache+0x84>)
 8000634:	4313      	orrs	r3, r2
 8000636:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800063a:	68bb      	ldr	r3, [r7, #8]
 800063c:	1e5a      	subs	r2, r3, #1
 800063e:	60ba      	str	r2, [r7, #8]
 8000640:	2b00      	cmp	r3, #0
 8000642:	d1ef      	bne.n	8000624 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	1e5a      	subs	r2, r3, #1
 8000648:	60fa      	str	r2, [r7, #12]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d1e5      	bne.n	800061a <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800064e:	f3bf 8f4f 	dsb	sy
}
 8000652:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000654:	4b08      	ldr	r3, [pc, #32]	; (8000678 <SCB_EnableDCache+0x84>)
 8000656:	695b      	ldr	r3, [r3, #20]
 8000658:	4a07      	ldr	r2, [pc, #28]	; (8000678 <SCB_EnableDCache+0x84>)
 800065a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800065e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000660:	f3bf 8f4f 	dsb	sy
}
 8000664:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000666:	f3bf 8f6f 	isb	sy
}
 800066a:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 800066c:	bf00      	nop
 800066e:	3714      	adds	r7, #20
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr
 8000678:	e000ed00 	.word	0xe000ed00

0800067c <LTDC_IRQHandler>:
extern LTDC_HandleTypeDef hLtdcHandler;
TS_StateTypeDef  ts;
char xTouchStr[10];

void LTDC_IRQHandler(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  HAL_LTDC_IRQHandler(&hLtdcHandler);
 8000680:	4802      	ldr	r0, [pc, #8]	; (800068c <LTDC_IRQHandler+0x10>)
 8000682:	f002 f931 	bl	80028e8 <HAL_LTDC_IRQHandler>
}
 8000686:	bf00      	nop
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	20000360 	.word	0x20000360

08000690 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	/* Enable the CPU Cache */
	/* Enable I-Cache */
	SCB_EnableICache();
 8000696:	f7ff ff87 	bl	80005a8 <SCB_EnableICache>
	/* Enable D-Cache */
	SCB_EnableDCache();
 800069a:	f7ff ffab 	bl	80005f4 <SCB_EnableDCache>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800069e:	f000 fa6a 	bl	8000b76 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006a2:	f000 f865 	bl	8000770 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a6:	f000 f923 	bl	80008f0 <MX_GPIO_Init>
  MX_CRC_Init();
 80006aa:	f000 f8cd 	bl	8000848 <MX_CRC_Init>
  MX_DMA2D_Init();
 80006ae:	f000 f8ed 	bl	800088c <MX_DMA2D_Init>
  /* USER CODE BEGIN 2 */
    BSP_SDRAM_Init(); /* Initializes the SDRAM device */
 80006b2:	f004 ff2d 	bl	8005510 <BSP_SDRAM_Init>
    __HAL_RCC_CRC_CLK_ENABLE(); /* Enable the CRC Module */
 80006b6:	4b26      	ldr	r3, [pc, #152]	; (8000750 <main+0xc0>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	4a25      	ldr	r2, [pc, #148]	; (8000750 <main+0xc0>)
 80006bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80006c0:	6313      	str	r3, [r2, #48]	; 0x30
 80006c2:	4b23      	ldr	r3, [pc, #140]	; (8000750 <main+0xc0>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80006ca:	607b      	str	r3, [r7, #4]
 80006cc:	687b      	ldr	r3, [r7, #4]

    BSP_TS_Init(480, 272);
 80006ce:	f44f 7188 	mov.w	r1, #272	; 0x110
 80006d2:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 80006d6:	f005 f8d1 	bl	800587c <BSP_TS_Init>

    BSP_LCD_Init();
 80006da:	f004 fa63 	bl	8004ba4 <BSP_LCD_Init>
    BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 80006de:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 80006e2:	2000      	movs	r0, #0
 80006e4:	f004 faf6 	bl	8004cd4 <BSP_LCD_LayerDefaultInit>
    BSP_LCD_DisplayOn();
 80006e8:	f004 fcfa 	bl	80050e0 <BSP_LCD_DisplayOn>

    BSP_LCD_SelectLayer(0);
 80006ec:	2000      	movs	r0, #0
 80006ee:	f004 fb51 	bl	8004d94 <BSP_LCD_SelectLayer>
    BSP_LCD_Clear(LCD_COLOR_BLUE);
 80006f2:	4818      	ldr	r0, [pc, #96]	; (8000754 <main+0xc4>)
 80006f4:	f004 fb78 	bl	8004de8 <BSP_LCD_Clear>


    BSP_LCD_DisplayStringAt(20, 20, (uint8_t *)"Hello!", LEFT_MODE);
 80006f8:	2303      	movs	r3, #3
 80006fa:	4a17      	ldr	r2, [pc, #92]	; (8000758 <main+0xc8>)
 80006fc:	2114      	movs	r1, #20
 80006fe:	2014      	movs	r0, #20
 8000700:	f004 fbde 	bl	8004ec0 <BSP_LCD_DisplayStringAt>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  BSP_TS_GetState(&ts);
 8000704:	4815      	ldr	r0, [pc, #84]	; (800075c <main+0xcc>)
 8000706:	f005 f8f9 	bl	80058fc <BSP_TS_GetState>
	  sprintf(xTouchStr, "X: %3d", ts.touchX[0]);
 800070a:	4b14      	ldr	r3, [pc, #80]	; (800075c <main+0xcc>)
 800070c:	885b      	ldrh	r3, [r3, #2]
 800070e:	461a      	mov	r2, r3
 8000710:	4913      	ldr	r1, [pc, #76]	; (8000760 <main+0xd0>)
 8000712:	4814      	ldr	r0, [pc, #80]	; (8000764 <main+0xd4>)
 8000714:	f005 fb7c 	bl	8005e10 <siprintf>
	  BSP_LCD_DisplayStringAt(20, 20, (uint8_t *)xTouchStr, LEFT_MODE);
 8000718:	2303      	movs	r3, #3
 800071a:	4a12      	ldr	r2, [pc, #72]	; (8000764 <main+0xd4>)
 800071c:	2114      	movs	r1, #20
 800071e:	2014      	movs	r0, #20
 8000720:	f004 fbce 	bl	8004ec0 <BSP_LCD_DisplayStringAt>

	  sprintf(xTouchStr, "Y: %3d", ts.touchY[0]);
 8000724:	4b0d      	ldr	r3, [pc, #52]	; (800075c <main+0xcc>)
 8000726:	899b      	ldrh	r3, [r3, #12]
 8000728:	461a      	mov	r2, r3
 800072a:	490f      	ldr	r1, [pc, #60]	; (8000768 <main+0xd8>)
 800072c:	480d      	ldr	r0, [pc, #52]	; (8000764 <main+0xd4>)
 800072e:	f005 fb6f 	bl	8005e10 <siprintf>
	  BSP_LCD_DisplayStringAt(20, 60, (uint8_t *)xTouchStr, LEFT_MODE);
 8000732:	2303      	movs	r3, #3
 8000734:	4a0b      	ldr	r2, [pc, #44]	; (8000764 <main+0xd4>)
 8000736:	213c      	movs	r1, #60	; 0x3c
 8000738:	2014      	movs	r0, #20
 800073a:	f004 fbc1 	bl	8004ec0 <BSP_LCD_DisplayStringAt>

	  HAL_GPIO_TogglePin(PD4_STATUS_LED_GPIO_Port, PD4_STATUS_LED_Pin);
 800073e:	2110      	movs	r1, #16
 8000740:	480a      	ldr	r0, [pc, #40]	; (800076c <main+0xdc>)
 8000742:	f001 faa4 	bl	8001c8e <HAL_GPIO_TogglePin>

	  HAL_Delay(50);
 8000746:	2032      	movs	r0, #50	; 0x32
 8000748:	f000 fa72 	bl	8000c30 <HAL_Delay>
  {
 800074c:	e7da      	b.n	8000704 <main+0x74>
 800074e:	bf00      	nop
 8000750:	40023800 	.word	0x40023800
 8000754:	ff0000ff 	.word	0xff0000ff
 8000758:	08006684 	.word	0x08006684
 800075c:	200002e4 	.word	0x200002e4
 8000760:	0800668c 	.word	0x0800668c
 8000764:	20000310 	.word	0x20000310
 8000768:	08006694 	.word	0x08006694
 800076c:	40020c00 	.word	0x40020c00

08000770 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b094      	sub	sp, #80	; 0x50
 8000774:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000776:	f107 0320 	add.w	r3, r7, #32
 800077a:	2230      	movs	r2, #48	; 0x30
 800077c:	2100      	movs	r1, #0
 800077e:	4618      	mov	r0, r3
 8000780:	f005 fb3e 	bl	8005e00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000784:	f107 030c 	add.w	r3, r7, #12
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	605a      	str	r2, [r3, #4]
 800078e:	609a      	str	r2, [r3, #8]
 8000790:	60da      	str	r2, [r3, #12]
 8000792:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000794:	4b2a      	ldr	r3, [pc, #168]	; (8000840 <SystemClock_Config+0xd0>)
 8000796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000798:	4a29      	ldr	r2, [pc, #164]	; (8000840 <SystemClock_Config+0xd0>)
 800079a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800079e:	6413      	str	r3, [r2, #64]	; 0x40
 80007a0:	4b27      	ldr	r3, [pc, #156]	; (8000840 <SystemClock_Config+0xd0>)
 80007a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007a8:	60bb      	str	r3, [r7, #8]
 80007aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007ac:	4b25      	ldr	r3, [pc, #148]	; (8000844 <SystemClock_Config+0xd4>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4a24      	ldr	r2, [pc, #144]	; (8000844 <SystemClock_Config+0xd4>)
 80007b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007b6:	6013      	str	r3, [r2, #0]
 80007b8:	4b22      	ldr	r3, [pc, #136]	; (8000844 <SystemClock_Config+0xd4>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007c0:	607b      	str	r3, [r7, #4]
 80007c2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007c4:	2302      	movs	r3, #2
 80007c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007c8:	2301      	movs	r3, #1
 80007ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007cc:	2310      	movs	r3, #16
 80007ce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007d0:	2302      	movs	r3, #2
 80007d2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007d4:	2300      	movs	r3, #0
 80007d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007d8:	2308      	movs	r3, #8
 80007da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 200;
 80007dc:	23c8      	movs	r3, #200	; 0xc8
 80007de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007e0:	2302      	movs	r3, #2
 80007e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007e4:	2302      	movs	r3, #2
 80007e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e8:	f107 0320 	add.w	r3, r7, #32
 80007ec:	4618      	mov	r0, r3
 80007ee:	f002 fb81 	bl	8002ef4 <HAL_RCC_OscConfig>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80007f8:	f000 f8b8 	bl	800096c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007fc:	f002 fb2a 	bl	8002e54 <HAL_PWREx_EnableOverDrive>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000806:	f000 f8b1 	bl	800096c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800080a:	230f      	movs	r3, #15
 800080c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800080e:	2302      	movs	r3, #2
 8000810:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000812:	2300      	movs	r3, #0
 8000814:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000816:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800081a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800081c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000820:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000822:	f107 030c 	add.w	r3, r7, #12
 8000826:	2106      	movs	r1, #6
 8000828:	4618      	mov	r0, r3
 800082a:	f002 fe07 	bl	800343c <HAL_RCC_ClockConfig>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000834:	f000 f89a 	bl	800096c <Error_Handler>
  }
}
 8000838:	bf00      	nop
 800083a:	3750      	adds	r7, #80	; 0x50
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	40023800 	.word	0x40023800
 8000844:	40007000 	.word	0x40007000

08000848 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800084c:	4b0d      	ldr	r3, [pc, #52]	; (8000884 <MX_CRC_Init+0x3c>)
 800084e:	4a0e      	ldr	r2, [pc, #56]	; (8000888 <MX_CRC_Init+0x40>)
 8000850:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000852:	4b0c      	ldr	r3, [pc, #48]	; (8000884 <MX_CRC_Init+0x3c>)
 8000854:	2200      	movs	r2, #0
 8000856:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000858:	4b0a      	ldr	r3, [pc, #40]	; (8000884 <MX_CRC_Init+0x3c>)
 800085a:	2200      	movs	r2, #0
 800085c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800085e:	4b09      	ldr	r3, [pc, #36]	; (8000884 <MX_CRC_Init+0x3c>)
 8000860:	2200      	movs	r2, #0
 8000862:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000864:	4b07      	ldr	r3, [pc, #28]	; (8000884 <MX_CRC_Init+0x3c>)
 8000866:	2200      	movs	r2, #0
 8000868:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800086a:	4b06      	ldr	r3, [pc, #24]	; (8000884 <MX_CRC_Init+0x3c>)
 800086c:	2201      	movs	r2, #1
 800086e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000870:	4804      	ldr	r0, [pc, #16]	; (8000884 <MX_CRC_Init+0x3c>)
 8000872:	f000 fb13 	bl	8000e9c <HAL_CRC_Init>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 800087c:	f000 f876 	bl	800096c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000880:	bf00      	nop
 8000882:	bd80      	pop	{r7, pc}
 8000884:	200002c0 	.word	0x200002c0
 8000888:	40023000 	.word	0x40023000

0800088c <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000890:	4b15      	ldr	r3, [pc, #84]	; (80008e8 <MX_DMA2D_Init+0x5c>)
 8000892:	4a16      	ldr	r2, [pc, #88]	; (80008ec <MX_DMA2D_Init+0x60>)
 8000894:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000896:	4b14      	ldr	r3, [pc, #80]	; (80008e8 <MX_DMA2D_Init+0x5c>)
 8000898:	2200      	movs	r2, #0
 800089a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800089c:	4b12      	ldr	r3, [pc, #72]	; (80008e8 <MX_DMA2D_Init+0x5c>)
 800089e:	2200      	movs	r2, #0
 80008a0:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80008a2:	4b11      	ldr	r3, [pc, #68]	; (80008e8 <MX_DMA2D_Init+0x5c>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80008a8:	4b0f      	ldr	r3, [pc, #60]	; (80008e8 <MX_DMA2D_Init+0x5c>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80008ae:	4b0e      	ldr	r3, [pc, #56]	; (80008e8 <MX_DMA2D_Init+0x5c>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80008b4:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <MX_DMA2D_Init+0x5c>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80008ba:	4b0b      	ldr	r3, [pc, #44]	; (80008e8 <MX_DMA2D_Init+0x5c>)
 80008bc:	2200      	movs	r2, #0
 80008be:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80008c0:	4809      	ldr	r0, [pc, #36]	; (80008e8 <MX_DMA2D_Init+0x5c>)
 80008c2:	f000 fd93 	bl	80013ec <HAL_DMA2D_Init>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80008cc:	f000 f84e 	bl	800096c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80008d0:	2101      	movs	r1, #1
 80008d2:	4805      	ldr	r0, [pc, #20]	; (80008e8 <MX_DMA2D_Init+0x5c>)
 80008d4:	f000 fee8 	bl	80016a8 <HAL_DMA2D_ConfigLayer>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80008de:	f000 f845 	bl	800096c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	2000031c 	.word	0x2000031c
 80008ec:	4002b000 	.word	0x4002b000

080008f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b088      	sub	sp, #32
 80008f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f6:	f107 030c 	add.w	r3, r7, #12
 80008fa:	2200      	movs	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	605a      	str	r2, [r3, #4]
 8000900:	609a      	str	r2, [r3, #8]
 8000902:	60da      	str	r2, [r3, #12]
 8000904:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000906:	4b17      	ldr	r3, [pc, #92]	; (8000964 <MX_GPIO_Init+0x74>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	4a16      	ldr	r2, [pc, #88]	; (8000964 <MX_GPIO_Init+0x74>)
 800090c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000910:	6313      	str	r3, [r2, #48]	; 0x30
 8000912:	4b14      	ldr	r3, [pc, #80]	; (8000964 <MX_GPIO_Init+0x74>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800091a:	60bb      	str	r3, [r7, #8]
 800091c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800091e:	4b11      	ldr	r3, [pc, #68]	; (8000964 <MX_GPIO_Init+0x74>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	4a10      	ldr	r2, [pc, #64]	; (8000964 <MX_GPIO_Init+0x74>)
 8000924:	f043 0308 	orr.w	r3, r3, #8
 8000928:	6313      	str	r3, [r2, #48]	; 0x30
 800092a:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <MX_GPIO_Init+0x74>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	f003 0308 	and.w	r3, r3, #8
 8000932:	607b      	str	r3, [r7, #4]
 8000934:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PD4_STATUS_LED_GPIO_Port, PD4_STATUS_LED_Pin, GPIO_PIN_RESET);
 8000936:	2200      	movs	r2, #0
 8000938:	2110      	movs	r1, #16
 800093a:	480b      	ldr	r0, [pc, #44]	; (8000968 <MX_GPIO_Init+0x78>)
 800093c:	f001 f98e 	bl	8001c5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD4_STATUS_LED_Pin */
  GPIO_InitStruct.Pin = PD4_STATUS_LED_Pin;
 8000940:	2310      	movs	r3, #16
 8000942:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000944:	2301      	movs	r3, #1
 8000946:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094c:	2300      	movs	r3, #0
 800094e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(PD4_STATUS_LED_GPIO_Port, &GPIO_InitStruct);
 8000950:	f107 030c 	add.w	r3, r7, #12
 8000954:	4619      	mov	r1, r3
 8000956:	4804      	ldr	r0, [pc, #16]	; (8000968 <MX_GPIO_Init+0x78>)
 8000958:	f000 ffd4 	bl	8001904 <HAL_GPIO_Init>

}
 800095c:	bf00      	nop
 800095e:	3720      	adds	r7, #32
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	40023800 	.word	0x40023800
 8000968:	40020c00 	.word	0x40020c00

0800096c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000970:	b672      	cpsid	i
}
 8000972:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000974:	e7fe      	b.n	8000974 <Error_Handler+0x8>
	...

08000978 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000978:	b480      	push	{r7}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800097e:	4b0f      	ldr	r3, [pc, #60]	; (80009bc <HAL_MspInit+0x44>)
 8000980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000982:	4a0e      	ldr	r2, [pc, #56]	; (80009bc <HAL_MspInit+0x44>)
 8000984:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000988:	6413      	str	r3, [r2, #64]	; 0x40
 800098a:	4b0c      	ldr	r3, [pc, #48]	; (80009bc <HAL_MspInit+0x44>)
 800098c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000992:	607b      	str	r3, [r7, #4]
 8000994:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000996:	4b09      	ldr	r3, [pc, #36]	; (80009bc <HAL_MspInit+0x44>)
 8000998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800099a:	4a08      	ldr	r2, [pc, #32]	; (80009bc <HAL_MspInit+0x44>)
 800099c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009a0:	6453      	str	r3, [r2, #68]	; 0x44
 80009a2:	4b06      	ldr	r3, [pc, #24]	; (80009bc <HAL_MspInit+0x44>)
 80009a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009aa:	603b      	str	r3, [r7, #0]
 80009ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ae:	bf00      	nop
 80009b0:	370c      	adds	r7, #12
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	40023800 	.word	0x40023800

080009c0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b085      	sub	sp, #20
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a0a      	ldr	r2, [pc, #40]	; (80009f8 <HAL_CRC_MspInit+0x38>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d10b      	bne.n	80009ea <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80009d2:	4b0a      	ldr	r3, [pc, #40]	; (80009fc <HAL_CRC_MspInit+0x3c>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	4a09      	ldr	r2, [pc, #36]	; (80009fc <HAL_CRC_MspInit+0x3c>)
 80009d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009dc:	6313      	str	r3, [r2, #48]	; 0x30
 80009de:	4b07      	ldr	r3, [pc, #28]	; (80009fc <HAL_CRC_MspInit+0x3c>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009e6:	60fb      	str	r3, [r7, #12]
 80009e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80009ea:	bf00      	nop
 80009ec:	3714      	adds	r7, #20
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	40023000 	.word	0x40023000
 80009fc:	40023800 	.word	0x40023800

08000a00 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b085      	sub	sp, #20
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a0a      	ldr	r2, [pc, #40]	; (8000a38 <HAL_DMA2D_MspInit+0x38>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d10b      	bne.n	8000a2a <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000a12:	4b0a      	ldr	r3, [pc, #40]	; (8000a3c <HAL_DMA2D_MspInit+0x3c>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	4a09      	ldr	r2, [pc, #36]	; (8000a3c <HAL_DMA2D_MspInit+0x3c>)
 8000a18:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1e:	4b07      	ldr	r3, [pc, #28]	; (8000a3c <HAL_DMA2D_MspInit+0x3c>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8000a2a:	bf00      	nop
 8000a2c:	3714      	adds	r7, #20
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	4002b000 	.word	0x4002b000
 8000a3c:	40023800 	.word	0x40023800

08000a40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a44:	e7fe      	b.n	8000a44 <NMI_Handler+0x4>

08000a46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a46:	b480      	push	{r7}
 8000a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a4a:	e7fe      	b.n	8000a4a <HardFault_Handler+0x4>

08000a4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a50:	e7fe      	b.n	8000a50 <MemManage_Handler+0x4>

08000a52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a52:	b480      	push	{r7}
 8000a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a56:	e7fe      	b.n	8000a56 <BusFault_Handler+0x4>

08000a58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a5c:	e7fe      	b.n	8000a5c <UsageFault_Handler+0x4>

08000a5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a62:	bf00      	nop
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr

08000a6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a70:	bf00      	nop
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr

08000a7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a7a:	b480      	push	{r7}
 8000a7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr

08000a88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a8c:	f000 f8b0 	bl	8000bf0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a90:	bf00      	nop
 8000a92:	bd80      	pop	{r7, pc}

08000a94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b086      	sub	sp, #24
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a9c:	4a14      	ldr	r2, [pc, #80]	; (8000af0 <_sbrk+0x5c>)
 8000a9e:	4b15      	ldr	r3, [pc, #84]	; (8000af4 <_sbrk+0x60>)
 8000aa0:	1ad3      	subs	r3, r2, r3
 8000aa2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000aa8:	4b13      	ldr	r3, [pc, #76]	; (8000af8 <_sbrk+0x64>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d102      	bne.n	8000ab6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ab0:	4b11      	ldr	r3, [pc, #68]	; (8000af8 <_sbrk+0x64>)
 8000ab2:	4a12      	ldr	r2, [pc, #72]	; (8000afc <_sbrk+0x68>)
 8000ab4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ab6:	4b10      	ldr	r3, [pc, #64]	; (8000af8 <_sbrk+0x64>)
 8000ab8:	681a      	ldr	r2, [r3, #0]
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	4413      	add	r3, r2
 8000abe:	693a      	ldr	r2, [r7, #16]
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	d207      	bcs.n	8000ad4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ac4:	f005 f972 	bl	8005dac <__errno>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	220c      	movs	r2, #12
 8000acc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ace:	f04f 33ff 	mov.w	r3, #4294967295
 8000ad2:	e009      	b.n	8000ae8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ad4:	4b08      	ldr	r3, [pc, #32]	; (8000af8 <_sbrk+0x64>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ada:	4b07      	ldr	r3, [pc, #28]	; (8000af8 <_sbrk+0x64>)
 8000adc:	681a      	ldr	r2, [r3, #0]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	4413      	add	r3, r2
 8000ae2:	4a05      	ldr	r2, [pc, #20]	; (8000af8 <_sbrk+0x64>)
 8000ae4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ae6:	68fb      	ldr	r3, [r7, #12]
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	3718      	adds	r7, #24
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	20050000 	.word	0x20050000
 8000af4:	00000400 	.word	0x00000400
 8000af8:	200000c0 	.word	0x200000c0
 8000afc:	20000450 	.word	0x20000450

08000b00 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b04:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <SystemInit+0x20>)
 8000b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b0a:	4a05      	ldr	r2, [pc, #20]	; (8000b20 <SystemInit+0x20>)
 8000b0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	e000ed00 	.word	0xe000ed00

08000b24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b5c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b28:	480d      	ldr	r0, [pc, #52]	; (8000b60 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b2a:	490e      	ldr	r1, [pc, #56]	; (8000b64 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b2c:	4a0e      	ldr	r2, [pc, #56]	; (8000b68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b30:	e002      	b.n	8000b38 <LoopCopyDataInit>

08000b32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b36:	3304      	adds	r3, #4

08000b38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b3c:	d3f9      	bcc.n	8000b32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b3e:	4a0b      	ldr	r2, [pc, #44]	; (8000b6c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b40:	4c0b      	ldr	r4, [pc, #44]	; (8000b70 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b44:	e001      	b.n	8000b4a <LoopFillZerobss>

08000b46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b48:	3204      	adds	r2, #4

08000b4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b4c:	d3fb      	bcc.n	8000b46 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b4e:	f7ff ffd7 	bl	8000b00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b52:	f005 f931 	bl	8005db8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b56:	f7ff fd9b 	bl	8000690 <main>
  bx  lr    
 8000b5a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b5c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000b60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b64:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 8000b68:	080081b0 	.word	0x080081b0
  ldr r2, =_sbss
 8000b6c:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 8000b70:	2000044c 	.word	0x2000044c

08000b74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b74:	e7fe      	b.n	8000b74 <ADC_IRQHandler>

08000b76 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b76:	b580      	push	{r7, lr}
 8000b78:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b7a:	2003      	movs	r0, #3
 8000b7c:	f000 f94c 	bl	8000e18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b80:	2000      	movs	r0, #0
 8000b82:	f000 f805 	bl	8000b90 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000b86:	f7ff fef7 	bl	8000978 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000b8a:	2300      	movs	r3, #0
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	bd80      	pop	{r7, pc}

08000b90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b98:	4b12      	ldr	r3, [pc, #72]	; (8000be4 <HAL_InitTick+0x54>)
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	4b12      	ldr	r3, [pc, #72]	; (8000be8 <HAL_InitTick+0x58>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ba6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f000 f967 	bl	8000e82 <HAL_SYSTICK_Config>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	e00e      	b.n	8000bdc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2b0f      	cmp	r3, #15
 8000bc2:	d80a      	bhi.n	8000bda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	6879      	ldr	r1, [r7, #4]
 8000bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bcc:	f000 f92f 	bl	8000e2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bd0:	4a06      	ldr	r2, [pc, #24]	; (8000bec <HAL_InitTick+0x5c>)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	e000      	b.n	8000bdc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bda:	2301      	movs	r3, #1
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	20000000 	.word	0x20000000
 8000be8:	20000008 	.word	0x20000008
 8000bec:	20000004 	.word	0x20000004

08000bf0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bf4:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <HAL_IncTick+0x20>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <HAL_IncTick+0x24>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4413      	add	r3, r2
 8000c00:	4a04      	ldr	r2, [pc, #16]	; (8000c14 <HAL_IncTick+0x24>)
 8000c02:	6013      	str	r3, [r2, #0]
}
 8000c04:	bf00      	nop
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	20000008 	.word	0x20000008
 8000c14:	2000035c 	.word	0x2000035c

08000c18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c1c:	4b03      	ldr	r3, [pc, #12]	; (8000c2c <HAL_GetTick+0x14>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	2000035c 	.word	0x2000035c

08000c30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c38:	f7ff ffee 	bl	8000c18 <HAL_GetTick>
 8000c3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c48:	d005      	beq.n	8000c56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c4a:	4b0a      	ldr	r3, [pc, #40]	; (8000c74 <HAL_Delay+0x44>)
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	461a      	mov	r2, r3
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	4413      	add	r3, r2
 8000c54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c56:	bf00      	nop
 8000c58:	f7ff ffde 	bl	8000c18 <HAL_GetTick>
 8000c5c:	4602      	mov	r2, r0
 8000c5e:	68bb      	ldr	r3, [r7, #8]
 8000c60:	1ad3      	subs	r3, r2, r3
 8000c62:	68fa      	ldr	r2, [r7, #12]
 8000c64:	429a      	cmp	r2, r3
 8000c66:	d8f7      	bhi.n	8000c58 <HAL_Delay+0x28>
  {
  }
}
 8000c68:	bf00      	nop
 8000c6a:	bf00      	nop
 8000c6c:	3710      	adds	r7, #16
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	20000008 	.word	0x20000008

08000c78 <__NVIC_SetPriorityGrouping>:
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b085      	sub	sp, #20
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	f003 0307 	and.w	r3, r3, #7
 8000c86:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c88:	4b0b      	ldr	r3, [pc, #44]	; (8000cb8 <__NVIC_SetPriorityGrouping+0x40>)
 8000c8a:	68db      	ldr	r3, [r3, #12]
 8000c8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c8e:	68ba      	ldr	r2, [r7, #8]
 8000c90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c94:	4013      	ands	r3, r2
 8000c96:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ca0:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <__NVIC_SetPriorityGrouping+0x44>)
 8000ca2:	4313      	orrs	r3, r2
 8000ca4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ca6:	4a04      	ldr	r2, [pc, #16]	; (8000cb8 <__NVIC_SetPriorityGrouping+0x40>)
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	60d3      	str	r3, [r2, #12]
}
 8000cac:	bf00      	nop
 8000cae:	3714      	adds	r7, #20
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr
 8000cb8:	e000ed00 	.word	0xe000ed00
 8000cbc:	05fa0000 	.word	0x05fa0000

08000cc0 <__NVIC_GetPriorityGrouping>:
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cc4:	4b04      	ldr	r3, [pc, #16]	; (8000cd8 <__NVIC_GetPriorityGrouping+0x18>)
 8000cc6:	68db      	ldr	r3, [r3, #12]
 8000cc8:	0a1b      	lsrs	r3, r3, #8
 8000cca:	f003 0307 	and.w	r3, r3, #7
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr
 8000cd8:	e000ed00 	.word	0xe000ed00

08000cdc <__NVIC_EnableIRQ>:
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	db0b      	blt.n	8000d06 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cee:	79fb      	ldrb	r3, [r7, #7]
 8000cf0:	f003 021f 	and.w	r2, r3, #31
 8000cf4:	4907      	ldr	r1, [pc, #28]	; (8000d14 <__NVIC_EnableIRQ+0x38>)
 8000cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfa:	095b      	lsrs	r3, r3, #5
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	fa00 f202 	lsl.w	r2, r0, r2
 8000d02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000d06:	bf00      	nop
 8000d08:	370c      	adds	r7, #12
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	e000e100 	.word	0xe000e100

08000d18 <__NVIC_SetPriority>:
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	4603      	mov	r3, r0
 8000d20:	6039      	str	r1, [r7, #0]
 8000d22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	db0a      	blt.n	8000d42 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	b2da      	uxtb	r2, r3
 8000d30:	490c      	ldr	r1, [pc, #48]	; (8000d64 <__NVIC_SetPriority+0x4c>)
 8000d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d36:	0112      	lsls	r2, r2, #4
 8000d38:	b2d2      	uxtb	r2, r2
 8000d3a:	440b      	add	r3, r1
 8000d3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000d40:	e00a      	b.n	8000d58 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	b2da      	uxtb	r2, r3
 8000d46:	4908      	ldr	r1, [pc, #32]	; (8000d68 <__NVIC_SetPriority+0x50>)
 8000d48:	79fb      	ldrb	r3, [r7, #7]
 8000d4a:	f003 030f 	and.w	r3, r3, #15
 8000d4e:	3b04      	subs	r3, #4
 8000d50:	0112      	lsls	r2, r2, #4
 8000d52:	b2d2      	uxtb	r2, r2
 8000d54:	440b      	add	r3, r1
 8000d56:	761a      	strb	r2, [r3, #24]
}
 8000d58:	bf00      	nop
 8000d5a:	370c      	adds	r7, #12
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr
 8000d64:	e000e100 	.word	0xe000e100
 8000d68:	e000ed00 	.word	0xe000ed00

08000d6c <NVIC_EncodePriority>:
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b089      	sub	sp, #36	; 0x24
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	60f8      	str	r0, [r7, #12]
 8000d74:	60b9      	str	r1, [r7, #8]
 8000d76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	f003 0307 	and.w	r3, r3, #7
 8000d7e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d80:	69fb      	ldr	r3, [r7, #28]
 8000d82:	f1c3 0307 	rsb	r3, r3, #7
 8000d86:	2b04      	cmp	r3, #4
 8000d88:	bf28      	it	cs
 8000d8a:	2304      	movcs	r3, #4
 8000d8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	3304      	adds	r3, #4
 8000d92:	2b06      	cmp	r3, #6
 8000d94:	d902      	bls.n	8000d9c <NVIC_EncodePriority+0x30>
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	3b03      	subs	r3, #3
 8000d9a:	e000      	b.n	8000d9e <NVIC_EncodePriority+0x32>
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da0:	f04f 32ff 	mov.w	r2, #4294967295
 8000da4:	69bb      	ldr	r3, [r7, #24]
 8000da6:	fa02 f303 	lsl.w	r3, r2, r3
 8000daa:	43da      	mvns	r2, r3
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	401a      	ands	r2, r3
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000db4:	f04f 31ff 	mov.w	r1, #4294967295
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	fa01 f303 	lsl.w	r3, r1, r3
 8000dbe:	43d9      	mvns	r1, r3
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc4:	4313      	orrs	r3, r2
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3724      	adds	r7, #36	; 0x24
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
	...

08000dd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	3b01      	subs	r3, #1
 8000de0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000de4:	d301      	bcc.n	8000dea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000de6:	2301      	movs	r3, #1
 8000de8:	e00f      	b.n	8000e0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dea:	4a0a      	ldr	r2, [pc, #40]	; (8000e14 <SysTick_Config+0x40>)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	3b01      	subs	r3, #1
 8000df0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000df2:	210f      	movs	r1, #15
 8000df4:	f04f 30ff 	mov.w	r0, #4294967295
 8000df8:	f7ff ff8e 	bl	8000d18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dfc:	4b05      	ldr	r3, [pc, #20]	; (8000e14 <SysTick_Config+0x40>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e02:	4b04      	ldr	r3, [pc, #16]	; (8000e14 <SysTick_Config+0x40>)
 8000e04:	2207      	movs	r2, #7
 8000e06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e08:	2300      	movs	r3, #0
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	e000e010 	.word	0xe000e010

08000e18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e20:	6878      	ldr	r0, [r7, #4]
 8000e22:	f7ff ff29 	bl	8000c78 <__NVIC_SetPriorityGrouping>
}
 8000e26:	bf00      	nop
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}

08000e2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b086      	sub	sp, #24
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	4603      	mov	r3, r0
 8000e36:	60b9      	str	r1, [r7, #8]
 8000e38:	607a      	str	r2, [r7, #4]
 8000e3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e40:	f7ff ff3e 	bl	8000cc0 <__NVIC_GetPriorityGrouping>
 8000e44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e46:	687a      	ldr	r2, [r7, #4]
 8000e48:	68b9      	ldr	r1, [r7, #8]
 8000e4a:	6978      	ldr	r0, [r7, #20]
 8000e4c:	f7ff ff8e 	bl	8000d6c <NVIC_EncodePriority>
 8000e50:	4602      	mov	r2, r0
 8000e52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e56:	4611      	mov	r1, r2
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f7ff ff5d 	bl	8000d18 <__NVIC_SetPriority>
}
 8000e5e:	bf00      	nop
 8000e60:	3718      	adds	r7, #24
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}

08000e66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e66:	b580      	push	{r7, lr}
 8000e68:	b082      	sub	sp, #8
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e74:	4618      	mov	r0, r3
 8000e76:	f7ff ff31 	bl	8000cdc <__NVIC_EnableIRQ>
}
 8000e7a:	bf00      	nop
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}

08000e82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e82:	b580      	push	{r7, lr}
 8000e84:	b082      	sub	sp, #8
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e8a:	6878      	ldr	r0, [r7, #4]
 8000e8c:	f7ff ffa2 	bl	8000dd4 <SysTick_Config>
 8000e90:	4603      	mov	r3, r0
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
	...

08000e9c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d101      	bne.n	8000eae <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e054      	b.n	8000f58 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	7f5b      	ldrb	r3, [r3, #29]
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d105      	bne.n	8000ec4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2200      	movs	r2, #0
 8000ebc:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000ebe:	6878      	ldr	r0, [r7, #4]
 8000ec0:	f7ff fd7e 	bl	80009c0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2202      	movs	r2, #2
 8000ec8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	791b      	ldrb	r3, [r3, #4]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d10c      	bne.n	8000eec <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4a22      	ldr	r2, [pc, #136]	; (8000f60 <HAL_CRC_Init+0xc4>)
 8000ed8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	689a      	ldr	r2, [r3, #8]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f022 0218 	bic.w	r2, r2, #24
 8000ee8:	609a      	str	r2, [r3, #8]
 8000eea:	e00c      	b.n	8000f06 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6899      	ldr	r1, [r3, #8]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	6878      	ldr	r0, [r7, #4]
 8000ef8:	f000 f834 	bl	8000f64 <HAL_CRCEx_Polynomial_Set>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8000f02:	2301      	movs	r3, #1
 8000f04:	e028      	b.n	8000f58 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	795b      	ldrb	r3, [r3, #5]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d105      	bne.n	8000f1a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f04f 32ff 	mov.w	r2, #4294967295
 8000f16:	611a      	str	r2, [r3, #16]
 8000f18:	e004      	b.n	8000f24 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	687a      	ldr	r2, [r7, #4]
 8000f20:	6912      	ldr	r2, [r2, #16]
 8000f22:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	689b      	ldr	r3, [r3, #8]
 8000f2a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	695a      	ldr	r2, [r3, #20]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	430a      	orrs	r2, r1
 8000f38:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	689b      	ldr	r3, [r3, #8]
 8000f40:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	699a      	ldr	r2, [r3, #24]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	430a      	orrs	r2, r1
 8000f4e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2201      	movs	r2, #1
 8000f54:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8000f56:	2300      	movs	r3, #0
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	04c11db7 	.word	0x04c11db7

08000f64 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b087      	sub	sp, #28
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	60f8      	str	r0, [r7, #12]
 8000f6c:	60b9      	str	r1, [r7, #8]
 8000f6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f70:	2300      	movs	r3, #0
 8000f72:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8000f74:	231f      	movs	r3, #31
 8000f76:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8000f78:	bf00      	nop
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	1e5a      	subs	r2, r3, #1
 8000f7e:	613a      	str	r2, [r7, #16]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d009      	beq.n	8000f98 <HAL_CRCEx_Polynomial_Set+0x34>
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	f003 031f 	and.w	r3, r3, #31
 8000f8a:	68ba      	ldr	r2, [r7, #8]
 8000f8c:	fa22 f303 	lsr.w	r3, r2, r3
 8000f90:	f003 0301 	and.w	r3, r3, #1
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d0f0      	beq.n	8000f7a <HAL_CRCEx_Polynomial_Set+0x16>
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2b18      	cmp	r3, #24
 8000f9c:	d846      	bhi.n	800102c <HAL_CRCEx_Polynomial_Set+0xc8>
 8000f9e:	a201      	add	r2, pc, #4	; (adr r2, 8000fa4 <HAL_CRCEx_Polynomial_Set+0x40>)
 8000fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fa4:	08001033 	.word	0x08001033
 8000fa8:	0800102d 	.word	0x0800102d
 8000fac:	0800102d 	.word	0x0800102d
 8000fb0:	0800102d 	.word	0x0800102d
 8000fb4:	0800102d 	.word	0x0800102d
 8000fb8:	0800102d 	.word	0x0800102d
 8000fbc:	0800102d 	.word	0x0800102d
 8000fc0:	0800102d 	.word	0x0800102d
 8000fc4:	08001021 	.word	0x08001021
 8000fc8:	0800102d 	.word	0x0800102d
 8000fcc:	0800102d 	.word	0x0800102d
 8000fd0:	0800102d 	.word	0x0800102d
 8000fd4:	0800102d 	.word	0x0800102d
 8000fd8:	0800102d 	.word	0x0800102d
 8000fdc:	0800102d 	.word	0x0800102d
 8000fe0:	0800102d 	.word	0x0800102d
 8000fe4:	08001015 	.word	0x08001015
 8000fe8:	0800102d 	.word	0x0800102d
 8000fec:	0800102d 	.word	0x0800102d
 8000ff0:	0800102d 	.word	0x0800102d
 8000ff4:	0800102d 	.word	0x0800102d
 8000ff8:	0800102d 	.word	0x0800102d
 8000ffc:	0800102d 	.word	0x0800102d
 8001000:	0800102d 	.word	0x0800102d
 8001004:	08001009 	.word	0x08001009
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	2b06      	cmp	r3, #6
 800100c:	d913      	bls.n	8001036 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800100e:	2301      	movs	r3, #1
 8001010:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001012:	e010      	b.n	8001036 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	2b07      	cmp	r3, #7
 8001018:	d90f      	bls.n	800103a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800101a:	2301      	movs	r3, #1
 800101c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800101e:	e00c      	b.n	800103a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	2b0f      	cmp	r3, #15
 8001024:	d90b      	bls.n	800103e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8001026:	2301      	movs	r3, #1
 8001028:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800102a:	e008      	b.n	800103e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800102c:	2301      	movs	r3, #1
 800102e:	75fb      	strb	r3, [r7, #23]
      break;
 8001030:	e006      	b.n	8001040 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001032:	bf00      	nop
 8001034:	e004      	b.n	8001040 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001036:	bf00      	nop
 8001038:	e002      	b.n	8001040 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800103a:	bf00      	nop
 800103c:	e000      	b.n	8001040 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800103e:	bf00      	nop
  }
  if (status == HAL_OK)
 8001040:	7dfb      	ldrb	r3, [r7, #23]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d10d      	bne.n	8001062 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	68ba      	ldr	r2, [r7, #8]
 800104c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	689b      	ldr	r3, [r3, #8]
 8001054:	f023 0118 	bic.w	r1, r3, #24
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	687a      	ldr	r2, [r7, #4]
 800105e:	430a      	orrs	r2, r1
 8001060:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001062:	7dfb      	ldrb	r3, [r7, #23]
}
 8001064:	4618      	mov	r0, r3
 8001066:	371c      	adds	r7, #28
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr

08001070 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b086      	sub	sp, #24
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001078:	2300      	movs	r3, #0
 800107a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800107c:	f7ff fdcc 	bl	8000c18 <HAL_GetTick>
 8001080:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d101      	bne.n	800108c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001088:	2301      	movs	r3, #1
 800108a:	e099      	b.n	80011c0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2200      	movs	r2, #0
 8001090:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2202      	movs	r2, #2
 8001098:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f022 0201 	bic.w	r2, r2, #1
 80010aa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010ac:	e00f      	b.n	80010ce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80010ae:	f7ff fdb3 	bl	8000c18 <HAL_GetTick>
 80010b2:	4602      	mov	r2, r0
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	1ad3      	subs	r3, r2, r3
 80010b8:	2b05      	cmp	r3, #5
 80010ba:	d908      	bls.n	80010ce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2220      	movs	r2, #32
 80010c0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2203      	movs	r2, #3
 80010c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80010ca:	2303      	movs	r3, #3
 80010cc:	e078      	b.n	80011c0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f003 0301 	and.w	r3, r3, #1
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d1e8      	bne.n	80010ae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80010e4:	697a      	ldr	r2, [r7, #20]
 80010e6:	4b38      	ldr	r3, [pc, #224]	; (80011c8 <HAL_DMA_Init+0x158>)
 80010e8:	4013      	ands	r3, r2
 80010ea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	685a      	ldr	r2, [r3, #4]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	689b      	ldr	r3, [r3, #8]
 80010f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	691b      	ldr	r3, [r3, #16]
 8001100:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001106:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	699b      	ldr	r3, [r3, #24]
 800110c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001112:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6a1b      	ldr	r3, [r3, #32]
 8001118:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800111a:	697a      	ldr	r2, [r7, #20]
 800111c:	4313      	orrs	r3, r2
 800111e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001124:	2b04      	cmp	r3, #4
 8001126:	d107      	bne.n	8001138 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001130:	4313      	orrs	r3, r2
 8001132:	697a      	ldr	r2, [r7, #20]
 8001134:	4313      	orrs	r3, r2
 8001136:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	697a      	ldr	r2, [r7, #20]
 800113e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	695b      	ldr	r3, [r3, #20]
 8001146:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	f023 0307 	bic.w	r3, r3, #7
 800114e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001154:	697a      	ldr	r2, [r7, #20]
 8001156:	4313      	orrs	r3, r2
 8001158:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800115e:	2b04      	cmp	r3, #4
 8001160:	d117      	bne.n	8001192 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001166:	697a      	ldr	r2, [r7, #20]
 8001168:	4313      	orrs	r3, r2
 800116a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001170:	2b00      	cmp	r3, #0
 8001172:	d00e      	beq.n	8001192 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f000 f8bd 	bl	80012f4 <DMA_CheckFifoParam>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d008      	beq.n	8001192 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2240      	movs	r2, #64	; 0x40
 8001184:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2201      	movs	r2, #1
 800118a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800118e:	2301      	movs	r3, #1
 8001190:	e016      	b.n	80011c0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	697a      	ldr	r2, [r7, #20]
 8001198:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	f000 f874 	bl	8001288 <DMA_CalcBaseAndBitshift>
 80011a0:	4603      	mov	r3, r0
 80011a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011a8:	223f      	movs	r2, #63	; 0x3f
 80011aa:	409a      	lsls	r2, r3
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2200      	movs	r2, #0
 80011b4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2201      	movs	r2, #1
 80011ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80011be:	2300      	movs	r3, #0
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3718      	adds	r7, #24
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	f010803f 	.word	0xf010803f

080011cc <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d101      	bne.n	80011de <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e050      	b.n	8001280 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	2b02      	cmp	r3, #2
 80011e8:	d101      	bne.n	80011ee <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80011ea:	2302      	movs	r3, #2
 80011ec:	e048      	b.n	8001280 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f022 0201 	bic.w	r2, r2, #1
 80011fc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	2200      	movs	r2, #0
 800120c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	2200      	movs	r2, #0
 8001214:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	2200      	movs	r2, #0
 800121c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	2200      	movs	r2, #0
 8001224:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	2221      	movs	r2, #33	; 0x21
 800122c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f000 f82a 	bl	8001288 <DMA_CalcBaseAndBitshift>
 8001234:	4603      	mov	r3, r0
 8001236:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800123c:	223f      	movs	r2, #63	; 0x3f
 800123e:	409a      	lsls	r2, r3
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2200      	movs	r2, #0
 8001248:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2200      	movs	r2, #0
 800124e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2200      	movs	r2, #0
 8001254:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2200      	movs	r2, #0
 800125a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2200      	movs	r2, #0
 8001260:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2200      	movs	r2, #0
 8001266:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2200      	movs	r2, #0
 800126c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2200      	movs	r2, #0
 8001272:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2200      	movs	r2, #0
 800127a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800127e:	2300      	movs	r3, #0
}
 8001280:	4618      	mov	r0, r3
 8001282:	3710      	adds	r7, #16
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}

08001288 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001288:	b480      	push	{r7}
 800128a:	b085      	sub	sp, #20
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	b2db      	uxtb	r3, r3
 8001296:	3b10      	subs	r3, #16
 8001298:	4a13      	ldr	r2, [pc, #76]	; (80012e8 <DMA_CalcBaseAndBitshift+0x60>)
 800129a:	fba2 2303 	umull	r2, r3, r2, r3
 800129e:	091b      	lsrs	r3, r3, #4
 80012a0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80012a2:	4a12      	ldr	r2, [pc, #72]	; (80012ec <DMA_CalcBaseAndBitshift+0x64>)
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	4413      	add	r3, r2
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	461a      	mov	r2, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	2b03      	cmp	r3, #3
 80012b4:	d908      	bls.n	80012c8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	461a      	mov	r2, r3
 80012bc:	4b0c      	ldr	r3, [pc, #48]	; (80012f0 <DMA_CalcBaseAndBitshift+0x68>)
 80012be:	4013      	ands	r3, r2
 80012c0:	1d1a      	adds	r2, r3, #4
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	659a      	str	r2, [r3, #88]	; 0x58
 80012c6:	e006      	b.n	80012d6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	461a      	mov	r2, r3
 80012ce:	4b08      	ldr	r3, [pc, #32]	; (80012f0 <DMA_CalcBaseAndBitshift+0x68>)
 80012d0:	4013      	ands	r3, r2
 80012d2:	687a      	ldr	r2, [r7, #4]
 80012d4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3714      	adds	r7, #20
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	aaaaaaab 	.word	0xaaaaaaab
 80012ec:	080066ac 	.word	0x080066ac
 80012f0:	fffffc00 	.word	0xfffffc00

080012f4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b085      	sub	sp, #20
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012fc:	2300      	movs	r3, #0
 80012fe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001304:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	699b      	ldr	r3, [r3, #24]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d11f      	bne.n	800134e <DMA_CheckFifoParam+0x5a>
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	2b03      	cmp	r3, #3
 8001312:	d856      	bhi.n	80013c2 <DMA_CheckFifoParam+0xce>
 8001314:	a201      	add	r2, pc, #4	; (adr r2, 800131c <DMA_CheckFifoParam+0x28>)
 8001316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800131a:	bf00      	nop
 800131c:	0800132d 	.word	0x0800132d
 8001320:	0800133f 	.word	0x0800133f
 8001324:	0800132d 	.word	0x0800132d
 8001328:	080013c3 	.word	0x080013c3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001330:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001334:	2b00      	cmp	r3, #0
 8001336:	d046      	beq.n	80013c6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001338:	2301      	movs	r3, #1
 800133a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800133c:	e043      	b.n	80013c6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001342:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001346:	d140      	bne.n	80013ca <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001348:	2301      	movs	r3, #1
 800134a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800134c:	e03d      	b.n	80013ca <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	699b      	ldr	r3, [r3, #24]
 8001352:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001356:	d121      	bne.n	800139c <DMA_CheckFifoParam+0xa8>
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	2b03      	cmp	r3, #3
 800135c:	d837      	bhi.n	80013ce <DMA_CheckFifoParam+0xda>
 800135e:	a201      	add	r2, pc, #4	; (adr r2, 8001364 <DMA_CheckFifoParam+0x70>)
 8001360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001364:	08001375 	.word	0x08001375
 8001368:	0800137b 	.word	0x0800137b
 800136c:	08001375 	.word	0x08001375
 8001370:	0800138d 	.word	0x0800138d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001374:	2301      	movs	r3, #1
 8001376:	73fb      	strb	r3, [r7, #15]
      break;
 8001378:	e030      	b.n	80013dc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800137e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d025      	beq.n	80013d2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800138a:	e022      	b.n	80013d2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001390:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001394:	d11f      	bne.n	80013d6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800139a:	e01c      	b.n	80013d6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	2b02      	cmp	r3, #2
 80013a0:	d903      	bls.n	80013aa <DMA_CheckFifoParam+0xb6>
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	2b03      	cmp	r3, #3
 80013a6:	d003      	beq.n	80013b0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80013a8:	e018      	b.n	80013dc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	73fb      	strb	r3, [r7, #15]
      break;
 80013ae:	e015      	b.n	80013dc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d00e      	beq.n	80013da <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80013bc:	2301      	movs	r3, #1
 80013be:	73fb      	strb	r3, [r7, #15]
      break;
 80013c0:	e00b      	b.n	80013da <DMA_CheckFifoParam+0xe6>
      break;
 80013c2:	bf00      	nop
 80013c4:	e00a      	b.n	80013dc <DMA_CheckFifoParam+0xe8>
      break;
 80013c6:	bf00      	nop
 80013c8:	e008      	b.n	80013dc <DMA_CheckFifoParam+0xe8>
      break;
 80013ca:	bf00      	nop
 80013cc:	e006      	b.n	80013dc <DMA_CheckFifoParam+0xe8>
      break;
 80013ce:	bf00      	nop
 80013d0:	e004      	b.n	80013dc <DMA_CheckFifoParam+0xe8>
      break;
 80013d2:	bf00      	nop
 80013d4:	e002      	b.n	80013dc <DMA_CheckFifoParam+0xe8>
      break;   
 80013d6:	bf00      	nop
 80013d8:	e000      	b.n	80013dc <DMA_CheckFifoParam+0xe8>
      break;
 80013da:	bf00      	nop
    }
  } 
  
  return status; 
 80013dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3714      	adds	r7, #20
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop

080013ec <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d101      	bne.n	80013fe <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e039      	b.n	8001472 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001404:	b2db      	uxtb	r3, r3
 8001406:	2b00      	cmp	r3, #0
 8001408:	d106      	bne.n	8001418 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2200      	movs	r2, #0
 800140e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f7ff faf4 	bl	8000a00 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2202      	movs	r2, #2
 800141c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	685a      	ldr	r2, [r3, #4]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	430a      	orrs	r2, r1
 8001434:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800143c:	f023 0107 	bic.w	r1, r3, #7
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	689a      	ldr	r2, [r3, #8]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	430a      	orrs	r2, r1
 800144a:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001452:	4b0a      	ldr	r3, [pc, #40]	; (800147c <HAL_DMA2D_Init+0x90>)
 8001454:	4013      	ands	r3, r2
 8001456:	687a      	ldr	r2, [r7, #4]
 8001458:	68d1      	ldr	r1, [r2, #12]
 800145a:	687a      	ldr	r2, [r7, #4]
 800145c:	6812      	ldr	r2, [r2, #0]
 800145e:	430b      	orrs	r3, r1
 8001460:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2200      	movs	r2, #0
 8001466:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2201      	movs	r2, #1
 800146c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8001470:	2300      	movs	r3, #0
}
 8001472:	4618      	mov	r0, r3
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	ffffc000 	.word	0xffffc000

08001480 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b086      	sub	sp, #24
 8001484:	af02      	add	r7, sp, #8
 8001486:	60f8      	str	r0, [r7, #12]
 8001488:	60b9      	str	r1, [r7, #8]
 800148a:	607a      	str	r2, [r7, #4]
 800148c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001494:	2b01      	cmp	r3, #1
 8001496:	d101      	bne.n	800149c <HAL_DMA2D_Start+0x1c>
 8001498:	2302      	movs	r3, #2
 800149a:	e018      	b.n	80014ce <HAL_DMA2D_Start+0x4e>
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	2201      	movs	r2, #1
 80014a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	2202      	movs	r2, #2
 80014a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80014ac:	69bb      	ldr	r3, [r7, #24]
 80014ae:	9300      	str	r3, [sp, #0]
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	68b9      	ldr	r1, [r7, #8]
 80014b6:	68f8      	ldr	r0, [r7, #12]
 80014b8:	f000 f988 	bl	80017cc <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f042 0201 	orr.w	r2, r2, #1
 80014ca:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80014cc:	2300      	movs	r3, #0
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3710      	adds	r7, #16
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b086      	sub	sp, #24
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
 80014de:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80014e0:	2300      	movs	r3, #0
 80014e2:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d056      	beq.n	80015a0 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80014f2:	f7ff fb91 	bl	8000c18 <HAL_GetTick>
 80014f6:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80014f8:	e04b      	b.n	8001592 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8001508:	2b00      	cmp	r3, #0
 800150a:	d023      	beq.n	8001554 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	f003 0320 	and.w	r3, r3, #32
 8001512:	2b00      	cmp	r3, #0
 8001514:	d005      	beq.n	8001522 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800151a:	f043 0202 	orr.w	r2, r3, #2
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	f003 0301 	and.w	r3, r3, #1
 8001528:	2b00      	cmp	r3, #0
 800152a:	d005      	beq.n	8001538 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001530:	f043 0201 	orr.w	r2, r3, #1
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2221      	movs	r2, #33	; 0x21
 800153e:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2204      	movs	r2, #4
 8001544:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2200      	movs	r2, #0
 800154c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	e0a5      	b.n	80016a0 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800155a:	d01a      	beq.n	8001592 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800155c:	f7ff fb5c 	bl	8000c18 <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	683a      	ldr	r2, [r7, #0]
 8001568:	429a      	cmp	r2, r3
 800156a:	d302      	bcc.n	8001572 <HAL_DMA2D_PollForTransfer+0x9c>
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d10f      	bne.n	8001592 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001576:	f043 0220 	orr.w	r2, r3, #32
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2203      	movs	r2, #3
 8001582:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2200      	movs	r2, #0
 800158a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800158e:	2303      	movs	r3, #3
 8001590:	e086      	b.n	80016a0 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f003 0302 	and.w	r3, r3, #2
 800159c:	2b00      	cmp	r3, #0
 800159e:	d0ac      	beq.n	80014fa <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	69db      	ldr	r3, [r3, #28]
 80015a6:	f003 0320 	and.w	r3, r3, #32
 80015aa:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b2:	f003 0320 	and.w	r3, r3, #32
 80015b6:	693a      	ldr	r2, [r7, #16]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d061      	beq.n	8001686 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80015c2:	f7ff fb29 	bl	8000c18 <HAL_GetTick>
 80015c6:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80015c8:	e056      	b.n	8001678 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	f003 0329 	and.w	r3, r3, #41	; 0x29
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d02e      	beq.n	800163a <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	f003 0308 	and.w	r3, r3, #8
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d005      	beq.n	80015f2 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015ea:	f043 0204 	orr.w	r2, r3, #4
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	f003 0320 	and.w	r3, r3, #32
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d005      	beq.n	8001608 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001600:	f043 0202 	orr.w	r2, r3, #2
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	f003 0301 	and.w	r3, r3, #1
 800160e:	2b00      	cmp	r3, #0
 8001610:	d005      	beq.n	800161e <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001616:	f043 0201 	orr.w	r2, r3, #1
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	2229      	movs	r2, #41	; 0x29
 8001624:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2204      	movs	r2, #4
 800162a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2200      	movs	r2, #0
 8001632:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e032      	b.n	80016a0 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001640:	d01a      	beq.n	8001678 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001642:	f7ff fae9 	bl	8000c18 <HAL_GetTick>
 8001646:	4602      	mov	r2, r0
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	683a      	ldr	r2, [r7, #0]
 800164e:	429a      	cmp	r2, r3
 8001650:	d302      	bcc.n	8001658 <HAL_DMA2D_PollForTransfer+0x182>
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d10f      	bne.n	8001678 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800165c:	f043 0220 	orr.w	r2, r3, #32
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2203      	movs	r2, #3
 8001668:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2200      	movs	r2, #0
 8001670:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8001674:	2303      	movs	r3, #3
 8001676:	e013      	b.n	80016a0 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f003 0310 	and.w	r3, r3, #16
 8001682:	2b00      	cmp	r3, #0
 8001684:	d0a1      	beq.n	80015ca <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	2212      	movs	r2, #18
 800168c:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2201      	movs	r2, #1
 8001692:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2200      	movs	r2, #0
 800169a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800169e:	2300      	movs	r3, #0
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3718      	adds	r7, #24
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b087      	sub	sp, #28
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d101      	bne.n	80016c8 <HAL_DMA2D_ConfigLayer+0x20>
 80016c4:	2302      	movs	r3, #2
 80016c6:	e079      	b.n	80017bc <HAL_DMA2D_ConfigLayer+0x114>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2201      	movs	r2, #1
 80016cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2202      	movs	r2, #2
 80016d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	011b      	lsls	r3, r3, #4
 80016dc:	3318      	adds	r3, #24
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	4413      	add	r3, r2
 80016e2:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	685a      	ldr	r2, [r3, #4]
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	041b      	lsls	r3, r3, #16
 80016ee:	4313      	orrs	r3, r2
 80016f0:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80016f2:	4b35      	ldr	r3, [pc, #212]	; (80017c8 <HAL_DMA2D_ConfigLayer+0x120>)
 80016f4:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	2b0a      	cmp	r3, #10
 80016fc:	d003      	beq.n	8001706 <HAL_DMA2D_ConfigLayer+0x5e>
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	2b09      	cmp	r3, #9
 8001704:	d107      	bne.n	8001716 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	68db      	ldr	r3, [r3, #12]
 800170a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800170e:	697a      	ldr	r2, [r7, #20]
 8001710:	4313      	orrs	r3, r2
 8001712:	617b      	str	r3, [r7, #20]
 8001714:	e005      	b.n	8001722 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	68db      	ldr	r3, [r3, #12]
 800171a:	061b      	lsls	r3, r3, #24
 800171c:	697a      	ldr	r2, [r7, #20]
 800171e:	4313      	orrs	r3, r2
 8001720:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d120      	bne.n	800176a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	43db      	mvns	r3, r3
 8001732:	ea02 0103 	and.w	r1, r2, r3
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	697a      	ldr	r2, [r7, #20]
 800173c:	430a      	orrs	r2, r1
 800173e:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	693a      	ldr	r2, [r7, #16]
 8001746:	6812      	ldr	r2, [r2, #0]
 8001748:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	2b0a      	cmp	r3, #10
 8001750:	d003      	beq.n	800175a <HAL_DMA2D_ConfigLayer+0xb2>
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	2b09      	cmp	r3, #9
 8001758:	d127      	bne.n	80017aa <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	68da      	ldr	r2, [r3, #12]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001766:	629a      	str	r2, [r3, #40]	; 0x28
 8001768:	e01f      	b.n	80017aa <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	69da      	ldr	r2, [r3, #28]
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	43db      	mvns	r3, r3
 8001774:	ea02 0103 	and.w	r1, r2, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	697a      	ldr	r2, [r7, #20]
 800177e:	430a      	orrs	r2, r1
 8001780:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	693a      	ldr	r2, [r7, #16]
 8001788:	6812      	ldr	r2, [r2, #0]
 800178a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	2b0a      	cmp	r3, #10
 8001792:	d003      	beq.n	800179c <HAL_DMA2D_ConfigLayer+0xf4>
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	2b09      	cmp	r3, #9
 800179a:	d106      	bne.n	80017aa <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	68da      	ldr	r2, [r3, #12]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80017a8:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2201      	movs	r2, #1
 80017ae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2200      	movs	r2, #0
 80017b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80017ba:	2300      	movs	r3, #0
}
 80017bc:	4618      	mov	r0, r3
 80017be:	371c      	adds	r7, #28
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr
 80017c8:	ff03000f 	.word	0xff03000f

080017cc <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b08b      	sub	sp, #44	; 0x2c
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	60b9      	str	r1, [r7, #8]
 80017d6:	607a      	str	r2, [r7, #4]
 80017d8:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e0:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	041a      	lsls	r2, r3, #16
 80017e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017ea:	431a      	orrs	r2, r3
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	430a      	orrs	r2, r1
 80017f2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	687a      	ldr	r2, [r7, #4]
 80017fa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001804:	d174      	bne.n	80018f0 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800180c:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001814:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800181c:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	b2db      	uxtb	r3, r3
 8001822:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d108      	bne.n	800183e <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	431a      	orrs	r2, r3
 8001832:	6a3b      	ldr	r3, [r7, #32]
 8001834:	4313      	orrs	r3, r2
 8001836:	697a      	ldr	r2, [r7, #20]
 8001838:	4313      	orrs	r3, r2
 800183a:	627b      	str	r3, [r7, #36]	; 0x24
 800183c:	e053      	b.n	80018e6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	2b01      	cmp	r3, #1
 8001844:	d106      	bne.n	8001854 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8001846:	69ba      	ldr	r2, [r7, #24]
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	4313      	orrs	r3, r2
 800184c:	697a      	ldr	r2, [r7, #20]
 800184e:	4313      	orrs	r3, r2
 8001850:	627b      	str	r3, [r7, #36]	; 0x24
 8001852:	e048      	b.n	80018e6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	2b02      	cmp	r3, #2
 800185a:	d111      	bne.n	8001880 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	0cdb      	lsrs	r3, r3, #19
 8001860:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8001862:	69bb      	ldr	r3, [r7, #24]
 8001864:	0a9b      	lsrs	r3, r3, #10
 8001866:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	08db      	lsrs	r3, r3, #3
 800186c:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800186e:	69bb      	ldr	r3, [r7, #24]
 8001870:	015a      	lsls	r2, r3, #5
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	02db      	lsls	r3, r3, #11
 8001876:	4313      	orrs	r3, r2
 8001878:	697a      	ldr	r2, [r7, #20]
 800187a:	4313      	orrs	r3, r2
 800187c:	627b      	str	r3, [r7, #36]	; 0x24
 800187e:	e032      	b.n	80018e6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	2b03      	cmp	r3, #3
 8001886:	d117      	bne.n	80018b8 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8001888:	6a3b      	ldr	r3, [r7, #32]
 800188a:	0fdb      	lsrs	r3, r3, #31
 800188c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	0cdb      	lsrs	r3, r3, #19
 8001892:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	0adb      	lsrs	r3, r3, #11
 8001898:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	08db      	lsrs	r3, r3, #3
 800189e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80018a0:	69bb      	ldr	r3, [r7, #24]
 80018a2:	015a      	lsls	r2, r3, #5
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	029b      	lsls	r3, r3, #10
 80018a8:	431a      	orrs	r2, r3
 80018aa:	6a3b      	ldr	r3, [r7, #32]
 80018ac:	03db      	lsls	r3, r3, #15
 80018ae:	4313      	orrs	r3, r2
 80018b0:	697a      	ldr	r2, [r7, #20]
 80018b2:	4313      	orrs	r3, r2
 80018b4:	627b      	str	r3, [r7, #36]	; 0x24
 80018b6:	e016      	b.n	80018e6 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80018b8:	6a3b      	ldr	r3, [r7, #32]
 80018ba:	0f1b      	lsrs	r3, r3, #28
 80018bc:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	0d1b      	lsrs	r3, r3, #20
 80018c2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80018c4:	69bb      	ldr	r3, [r7, #24]
 80018c6:	0b1b      	lsrs	r3, r3, #12
 80018c8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	091b      	lsrs	r3, r3, #4
 80018ce:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	011a      	lsls	r2, r3, #4
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	021b      	lsls	r3, r3, #8
 80018d8:	431a      	orrs	r2, r3
 80018da:	6a3b      	ldr	r3, [r7, #32]
 80018dc:	031b      	lsls	r3, r3, #12
 80018de:	4313      	orrs	r3, r2
 80018e0:	697a      	ldr	r2, [r7, #20]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018ec:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80018ee:	e003      	b.n	80018f8 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	68ba      	ldr	r2, [r7, #8]
 80018f6:	60da      	str	r2, [r3, #12]
}
 80018f8:	bf00      	nop
 80018fa:	372c      	adds	r7, #44	; 0x2c
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001904:	b480      	push	{r7}
 8001906:	b089      	sub	sp, #36	; 0x24
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800190e:	2300      	movs	r3, #0
 8001910:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001912:	2300      	movs	r3, #0
 8001914:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001916:	2300      	movs	r3, #0
 8001918:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800191a:	2300      	movs	r3, #0
 800191c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800191e:	2300      	movs	r3, #0
 8001920:	61fb      	str	r3, [r7, #28]
 8001922:	e175      	b.n	8001c10 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001924:	2201      	movs	r2, #1
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	fa02 f303 	lsl.w	r3, r2, r3
 800192c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	697a      	ldr	r2, [r7, #20]
 8001934:	4013      	ands	r3, r2
 8001936:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001938:	693a      	ldr	r2, [r7, #16]
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	429a      	cmp	r2, r3
 800193e:	f040 8164 	bne.w	8001c0a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	2b01      	cmp	r3, #1
 8001948:	d00b      	beq.n	8001962 <HAL_GPIO_Init+0x5e>
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	2b02      	cmp	r3, #2
 8001950:	d007      	beq.n	8001962 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001956:	2b11      	cmp	r3, #17
 8001958:	d003      	beq.n	8001962 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	2b12      	cmp	r3, #18
 8001960:	d130      	bne.n	80019c4 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	005b      	lsls	r3, r3, #1
 800196c:	2203      	movs	r2, #3
 800196e:	fa02 f303 	lsl.w	r3, r2, r3
 8001972:	43db      	mvns	r3, r3
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	4013      	ands	r3, r2
 8001978:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	68da      	ldr	r2, [r3, #12]
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	fa02 f303 	lsl.w	r3, r2, r3
 8001986:	69ba      	ldr	r2, [r7, #24]
 8001988:	4313      	orrs	r3, r2
 800198a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	69ba      	ldr	r2, [r7, #24]
 8001990:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001998:	2201      	movs	r2, #1
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	fa02 f303 	lsl.w	r3, r2, r3
 80019a0:	43db      	mvns	r3, r3
 80019a2:	69ba      	ldr	r2, [r7, #24]
 80019a4:	4013      	ands	r3, r2
 80019a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	091b      	lsrs	r3, r3, #4
 80019ae:	f003 0201 	and.w	r2, r3, #1
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	2203      	movs	r2, #3
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	43db      	mvns	r3, r3
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	4013      	ands	r3, r2
 80019da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	689a      	ldr	r2, [r3, #8]
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	4313      	orrs	r3, r2
 80019ec:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d003      	beq.n	8001a04 <HAL_GPIO_Init+0x100>
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	2b12      	cmp	r3, #18
 8001a02:	d123      	bne.n	8001a4c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	08da      	lsrs	r2, r3, #3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	3208      	adds	r2, #8
 8001a0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	f003 0307 	and.w	r3, r3, #7
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	220f      	movs	r2, #15
 8001a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a20:	43db      	mvns	r3, r3
 8001a22:	69ba      	ldr	r2, [r7, #24]
 8001a24:	4013      	ands	r3, r2
 8001a26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	691a      	ldr	r2, [r3, #16]
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	f003 0307 	and.w	r3, r3, #7
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	fa02 f303 	lsl.w	r3, r2, r3
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	08da      	lsrs	r2, r3, #3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	3208      	adds	r2, #8
 8001a46:	69b9      	ldr	r1, [r7, #24]
 8001a48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	2203      	movs	r2, #3
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	43db      	mvns	r3, r3
 8001a5e:	69ba      	ldr	r2, [r7, #24]
 8001a60:	4013      	ands	r3, r2
 8001a62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f003 0203 	and.w	r2, r3, #3
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	005b      	lsls	r3, r3, #1
 8001a70:	fa02 f303 	lsl.w	r3, r2, r3
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	f000 80be 	beq.w	8001c0a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a8e:	4b66      	ldr	r3, [pc, #408]	; (8001c28 <HAL_GPIO_Init+0x324>)
 8001a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a92:	4a65      	ldr	r2, [pc, #404]	; (8001c28 <HAL_GPIO_Init+0x324>)
 8001a94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a98:	6453      	str	r3, [r2, #68]	; 0x44
 8001a9a:	4b63      	ldr	r3, [pc, #396]	; (8001c28 <HAL_GPIO_Init+0x324>)
 8001a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aa2:	60fb      	str	r3, [r7, #12]
 8001aa4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001aa6:	4a61      	ldr	r2, [pc, #388]	; (8001c2c <HAL_GPIO_Init+0x328>)
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	089b      	lsrs	r3, r3, #2
 8001aac:	3302      	adds	r3, #2
 8001aae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	f003 0303 	and.w	r3, r3, #3
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	220f      	movs	r2, #15
 8001abe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac2:	43db      	mvns	r3, r3
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4a58      	ldr	r2, [pc, #352]	; (8001c30 <HAL_GPIO_Init+0x32c>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d037      	beq.n	8001b42 <HAL_GPIO_Init+0x23e>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4a57      	ldr	r2, [pc, #348]	; (8001c34 <HAL_GPIO_Init+0x330>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d031      	beq.n	8001b3e <HAL_GPIO_Init+0x23a>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4a56      	ldr	r2, [pc, #344]	; (8001c38 <HAL_GPIO_Init+0x334>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d02b      	beq.n	8001b3a <HAL_GPIO_Init+0x236>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4a55      	ldr	r2, [pc, #340]	; (8001c3c <HAL_GPIO_Init+0x338>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d025      	beq.n	8001b36 <HAL_GPIO_Init+0x232>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a54      	ldr	r2, [pc, #336]	; (8001c40 <HAL_GPIO_Init+0x33c>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d01f      	beq.n	8001b32 <HAL_GPIO_Init+0x22e>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4a53      	ldr	r2, [pc, #332]	; (8001c44 <HAL_GPIO_Init+0x340>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d019      	beq.n	8001b2e <HAL_GPIO_Init+0x22a>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4a52      	ldr	r2, [pc, #328]	; (8001c48 <HAL_GPIO_Init+0x344>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d013      	beq.n	8001b2a <HAL_GPIO_Init+0x226>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4a51      	ldr	r2, [pc, #324]	; (8001c4c <HAL_GPIO_Init+0x348>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d00d      	beq.n	8001b26 <HAL_GPIO_Init+0x222>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a50      	ldr	r2, [pc, #320]	; (8001c50 <HAL_GPIO_Init+0x34c>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d007      	beq.n	8001b22 <HAL_GPIO_Init+0x21e>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4a4f      	ldr	r2, [pc, #316]	; (8001c54 <HAL_GPIO_Init+0x350>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d101      	bne.n	8001b1e <HAL_GPIO_Init+0x21a>
 8001b1a:	2309      	movs	r3, #9
 8001b1c:	e012      	b.n	8001b44 <HAL_GPIO_Init+0x240>
 8001b1e:	230a      	movs	r3, #10
 8001b20:	e010      	b.n	8001b44 <HAL_GPIO_Init+0x240>
 8001b22:	2308      	movs	r3, #8
 8001b24:	e00e      	b.n	8001b44 <HAL_GPIO_Init+0x240>
 8001b26:	2307      	movs	r3, #7
 8001b28:	e00c      	b.n	8001b44 <HAL_GPIO_Init+0x240>
 8001b2a:	2306      	movs	r3, #6
 8001b2c:	e00a      	b.n	8001b44 <HAL_GPIO_Init+0x240>
 8001b2e:	2305      	movs	r3, #5
 8001b30:	e008      	b.n	8001b44 <HAL_GPIO_Init+0x240>
 8001b32:	2304      	movs	r3, #4
 8001b34:	e006      	b.n	8001b44 <HAL_GPIO_Init+0x240>
 8001b36:	2303      	movs	r3, #3
 8001b38:	e004      	b.n	8001b44 <HAL_GPIO_Init+0x240>
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	e002      	b.n	8001b44 <HAL_GPIO_Init+0x240>
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e000      	b.n	8001b44 <HAL_GPIO_Init+0x240>
 8001b42:	2300      	movs	r3, #0
 8001b44:	69fa      	ldr	r2, [r7, #28]
 8001b46:	f002 0203 	and.w	r2, r2, #3
 8001b4a:	0092      	lsls	r2, r2, #2
 8001b4c:	4093      	lsls	r3, r2
 8001b4e:	69ba      	ldr	r2, [r7, #24]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001b54:	4935      	ldr	r1, [pc, #212]	; (8001c2c <HAL_GPIO_Init+0x328>)
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	089b      	lsrs	r3, r3, #2
 8001b5a:	3302      	adds	r3, #2
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b62:	4b3d      	ldr	r3, [pc, #244]	; (8001c58 <HAL_GPIO_Init+0x354>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	43db      	mvns	r3, r3
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d003      	beq.n	8001b86 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b86:	4a34      	ldr	r2, [pc, #208]	; (8001c58 <HAL_GPIO_Init+0x354>)
 8001b88:	69bb      	ldr	r3, [r7, #24]
 8001b8a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001b8c:	4b32      	ldr	r3, [pc, #200]	; (8001c58 <HAL_GPIO_Init+0x354>)
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	43db      	mvns	r3, r3
 8001b96:	69ba      	ldr	r2, [r7, #24]
 8001b98:	4013      	ands	r3, r2
 8001b9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d003      	beq.n	8001bb0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bb0:	4a29      	ldr	r2, [pc, #164]	; (8001c58 <HAL_GPIO_Init+0x354>)
 8001bb2:	69bb      	ldr	r3, [r7, #24]
 8001bb4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bb6:	4b28      	ldr	r3, [pc, #160]	; (8001c58 <HAL_GPIO_Init+0x354>)
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	43db      	mvns	r3, r3
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d003      	beq.n	8001bda <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bda:	4a1f      	ldr	r2, [pc, #124]	; (8001c58 <HAL_GPIO_Init+0x354>)
 8001bdc:	69bb      	ldr	r3, [r7, #24]
 8001bde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001be0:	4b1d      	ldr	r3, [pc, #116]	; (8001c58 <HAL_GPIO_Init+0x354>)
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	43db      	mvns	r3, r3
 8001bea:	69ba      	ldr	r2, [r7, #24]
 8001bec:	4013      	ands	r3, r2
 8001bee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d003      	beq.n	8001c04 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	4313      	orrs	r3, r2
 8001c02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c04:	4a14      	ldr	r2, [pc, #80]	; (8001c58 <HAL_GPIO_Init+0x354>)
 8001c06:	69bb      	ldr	r3, [r7, #24]
 8001c08:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	61fb      	str	r3, [r7, #28]
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	2b0f      	cmp	r3, #15
 8001c14:	f67f ae86 	bls.w	8001924 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001c18:	bf00      	nop
 8001c1a:	bf00      	nop
 8001c1c:	3724      	adds	r7, #36	; 0x24
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	40023800 	.word	0x40023800
 8001c2c:	40013800 	.word	0x40013800
 8001c30:	40020000 	.word	0x40020000
 8001c34:	40020400 	.word	0x40020400
 8001c38:	40020800 	.word	0x40020800
 8001c3c:	40020c00 	.word	0x40020c00
 8001c40:	40021000 	.word	0x40021000
 8001c44:	40021400 	.word	0x40021400
 8001c48:	40021800 	.word	0x40021800
 8001c4c:	40021c00 	.word	0x40021c00
 8001c50:	40022000 	.word	0x40022000
 8001c54:	40022400 	.word	0x40022400
 8001c58:	40013c00 	.word	0x40013c00

08001c5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	460b      	mov	r3, r1
 8001c66:	807b      	strh	r3, [r7, #2]
 8001c68:	4613      	mov	r3, r2
 8001c6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c6c:	787b      	ldrb	r3, [r7, #1]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d003      	beq.n	8001c7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c72:	887a      	ldrh	r2, [r7, #2]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001c78:	e003      	b.n	8001c82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001c7a:	887b      	ldrh	r3, [r7, #2]
 8001c7c:	041a      	lsls	r2, r3, #16
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	619a      	str	r2, [r3, #24]
}
 8001c82:	bf00      	nop
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr

08001c8e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	b085      	sub	sp, #20
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
 8001c96:	460b      	mov	r3, r1
 8001c98:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	695b      	ldr	r3, [r3, #20]
 8001c9e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ca0:	887a      	ldrh	r2, [r7, #2]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	041a      	lsls	r2, r3, #16
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	43d9      	mvns	r1, r3
 8001cac:	887b      	ldrh	r3, [r7, #2]
 8001cae:	400b      	ands	r3, r1
 8001cb0:	431a      	orrs	r2, r3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	619a      	str	r2, [r3, #24]
}
 8001cb6:	bf00      	nop
 8001cb8:	3714      	adds	r7, #20
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
	...

08001cc4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d101      	bne.n	8001cd6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e07f      	b.n	8001dd6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d106      	bne.n	8001cf0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f000 f8a9 	bl	8001e42 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2224      	movs	r2, #36	; 0x24
 8001cf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f022 0201 	bic.w	r2, r2, #1
 8001d06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	685a      	ldr	r2, [r3, #4]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d14:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	689a      	ldr	r2, [r3, #8]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d24:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	68db      	ldr	r3, [r3, #12]
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d107      	bne.n	8001d3e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	689a      	ldr	r2, [r3, #8]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d3a:	609a      	str	r2, [r3, #8]
 8001d3c:	e006      	b.n	8001d4c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	689a      	ldr	r2, [r3, #8]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001d4a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d104      	bne.n	8001d5e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d5c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	6859      	ldr	r1, [r3, #4]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	4b1d      	ldr	r3, [pc, #116]	; (8001de0 <HAL_I2C_Init+0x11c>)
 8001d6a:	430b      	orrs	r3, r1
 8001d6c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	68da      	ldr	r2, [r3, #12]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d7c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	691a      	ldr	r2, [r3, #16]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	695b      	ldr	r3, [r3, #20]
 8001d86:	ea42 0103 	orr.w	r1, r2, r3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	699b      	ldr	r3, [r3, #24]
 8001d8e:	021a      	lsls	r2, r3, #8
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	430a      	orrs	r2, r1
 8001d96:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	69d9      	ldr	r1, [r3, #28]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6a1a      	ldr	r2, [r3, #32]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	430a      	orrs	r2, r1
 8001da6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f042 0201 	orr.w	r2, r2, #1
 8001db6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2220      	movs	r2, #32
 8001dc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	02008000 	.word	0x02008000

08001de4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d101      	bne.n	8001df6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e021      	b.n	8001e3a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2224      	movs	r2, #36	; 0x24
 8001dfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f022 0201 	bic.w	r2, r2, #1
 8001e0c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f000 f821 	bl	8001e56 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2200      	movs	r2, #0
 8001e18:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2200      	movs	r2, #0
 8001e26:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2200      	movs	r2, #0
 8001e34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8001e42:	b480      	push	{r7}
 8001e44:	b083      	sub	sp, #12
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8001e4a:	bf00      	nop
 8001e4c:	370c      	adds	r7, #12
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr

08001e56 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8001e56:	b480      	push	{r7}
 8001e58:	b083      	sub	sp, #12
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8001e5e:	bf00      	nop
 8001e60:	370c      	adds	r7, #12
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
	...

08001e6c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b088      	sub	sp, #32
 8001e70:	af02      	add	r7, sp, #8
 8001e72:	60f8      	str	r0, [r7, #12]
 8001e74:	4608      	mov	r0, r1
 8001e76:	4611      	mov	r1, r2
 8001e78:	461a      	mov	r2, r3
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	817b      	strh	r3, [r7, #10]
 8001e7e:	460b      	mov	r3, r1
 8001e80:	813b      	strh	r3, [r7, #8]
 8001e82:	4613      	mov	r3, r2
 8001e84:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	2b20      	cmp	r3, #32
 8001e90:	f040 80f9 	bne.w	8002086 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e94:	6a3b      	ldr	r3, [r7, #32]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d002      	beq.n	8001ea0 <HAL_I2C_Mem_Write+0x34>
 8001e9a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d105      	bne.n	8001eac <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ea6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e0ed      	b.n	8002088 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d101      	bne.n	8001eba <HAL_I2C_Mem_Write+0x4e>
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	e0e6      	b.n	8002088 <HAL_I2C_Mem_Write+0x21c>
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001ec2:	f7fe fea9 	bl	8000c18 <HAL_GetTick>
 8001ec6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	9300      	str	r3, [sp, #0]
 8001ecc:	2319      	movs	r3, #25
 8001ece:	2201      	movs	r2, #1
 8001ed0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ed4:	68f8      	ldr	r0, [r7, #12]
 8001ed6:	f000 fad1 	bl	800247c <I2C_WaitOnFlagUntilTimeout>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d001      	beq.n	8001ee4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e0d1      	b.n	8002088 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2221      	movs	r2, #33	; 0x21
 8001ee8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2240      	movs	r2, #64	; 0x40
 8001ef0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	6a3a      	ldr	r2, [r7, #32]
 8001efe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001f04:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001f0c:	88f8      	ldrh	r0, [r7, #6]
 8001f0e:	893a      	ldrh	r2, [r7, #8]
 8001f10:	8979      	ldrh	r1, [r7, #10]
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	9301      	str	r3, [sp, #4]
 8001f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f18:	9300      	str	r3, [sp, #0]
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	68f8      	ldr	r0, [r7, #12]
 8001f1e:	f000 f9e1 	bl	80022e4 <I2C_RequestMemoryWrite>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d005      	beq.n	8001f34 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e0a9      	b.n	8002088 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	2bff      	cmp	r3, #255	; 0xff
 8001f3c:	d90e      	bls.n	8001f5c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	22ff      	movs	r2, #255	; 0xff
 8001f42:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f48:	b2da      	uxtb	r2, r3
 8001f4a:	8979      	ldrh	r1, [r7, #10]
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	9300      	str	r3, [sp, #0]
 8001f50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f54:	68f8      	ldr	r0, [r7, #12]
 8001f56:	f000 fbb3 	bl	80026c0 <I2C_TransferConfig>
 8001f5a:	e00f      	b.n	8001f7c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f60:	b29a      	uxth	r2, r3
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f6a:	b2da      	uxtb	r2, r3
 8001f6c:	8979      	ldrh	r1, [r7, #10]
 8001f6e:	2300      	movs	r3, #0
 8001f70:	9300      	str	r3, [sp, #0]
 8001f72:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f76:	68f8      	ldr	r0, [r7, #12]
 8001f78:	f000 fba2 	bl	80026c0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f7c:	697a      	ldr	r2, [r7, #20]
 8001f7e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f80:	68f8      	ldr	r0, [r7, #12]
 8001f82:	f000 fabb 	bl	80024fc <I2C_WaitOnTXISFlagUntilTimeout>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d001      	beq.n	8001f90 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e07b      	b.n	8002088 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f94:	781a      	ldrb	r2, [r3, #0]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa0:	1c5a      	adds	r2, r3, #1
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001faa:	b29b      	uxth	r3, r3
 8001fac:	3b01      	subs	r3, #1
 8001fae:	b29a      	uxth	r2, r3
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fb8:	3b01      	subs	r3, #1
 8001fba:	b29a      	uxth	r2, r3
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fc4:	b29b      	uxth	r3, r3
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d034      	beq.n	8002034 <HAL_I2C_Mem_Write+0x1c8>
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d130      	bne.n	8002034 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	9300      	str	r3, [sp, #0]
 8001fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fd8:	2200      	movs	r2, #0
 8001fda:	2180      	movs	r1, #128	; 0x80
 8001fdc:	68f8      	ldr	r0, [r7, #12]
 8001fde:	f000 fa4d 	bl	800247c <I2C_WaitOnFlagUntilTimeout>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e04d      	b.n	8002088 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	2bff      	cmp	r3, #255	; 0xff
 8001ff4:	d90e      	bls.n	8002014 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	22ff      	movs	r2, #255	; 0xff
 8001ffa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002000:	b2da      	uxtb	r2, r3
 8002002:	8979      	ldrh	r1, [r7, #10]
 8002004:	2300      	movs	r3, #0
 8002006:	9300      	str	r3, [sp, #0]
 8002008:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800200c:	68f8      	ldr	r0, [r7, #12]
 800200e:	f000 fb57 	bl	80026c0 <I2C_TransferConfig>
 8002012:	e00f      	b.n	8002034 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002018:	b29a      	uxth	r2, r3
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002022:	b2da      	uxtb	r2, r3
 8002024:	8979      	ldrh	r1, [r7, #10]
 8002026:	2300      	movs	r3, #0
 8002028:	9300      	str	r3, [sp, #0]
 800202a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800202e:	68f8      	ldr	r0, [r7, #12]
 8002030:	f000 fb46 	bl	80026c0 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002038:	b29b      	uxth	r3, r3
 800203a:	2b00      	cmp	r3, #0
 800203c:	d19e      	bne.n	8001f7c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800203e:	697a      	ldr	r2, [r7, #20]
 8002040:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002042:	68f8      	ldr	r0, [r7, #12]
 8002044:	f000 fa9a 	bl	800257c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e01a      	b.n	8002088 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	2220      	movs	r2, #32
 8002058:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	6859      	ldr	r1, [r3, #4]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	4b0a      	ldr	r3, [pc, #40]	; (8002090 <HAL_I2C_Mem_Write+0x224>)
 8002066:	400b      	ands	r3, r1
 8002068:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	2220      	movs	r2, #32
 800206e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2200      	movs	r2, #0
 8002076:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2200      	movs	r2, #0
 800207e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002082:	2300      	movs	r3, #0
 8002084:	e000      	b.n	8002088 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002086:	2302      	movs	r3, #2
  }
}
 8002088:	4618      	mov	r0, r3
 800208a:	3718      	adds	r7, #24
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	fe00e800 	.word	0xfe00e800

08002094 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b088      	sub	sp, #32
 8002098:	af02      	add	r7, sp, #8
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	4608      	mov	r0, r1
 800209e:	4611      	mov	r1, r2
 80020a0:	461a      	mov	r2, r3
 80020a2:	4603      	mov	r3, r0
 80020a4:	817b      	strh	r3, [r7, #10]
 80020a6:	460b      	mov	r3, r1
 80020a8:	813b      	strh	r3, [r7, #8]
 80020aa:	4613      	mov	r3, r2
 80020ac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	2b20      	cmp	r3, #32
 80020b8:	f040 80fd 	bne.w	80022b6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80020bc:	6a3b      	ldr	r3, [r7, #32]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d002      	beq.n	80020c8 <HAL_I2C_Mem_Read+0x34>
 80020c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d105      	bne.n	80020d4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020ce:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e0f1      	b.n	80022b8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d101      	bne.n	80020e2 <HAL_I2C_Mem_Read+0x4e>
 80020de:	2302      	movs	r3, #2
 80020e0:	e0ea      	b.n	80022b8 <HAL_I2C_Mem_Read+0x224>
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2201      	movs	r2, #1
 80020e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80020ea:	f7fe fd95 	bl	8000c18 <HAL_GetTick>
 80020ee:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	9300      	str	r3, [sp, #0]
 80020f4:	2319      	movs	r3, #25
 80020f6:	2201      	movs	r2, #1
 80020f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80020fc:	68f8      	ldr	r0, [r7, #12]
 80020fe:	f000 f9bd 	bl	800247c <I2C_WaitOnFlagUntilTimeout>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d001      	beq.n	800210c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e0d5      	b.n	80022b8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2222      	movs	r2, #34	; 0x22
 8002110:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2240      	movs	r2, #64	; 0x40
 8002118:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2200      	movs	r2, #0
 8002120:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	6a3a      	ldr	r2, [r7, #32]
 8002126:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800212c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2200      	movs	r2, #0
 8002132:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002134:	88f8      	ldrh	r0, [r7, #6]
 8002136:	893a      	ldrh	r2, [r7, #8]
 8002138:	8979      	ldrh	r1, [r7, #10]
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	9301      	str	r3, [sp, #4]
 800213e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002140:	9300      	str	r3, [sp, #0]
 8002142:	4603      	mov	r3, r0
 8002144:	68f8      	ldr	r0, [r7, #12]
 8002146:	f000 f921 	bl	800238c <I2C_RequestMemoryRead>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d005      	beq.n	800215c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2200      	movs	r2, #0
 8002154:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e0ad      	b.n	80022b8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002160:	b29b      	uxth	r3, r3
 8002162:	2bff      	cmp	r3, #255	; 0xff
 8002164:	d90e      	bls.n	8002184 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	22ff      	movs	r2, #255	; 0xff
 800216a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002170:	b2da      	uxtb	r2, r3
 8002172:	8979      	ldrh	r1, [r7, #10]
 8002174:	4b52      	ldr	r3, [pc, #328]	; (80022c0 <HAL_I2C_Mem_Read+0x22c>)
 8002176:	9300      	str	r3, [sp, #0]
 8002178:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800217c:	68f8      	ldr	r0, [r7, #12]
 800217e:	f000 fa9f 	bl	80026c0 <I2C_TransferConfig>
 8002182:	e00f      	b.n	80021a4 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002188:	b29a      	uxth	r2, r3
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002192:	b2da      	uxtb	r2, r3
 8002194:	8979      	ldrh	r1, [r7, #10]
 8002196:	4b4a      	ldr	r3, [pc, #296]	; (80022c0 <HAL_I2C_Mem_Read+0x22c>)
 8002198:	9300      	str	r3, [sp, #0]
 800219a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800219e:	68f8      	ldr	r0, [r7, #12]
 80021a0:	f000 fa8e 	bl	80026c0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	9300      	str	r3, [sp, #0]
 80021a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021aa:	2200      	movs	r2, #0
 80021ac:	2104      	movs	r1, #4
 80021ae:	68f8      	ldr	r0, [r7, #12]
 80021b0:	f000 f964 	bl	800247c <I2C_WaitOnFlagUntilTimeout>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e07c      	b.n	80022b8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c8:	b2d2      	uxtb	r2, r2
 80021ca:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d0:	1c5a      	adds	r2, r3, #1
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021da:	3b01      	subs	r3, #1
 80021dc:	b29a      	uxth	r2, r3
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	3b01      	subs	r3, #1
 80021ea:	b29a      	uxth	r2, r3
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d034      	beq.n	8002264 <HAL_I2C_Mem_Read+0x1d0>
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d130      	bne.n	8002264 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	9300      	str	r3, [sp, #0]
 8002206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002208:	2200      	movs	r2, #0
 800220a:	2180      	movs	r1, #128	; 0x80
 800220c:	68f8      	ldr	r0, [r7, #12]
 800220e:	f000 f935 	bl	800247c <I2C_WaitOnFlagUntilTimeout>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d001      	beq.n	800221c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e04d      	b.n	80022b8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002220:	b29b      	uxth	r3, r3
 8002222:	2bff      	cmp	r3, #255	; 0xff
 8002224:	d90e      	bls.n	8002244 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	22ff      	movs	r2, #255	; 0xff
 800222a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002230:	b2da      	uxtb	r2, r3
 8002232:	8979      	ldrh	r1, [r7, #10]
 8002234:	2300      	movs	r3, #0
 8002236:	9300      	str	r3, [sp, #0]
 8002238:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800223c:	68f8      	ldr	r0, [r7, #12]
 800223e:	f000 fa3f 	bl	80026c0 <I2C_TransferConfig>
 8002242:	e00f      	b.n	8002264 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002248:	b29a      	uxth	r2, r3
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002252:	b2da      	uxtb	r2, r3
 8002254:	8979      	ldrh	r1, [r7, #10]
 8002256:	2300      	movs	r3, #0
 8002258:	9300      	str	r3, [sp, #0]
 800225a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800225e:	68f8      	ldr	r0, [r7, #12]
 8002260:	f000 fa2e 	bl	80026c0 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002268:	b29b      	uxth	r3, r3
 800226a:	2b00      	cmp	r3, #0
 800226c:	d19a      	bne.n	80021a4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800226e:	697a      	ldr	r2, [r7, #20]
 8002270:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002272:	68f8      	ldr	r0, [r7, #12]
 8002274:	f000 f982 	bl	800257c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d001      	beq.n	8002282 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e01a      	b.n	80022b8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2220      	movs	r2, #32
 8002288:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	6859      	ldr	r1, [r3, #4]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	4b0b      	ldr	r3, [pc, #44]	; (80022c4 <HAL_I2C_Mem_Read+0x230>)
 8002296:	400b      	ands	r3, r1
 8002298:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2220      	movs	r2, #32
 800229e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2200      	movs	r2, #0
 80022a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2200      	movs	r2, #0
 80022ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80022b2:	2300      	movs	r3, #0
 80022b4:	e000      	b.n	80022b8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80022b6:	2302      	movs	r3, #2
  }
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3718      	adds	r7, #24
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	80002400 	.word	0x80002400
 80022c4:	fe00e800 	.word	0xfe00e800

080022c8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022d6:	b2db      	uxtb	r3, r3
}
 80022d8:	4618      	mov	r0, r3
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b086      	sub	sp, #24
 80022e8:	af02      	add	r7, sp, #8
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	4608      	mov	r0, r1
 80022ee:	4611      	mov	r1, r2
 80022f0:	461a      	mov	r2, r3
 80022f2:	4603      	mov	r3, r0
 80022f4:	817b      	strh	r3, [r7, #10]
 80022f6:	460b      	mov	r3, r1
 80022f8:	813b      	strh	r3, [r7, #8]
 80022fa:	4613      	mov	r3, r2
 80022fc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80022fe:	88fb      	ldrh	r3, [r7, #6]
 8002300:	b2da      	uxtb	r2, r3
 8002302:	8979      	ldrh	r1, [r7, #10]
 8002304:	4b20      	ldr	r3, [pc, #128]	; (8002388 <I2C_RequestMemoryWrite+0xa4>)
 8002306:	9300      	str	r3, [sp, #0]
 8002308:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800230c:	68f8      	ldr	r0, [r7, #12]
 800230e:	f000 f9d7 	bl	80026c0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002312:	69fa      	ldr	r2, [r7, #28]
 8002314:	69b9      	ldr	r1, [r7, #24]
 8002316:	68f8      	ldr	r0, [r7, #12]
 8002318:	f000 f8f0 	bl	80024fc <I2C_WaitOnTXISFlagUntilTimeout>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d001      	beq.n	8002326 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e02c      	b.n	8002380 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002326:	88fb      	ldrh	r3, [r7, #6]
 8002328:	2b01      	cmp	r3, #1
 800232a:	d105      	bne.n	8002338 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800232c:	893b      	ldrh	r3, [r7, #8]
 800232e:	b2da      	uxtb	r2, r3
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	629a      	str	r2, [r3, #40]	; 0x28
 8002336:	e015      	b.n	8002364 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002338:	893b      	ldrh	r3, [r7, #8]
 800233a:	0a1b      	lsrs	r3, r3, #8
 800233c:	b29b      	uxth	r3, r3
 800233e:	b2da      	uxtb	r2, r3
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002346:	69fa      	ldr	r2, [r7, #28]
 8002348:	69b9      	ldr	r1, [r7, #24]
 800234a:	68f8      	ldr	r0, [r7, #12]
 800234c:	f000 f8d6 	bl	80024fc <I2C_WaitOnTXISFlagUntilTimeout>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d001      	beq.n	800235a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e012      	b.n	8002380 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800235a:	893b      	ldrh	r3, [r7, #8]
 800235c:	b2da      	uxtb	r2, r3
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	9300      	str	r3, [sp, #0]
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	2200      	movs	r2, #0
 800236c:	2180      	movs	r1, #128	; 0x80
 800236e:	68f8      	ldr	r0, [r7, #12]
 8002370:	f000 f884 	bl	800247c <I2C_WaitOnFlagUntilTimeout>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e000      	b.n	8002380 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800237e:	2300      	movs	r3, #0
}
 8002380:	4618      	mov	r0, r3
 8002382:	3710      	adds	r7, #16
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	80002000 	.word	0x80002000

0800238c <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b086      	sub	sp, #24
 8002390:	af02      	add	r7, sp, #8
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	4608      	mov	r0, r1
 8002396:	4611      	mov	r1, r2
 8002398:	461a      	mov	r2, r3
 800239a:	4603      	mov	r3, r0
 800239c:	817b      	strh	r3, [r7, #10]
 800239e:	460b      	mov	r3, r1
 80023a0:	813b      	strh	r3, [r7, #8]
 80023a2:	4613      	mov	r3, r2
 80023a4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80023a6:	88fb      	ldrh	r3, [r7, #6]
 80023a8:	b2da      	uxtb	r2, r3
 80023aa:	8979      	ldrh	r1, [r7, #10]
 80023ac:	4b20      	ldr	r3, [pc, #128]	; (8002430 <I2C_RequestMemoryRead+0xa4>)
 80023ae:	9300      	str	r3, [sp, #0]
 80023b0:	2300      	movs	r3, #0
 80023b2:	68f8      	ldr	r0, [r7, #12]
 80023b4:	f000 f984 	bl	80026c0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80023b8:	69fa      	ldr	r2, [r7, #28]
 80023ba:	69b9      	ldr	r1, [r7, #24]
 80023bc:	68f8      	ldr	r0, [r7, #12]
 80023be:	f000 f89d 	bl	80024fc <I2C_WaitOnTXISFlagUntilTimeout>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d001      	beq.n	80023cc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e02c      	b.n	8002426 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80023cc:	88fb      	ldrh	r3, [r7, #6]
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d105      	bne.n	80023de <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80023d2:	893b      	ldrh	r3, [r7, #8]
 80023d4:	b2da      	uxtb	r2, r3
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	629a      	str	r2, [r3, #40]	; 0x28
 80023dc:	e015      	b.n	800240a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80023de:	893b      	ldrh	r3, [r7, #8]
 80023e0:	0a1b      	lsrs	r3, r3, #8
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	b2da      	uxtb	r2, r3
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80023ec:	69fa      	ldr	r2, [r7, #28]
 80023ee:	69b9      	ldr	r1, [r7, #24]
 80023f0:	68f8      	ldr	r0, [r7, #12]
 80023f2:	f000 f883 	bl	80024fc <I2C_WaitOnTXISFlagUntilTimeout>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d001      	beq.n	8002400 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e012      	b.n	8002426 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002400:	893b      	ldrh	r3, [r7, #8]
 8002402:	b2da      	uxtb	r2, r3
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	9300      	str	r3, [sp, #0]
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	2200      	movs	r2, #0
 8002412:	2140      	movs	r1, #64	; 0x40
 8002414:	68f8      	ldr	r0, [r7, #12]
 8002416:	f000 f831 	bl	800247c <I2C_WaitOnFlagUntilTimeout>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d001      	beq.n	8002424 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e000      	b.n	8002426 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002424:	2300      	movs	r3, #0
}
 8002426:	4618      	mov	r0, r3
 8002428:	3710      	adds	r7, #16
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	80002000 	.word	0x80002000

08002434 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	699b      	ldr	r3, [r3, #24]
 8002442:	f003 0302 	and.w	r3, r3, #2
 8002446:	2b02      	cmp	r3, #2
 8002448:	d103      	bne.n	8002452 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2200      	movs	r2, #0
 8002450:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	699b      	ldr	r3, [r3, #24]
 8002458:	f003 0301 	and.w	r3, r3, #1
 800245c:	2b01      	cmp	r3, #1
 800245e:	d007      	beq.n	8002470 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	699a      	ldr	r2, [r3, #24]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f042 0201 	orr.w	r2, r2, #1
 800246e:	619a      	str	r2, [r3, #24]
  }
}
 8002470:	bf00      	nop
 8002472:	370c      	adds	r7, #12
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	60b9      	str	r1, [r7, #8]
 8002486:	603b      	str	r3, [r7, #0]
 8002488:	4613      	mov	r3, r2
 800248a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800248c:	e022      	b.n	80024d4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002494:	d01e      	beq.n	80024d4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002496:	f7fe fbbf 	bl	8000c18 <HAL_GetTick>
 800249a:	4602      	mov	r2, r0
 800249c:	69bb      	ldr	r3, [r7, #24]
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	683a      	ldr	r2, [r7, #0]
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d302      	bcc.n	80024ac <I2C_WaitOnFlagUntilTimeout+0x30>
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d113      	bne.n	80024d4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b0:	f043 0220 	orr.w	r2, r3, #32
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2220      	movs	r2, #32
 80024bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2200      	movs	r2, #0
 80024c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2200      	movs	r2, #0
 80024cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e00f      	b.n	80024f4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	699a      	ldr	r2, [r3, #24]
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	4013      	ands	r3, r2
 80024de:	68ba      	ldr	r2, [r7, #8]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	bf0c      	ite	eq
 80024e4:	2301      	moveq	r3, #1
 80024e6:	2300      	movne	r3, #0
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	461a      	mov	r2, r3
 80024ec:	79fb      	ldrb	r3, [r7, #7]
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d0cd      	beq.n	800248e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80024f2:	2300      	movs	r3, #0
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3710      	adds	r7, #16
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}

080024fc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
 8002502:	60f8      	str	r0, [r7, #12]
 8002504:	60b9      	str	r1, [r7, #8]
 8002506:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002508:	e02c      	b.n	8002564 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	68b9      	ldr	r1, [r7, #8]
 800250e:	68f8      	ldr	r0, [r7, #12]
 8002510:	f000 f870 	bl	80025f4 <I2C_IsAcknowledgeFailed>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d001      	beq.n	800251e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e02a      	b.n	8002574 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002524:	d01e      	beq.n	8002564 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002526:	f7fe fb77 	bl	8000c18 <HAL_GetTick>
 800252a:	4602      	mov	r2, r0
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	68ba      	ldr	r2, [r7, #8]
 8002532:	429a      	cmp	r2, r3
 8002534:	d302      	bcc.n	800253c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d113      	bne.n	8002564 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002540:	f043 0220 	orr.w	r2, r3, #32
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2220      	movs	r2, #32
 800254c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2200      	movs	r2, #0
 8002554:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2200      	movs	r2, #0
 800255c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e007      	b.n	8002574 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	699b      	ldr	r3, [r3, #24]
 800256a:	f003 0302 	and.w	r3, r3, #2
 800256e:	2b02      	cmp	r3, #2
 8002570:	d1cb      	bne.n	800250a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002572:	2300      	movs	r3, #0
}
 8002574:	4618      	mov	r0, r3
 8002576:	3710      	adds	r7, #16
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}

0800257c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	60b9      	str	r1, [r7, #8]
 8002586:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002588:	e028      	b.n	80025dc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	68b9      	ldr	r1, [r7, #8]
 800258e:	68f8      	ldr	r0, [r7, #12]
 8002590:	f000 f830 	bl	80025f4 <I2C_IsAcknowledgeFailed>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e026      	b.n	80025ec <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800259e:	f7fe fb3b 	bl	8000c18 <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	68ba      	ldr	r2, [r7, #8]
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d302      	bcc.n	80025b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d113      	bne.n	80025dc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b8:	f043 0220 	orr.w	r2, r3, #32
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2220      	movs	r2, #32
 80025c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2200      	movs	r2, #0
 80025cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2200      	movs	r2, #0
 80025d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e007      	b.n	80025ec <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	699b      	ldr	r3, [r3, #24]
 80025e2:	f003 0320 	and.w	r3, r3, #32
 80025e6:	2b20      	cmp	r3, #32
 80025e8:	d1cf      	bne.n	800258a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80025ea:	2300      	movs	r3, #0
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3710      	adds	r7, #16
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	60b9      	str	r1, [r7, #8]
 80025fe:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	699b      	ldr	r3, [r3, #24]
 8002606:	f003 0310 	and.w	r3, r3, #16
 800260a:	2b10      	cmp	r3, #16
 800260c:	d151      	bne.n	80026b2 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800260e:	e022      	b.n	8002656 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002616:	d01e      	beq.n	8002656 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002618:	f7fe fafe 	bl	8000c18 <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	68ba      	ldr	r2, [r7, #8]
 8002624:	429a      	cmp	r2, r3
 8002626:	d302      	bcc.n	800262e <I2C_IsAcknowledgeFailed+0x3a>
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d113      	bne.n	8002656 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002632:	f043 0220 	orr.w	r2, r3, #32
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2220      	movs	r2, #32
 800263e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2200      	movs	r2, #0
 8002646:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2200      	movs	r2, #0
 800264e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e02e      	b.n	80026b4 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	699b      	ldr	r3, [r3, #24]
 800265c:	f003 0320 	and.w	r3, r3, #32
 8002660:	2b20      	cmp	r3, #32
 8002662:	d1d5      	bne.n	8002610 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2210      	movs	r2, #16
 800266a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2220      	movs	r2, #32
 8002672:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002674:	68f8      	ldr	r0, [r7, #12]
 8002676:	f7ff fedd 	bl	8002434 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	6859      	ldr	r1, [r3, #4]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	4b0d      	ldr	r3, [pc, #52]	; (80026bc <I2C_IsAcknowledgeFailed+0xc8>)
 8002686:	400b      	ands	r3, r1
 8002688:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800268e:	f043 0204 	orr.w	r2, r3, #4
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2220      	movs	r2, #32
 800269a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2200      	movs	r2, #0
 80026a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e000      	b.n	80026b4 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80026b2:	2300      	movs	r3, #0
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3710      	adds	r7, #16
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	fe00e800 	.word	0xfe00e800

080026c0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b085      	sub	sp, #20
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	607b      	str	r3, [r7, #4]
 80026ca:	460b      	mov	r3, r1
 80026cc:	817b      	strh	r3, [r7, #10]
 80026ce:	4613      	mov	r3, r2
 80026d0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	685a      	ldr	r2, [r3, #4]
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	0d5b      	lsrs	r3, r3, #21
 80026dc:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80026e0:	4b0d      	ldr	r3, [pc, #52]	; (8002718 <I2C_TransferConfig+0x58>)
 80026e2:	430b      	orrs	r3, r1
 80026e4:	43db      	mvns	r3, r3
 80026e6:	ea02 0103 	and.w	r1, r2, r3
 80026ea:	897b      	ldrh	r3, [r7, #10]
 80026ec:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80026f0:	7a7b      	ldrb	r3, [r7, #9]
 80026f2:	041b      	lsls	r3, r3, #16
 80026f4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80026f8:	431a      	orrs	r2, r3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	431a      	orrs	r2, r3
 80026fe:	69bb      	ldr	r3, [r7, #24]
 8002700:	431a      	orrs	r2, r3
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	430a      	orrs	r2, r1
 8002708:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800270a:	bf00      	nop
 800270c:	3714      	adds	r7, #20
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	03ff63ff 	.word	0x03ff63ff

0800271c <HAL_LTDC_Init>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, tmp1 = 0;
 8002724:	2300      	movs	r3, #0
 8002726:	60fb      	str	r3, [r7, #12]
 8002728:	2300      	movs	r3, #0
 800272a:	60bb      	str	r3, [r7, #8]

  /* Check the LTDC peripheral state */
  if(hltdc == NULL)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d101      	bne.n	8002736 <HAL_LTDC_Init+0x1a>
  {
    return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e0c7      	b.n	80028c6 <HAL_LTDC_Init+0x1aa>
  assert_param(IS_LTDC_HSPOL(hltdc->Init.HSPolarity));
  assert_param(IS_LTDC_VSPOL(hltdc->Init.VSPolarity));
  assert_param(IS_LTDC_DEPOL(hltdc->Init.DEPolarity));
  assert_param(IS_LTDC_PCPOL(hltdc->Init.PCPolarity));

  if(hltdc->State == HAL_LTDC_STATE_RESET)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800273c:	b2db      	uxtb	r3, r3
 800273e:	2b00      	cmp	r3, #0
 8002740:	d106      	bne.n	8002750 <HAL_LTDC_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f000 f8c2 	bl	80028d4 <HAL_LTDC_MspInit>
  }
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2202      	movs	r2, #2
 8002754:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configures the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	699a      	ldr	r2, [r3, #24]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8002766:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	6999      	ldr	r1, [r3, #24]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685a      	ldr	r2, [r3, #4]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	431a      	orrs	r2, r3
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800277c:	431a      	orrs	r2, r3
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	691b      	ldr	r3, [r3, #16]
 8002782:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	430a      	orrs	r2, r1
 800278a:	619a      	str	r2, [r3, #24]

  /* Sets Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	6899      	ldr	r1, [r3, #8]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	4b4e      	ldr	r3, [pc, #312]	; (80028d0 <HAL_LTDC_Init+0x1b4>)
 8002798:	400b      	ands	r3, r1
 800279a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	695b      	ldr	r3, [r3, #20]
 80027a0:	041b      	lsls	r3, r3, #16
 80027a2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	6899      	ldr	r1, [r3, #8]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	699a      	ldr	r2, [r3, #24]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	431a      	orrs	r2, r3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	430a      	orrs	r2, r1
 80027b8:	609a      	str	r2, [r3, #8]

  /* Sets Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	68d9      	ldr	r1, [r3, #12]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	4b42      	ldr	r3, [pc, #264]	; (80028d0 <HAL_LTDC_Init+0x1b4>)
 80027c6:	400b      	ands	r3, r1
 80027c8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	69db      	ldr	r3, [r3, #28]
 80027ce:	041b      	lsls	r3, r3, #16
 80027d0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	68d9      	ldr	r1, [r3, #12]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6a1a      	ldr	r2, [r3, #32]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	431a      	orrs	r2, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	430a      	orrs	r2, r1
 80027e6:	60da      	str	r2, [r3, #12]

  /* Sets Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	6919      	ldr	r1, [r3, #16]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	4b37      	ldr	r3, [pc, #220]	; (80028d0 <HAL_LTDC_Init+0x1b4>)
 80027f4:	400b      	ands	r3, r1
 80027f6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fc:	041b      	lsls	r3, r3, #16
 80027fe:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	6919      	ldr	r1, [r3, #16]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	431a      	orrs	r2, r3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	430a      	orrs	r2, r1
 8002814:	611a      	str	r2, [r3, #16]

  /* Sets Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	6959      	ldr	r1, [r3, #20]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	4b2b      	ldr	r3, [pc, #172]	; (80028d0 <HAL_LTDC_Init+0x1b4>)
 8002822:	400b      	ands	r3, r1
 8002824:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800282a:	041b      	lsls	r3, r3, #16
 800282c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	6959      	ldr	r1, [r3, #20]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	431a      	orrs	r2, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	430a      	orrs	r2, r1
 8002842:	615a      	str	r2, [r3, #20]

  /* Sets the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800284a:	021b      	lsls	r3, r3, #8
 800284c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8002854:	041b      	lsls	r3, r3, #16
 8002856:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8002866:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800286e:	68ba      	ldr	r2, [r7, #8]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	4313      	orrs	r3, r2
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800287a:	431a      	orrs	r2, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	430a      	orrs	r2, r1
 8002882:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the transfer Error interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f042 0204 	orr.w	r2, r2, #4
 8002892:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the FIFO underrun interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_FU);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f042 0202 	orr.w	r2, r2, #2
 80028a2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	699a      	ldr	r2, [r3, #24]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f042 0201 	orr.w	r2, r2, #1
 80028b2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2200      	movs	r2, #0
 80028b8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2201      	movs	r2, #1
 80028c0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80028c4:	2300      	movs	r3, #0
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3710      	adds	r7, #16
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	f000f800 	.word	0xf000f800

080028d4 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);
  
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */ 
}
 80028dc:	bf00      	nop
 80028de:	370c      	adds	r7, #12
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr

080028e8 <HAL_LTDC_IRQHandler>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.  
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  /* Transfer Error Interrupt management ***************************************/
  if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_TE) != RESET)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028f6:	f003 0304 	and.w	r3, r3, #4
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d025      	beq.n	800294a <HAL_LTDC_IRQHandler+0x62>
  {
    if(__HAL_LTDC_GET_IT_SOURCE(hltdc, LTDC_IT_TE) != RESET)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002904:	f003 0304 	and.w	r3, r3, #4
 8002908:	2b00      	cmp	r3, #0
 800290a:	d01e      	beq.n	800294a <HAL_LTDC_IRQHandler+0x62>
    {
      /* Disable the transfer Error interrupt */
      __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f022 0204 	bic.w	r2, r2, #4
 800291a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Clear the transfer error flag */
      __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2204      	movs	r2, #4
 8002922:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Update error code */
      hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800292a:	f043 0201 	orr.w	r2, r3, #1
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

      /* Change LTDC state */
      hltdc->State = HAL_LTDC_STATE_ERROR;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2204      	movs	r2, #4
 8002938:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

      /* Process unlocked */
      __HAL_UNLOCK(hltdc);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2200      	movs	r2, #0
 8002940:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

      /* Transfer error Callback */
      HAL_LTDC_ErrorCallback(hltdc);
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	f000 f87b 	bl	8002a40 <HAL_LTDC_ErrorCallback>
    }
  }
  /* FIFO underrun Interrupt management ***************************************/
  if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_FU) != RESET)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002950:	f003 0302 	and.w	r3, r3, #2
 8002954:	2b00      	cmp	r3, #0
 8002956:	d025      	beq.n	80029a4 <HAL_LTDC_IRQHandler+0xbc>
  {
    if(__HAL_LTDC_GET_IT_SOURCE(hltdc, LTDC_IT_FU) != RESET)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800295e:	f003 0302 	and.w	r3, r3, #2
 8002962:	2b00      	cmp	r3, #0
 8002964:	d01e      	beq.n	80029a4 <HAL_LTDC_IRQHandler+0xbc>
    {
      /* Disable the FIFO underrun interrupt */
      __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f022 0202 	bic.w	r2, r2, #2
 8002974:	635a      	str	r2, [r3, #52]	; 0x34

      /* Clear the FIFO underrun flag */
      __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	2202      	movs	r2, #2
 800297c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Update error code */
      hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002984:	f043 0202 	orr.w	r2, r3, #2
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

      /* Change LTDC state */
      hltdc->State = HAL_LTDC_STATE_ERROR;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2204      	movs	r2, #4
 8002992:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

      /* Process unlocked */
      __HAL_UNLOCK(hltdc);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
      
      /* Transfer error Callback */
      HAL_LTDC_ErrorCallback(hltdc);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f000 f84e 	bl	8002a40 <HAL_LTDC_ErrorCallback>
    }
  }
  /* Line Interrupt management ************************************************/
  if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_LI) != RESET)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029aa:	f003 0301 	and.w	r3, r3, #1
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d01d      	beq.n	80029ee <HAL_LTDC_IRQHandler+0x106>
  {
    if(__HAL_LTDC_GET_IT_SOURCE(hltdc, LTDC_IT_LI) != RESET)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029b8:	f003 0301 	and.w	r3, r3, #1
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d016      	beq.n	80029ee <HAL_LTDC_IRQHandler+0x106>
    {
      /* Disable the Line interrupt */
      __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f022 0201 	bic.w	r2, r2, #1
 80029ce:	635a      	str	r2, [r3, #52]	; 0x34

      /* Clear the Line interrupt flag */  
      __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2201      	movs	r2, #1
 80029d6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change LTDC state */
      hltdc->State = HAL_LTDC_STATE_READY;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

      /* Process unlocked */
      __HAL_UNLOCK(hltdc);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

      /* Line interrupt Callback */
      HAL_LTDC_LineEventCallback(hltdc);
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f000 f833 	bl	8002a54 <HAL_LTDC_LineEventCallback>
    }
  }
  /* Register reload Interrupt management ***************************************/
  if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_RR) != RESET)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029f4:	f003 0308 	and.w	r3, r3, #8
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d01d      	beq.n	8002a38 <HAL_LTDC_IRQHandler+0x150>
  {
    if(__HAL_LTDC_GET_IT_SOURCE(hltdc, LTDC_IT_RR) != RESET)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a02:	f003 0308 	and.w	r3, r3, #8
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d016      	beq.n	8002a38 <HAL_LTDC_IRQHandler+0x150>
    {
      /* Disable the register reload interrupt */
      __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f022 0208 	bic.w	r2, r2, #8
 8002a18:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Clear the register reload flag */
      __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	2208      	movs	r2, #8
 8002a20:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Change LTDC state */
      hltdc->State = HAL_LTDC_STATE_READY;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2201      	movs	r2, #1
 8002a26:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
      
      /* Process unlocked */
      __HAL_UNLOCK(hltdc);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
      
      /* Register reload interrupt Callback */
      HAL_LTDC_ReloadEventCallback(hltdc);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f000 f818 	bl	8002a68 <HAL_LTDC_ReloadEventCallback>
    }
  }  
}
 8002a38:	bf00      	nop
 8002a3a:	3708      	adds	r7, #8
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);
  
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8002a48:	bf00      	nop
 8002a4a:	370c      	adds	r7, #12
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr

08002a54 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);
  
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8002a5c:	bf00      	nop
 8002a5e:	370c      	adds	r7, #12
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr

08002a68 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);
  
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8002a70:	bf00      	nop
 8002a72:	370c      	adds	r7, #12
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr

08002a7c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    0 or 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{   
 8002a7c:	b5b0      	push	{r4, r5, r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	60f8      	str	r0, [r7, #12]
 8002a84:	60b9      	str	r1, [r7, #8]
 8002a86:	607a      	str	r2, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d101      	bne.n	8002a96 <HAL_LTDC_ConfigLayer+0x1a>
 8002a92:	2302      	movs	r3, #2
 8002a94:	e02c      	b.n	8002af0 <HAL_LTDC_ConfigLayer+0x74>
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2201      	movs	r2, #1
 8002a9a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2202      	movs	r2, #2
 8002aa2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
  assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha0));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 8002aa6:	68fa      	ldr	r2, [r7, #12]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2134      	movs	r1, #52	; 0x34
 8002aac:	fb01 f303 	mul.w	r3, r1, r3
 8002ab0:	4413      	add	r3, r2
 8002ab2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	4614      	mov	r4, r2
 8002aba:	461d      	mov	r5, r3
 8002abc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002abe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ac0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ac2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ac4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ac6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ac8:	682b      	ldr	r3, [r5, #0]
 8002aca:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */  
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	68b9      	ldr	r1, [r7, #8]
 8002ad0:	68f8      	ldr	r0, [r7, #12]
 8002ad2:	f000 f81f 	bl	8002b14 <LTDC_SetConfig>

  /* Sets the Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2201      	movs	r2, #1
 8002adc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8002aee:	2300      	movs	r3, #0
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3710      	adds	r7, #16
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bdb0      	pop	{r4, r5, r7, pc}

08002af8 <HAL_LTDC_GetState>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8002b06:	b2db      	uxtb	r3, r3
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	370c      	adds	r7, #12
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr

08002b14 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                    This parameter can be one of the following values: 0 or 1
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b089      	sub	sp, #36	; 0x24
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	60b9      	str	r1, [r7, #8]
 8002b1e:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0;
 8002b20:	2300      	movs	r3, #0
 8002b22:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1 = 0;
 8002b24:	2300      	movs	r3, #0
 8002b26:	61bb      	str	r3, [r7, #24]
  uint32_t tmp2 = 0;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	617b      	str	r3, [r7, #20]

  /* Configures the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	685a      	ldr	r2, [r3, #4]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	0c1b      	lsrs	r3, r3, #16
 8002b38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b3c:	4413      	add	r3, r2
 8002b3e:	041b      	lsls	r3, r3, #16
 8002b40:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	461a      	mov	r2, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	01db      	lsls	r3, r3, #7
 8002b4c:	4413      	add	r3, r2
 8002b4e:	3384      	adds	r3, #132	; 0x84
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	68fa      	ldr	r2, [r7, #12]
 8002b54:	6812      	ldr	r2, [r2, #0]
 8002b56:	4611      	mov	r1, r2
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	01d2      	lsls	r2, r2, #7
 8002b5c:	440a      	add	r2, r1
 8002b5e:	3284      	adds	r2, #132	; 0x84
 8002b60:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002b64:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	0c1b      	lsrs	r3, r3, #16
 8002b72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b76:	4413      	add	r3, r2
 8002b78:	1c5a      	adds	r2, r3, #1
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4619      	mov	r1, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	01db      	lsls	r3, r3, #7
 8002b84:	440b      	add	r3, r1
 8002b86:	3384      	adds	r3, #132	; 0x84
 8002b88:	4619      	mov	r1, r3
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	604b      	str	r3, [r1, #4]

  /* Configures the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	68da      	ldr	r2, [r3, #12]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b9e:	4413      	add	r3, r2
 8002ba0:	041b      	lsls	r3, r3, #16
 8002ba2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	461a      	mov	r2, r3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	01db      	lsls	r3, r3, #7
 8002bae:	4413      	add	r3, r2
 8002bb0:	3384      	adds	r3, #132	; 0x84
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	68fa      	ldr	r2, [r7, #12]
 8002bb6:	6812      	ldr	r2, [r2, #0]
 8002bb8:	4611      	mov	r1, r2
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	01d2      	lsls	r2, r2, #7
 8002bbe:	440a      	add	r2, r1
 8002bc0:	3284      	adds	r2, #132	; 0x84
 8002bc2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002bc6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	689a      	ldr	r2, [r3, #8]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002bd6:	4413      	add	r3, r2
 8002bd8:	1c5a      	adds	r2, r3, #1
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4619      	mov	r1, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	01db      	lsls	r3, r3, #7
 8002be4:	440b      	add	r3, r1
 8002be6:	3384      	adds	r3, #132	; 0x84
 8002be8:	4619      	mov	r1, r3
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	01db      	lsls	r3, r3, #7
 8002bfa:	4413      	add	r3, r2
 8002bfc:	3384      	adds	r3, #132	; 0x84
 8002bfe:	691b      	ldr	r3, [r3, #16]
 8002c00:	68fa      	ldr	r2, [r7, #12]
 8002c02:	6812      	ldr	r2, [r2, #0]
 8002c04:	4611      	mov	r1, r2
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	01d2      	lsls	r2, r2, #7
 8002c0a:	440a      	add	r2, r1
 8002c0c:	3284      	adds	r2, #132	; 0x84
 8002c0e:	f023 0307 	bic.w	r3, r3, #7
 8002c12:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	461a      	mov	r2, r3
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	01db      	lsls	r3, r3, #7
 8002c1e:	4413      	add	r3, r2
 8002c20:	3384      	adds	r3, #132	; 0x84
 8002c22:	461a      	mov	r2, r3
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	691b      	ldr	r3, [r3, #16]
 8002c28:	6113      	str	r3, [r2, #16]

  /* Configures the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002c30:	021b      	lsls	r3, r3, #8
 8002c32:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002c3a:	041b      	lsls	r3, r3, #16
 8002c3c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24);  
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	699b      	ldr	r3, [r3, #24]
 8002c42:	061b      	lsls	r3, r3, #24
 8002c44:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	01db      	lsls	r3, r3, #7
 8002c50:	4413      	add	r3, r2
 8002c52:	3384      	adds	r3, #132	; 0x84
 8002c54:	699b      	ldr	r3, [r3, #24]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	01db      	lsls	r3, r3, #7
 8002c60:	4413      	add	r3, r2
 8002c62:	3384      	adds	r3, #132	; 0x84
 8002c64:	461a      	mov	r2, r3
 8002c66:	2300      	movs	r3, #0
 8002c68:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002c70:	461a      	mov	r2, r3
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	431a      	orrs	r2, r3
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	431a      	orrs	r2, r3
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4619      	mov	r1, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	01db      	lsls	r3, r3, #7
 8002c84:	440b      	add	r3, r1
 8002c86:	3384      	adds	r3, #132	; 0x84
 8002c88:	4619      	mov	r1, r3
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	461a      	mov	r2, r3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	01db      	lsls	r3, r3, #7
 8002c9a:	4413      	add	r3, r2
 8002c9c:	3384      	adds	r3, #132	; 0x84
 8002c9e:	695b      	ldr	r3, [r3, #20]
 8002ca0:	68fa      	ldr	r2, [r7, #12]
 8002ca2:	6812      	ldr	r2, [r2, #0]
 8002ca4:	4611      	mov	r1, r2
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	01d2      	lsls	r2, r2, #7
 8002caa:	440a      	add	r2, r1
 8002cac:	3284      	adds	r2, #132	; 0x84
 8002cae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002cb2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	461a      	mov	r2, r3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	01db      	lsls	r3, r3, #7
 8002cbe:	4413      	add	r3, r2
 8002cc0:	3384      	adds	r3, #132	; 0x84
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	695b      	ldr	r3, [r3, #20]
 8002cc8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	461a      	mov	r2, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	01db      	lsls	r3, r3, #7
 8002cd4:	4413      	add	r3, r2
 8002cd6:	3384      	adds	r3, #132	; 0x84
 8002cd8:	69da      	ldr	r2, [r3, #28]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4619      	mov	r1, r3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	01db      	lsls	r3, r3, #7
 8002ce4:	440b      	add	r3, r1
 8002ce6:	3384      	adds	r3, #132	; 0x84
 8002ce8:	4619      	mov	r1, r3
 8002cea:	4b58      	ldr	r3, [pc, #352]	; (8002e4c <LTDC_SetConfig+0x338>)
 8002cec:	4013      	ands	r3, r2
 8002cee:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	69da      	ldr	r2, [r3, #28]
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	6a1b      	ldr	r3, [r3, #32]
 8002cf8:	68f9      	ldr	r1, [r7, #12]
 8002cfa:	6809      	ldr	r1, [r1, #0]
 8002cfc:	4608      	mov	r0, r1
 8002cfe:	6879      	ldr	r1, [r7, #4]
 8002d00:	01c9      	lsls	r1, r1, #7
 8002d02:	4401      	add	r1, r0
 8002d04:	3184      	adds	r1, #132	; 0x84
 8002d06:	4313      	orrs	r3, r2
 8002d08:	61cb      	str	r3, [r1, #28]

  /* Configures the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	461a      	mov	r2, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	01db      	lsls	r3, r3, #7
 8002d14:	4413      	add	r3, r2
 8002d16:	3384      	adds	r3, #132	; 0x84
 8002d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	461a      	mov	r2, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	01db      	lsls	r3, r3, #7
 8002d24:	4413      	add	r3, r2
 8002d26:	3384      	adds	r3, #132	; 0x84
 8002d28:	461a      	mov	r2, r3
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	461a      	mov	r2, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	01db      	lsls	r3, r3, #7
 8002d38:	4413      	add	r3, r2
 8002d3a:	3384      	adds	r3, #132	; 0x84
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d42:	6293      	str	r3, [r2, #40]	; 0x28

  if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	691b      	ldr	r3, [r3, #16]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d102      	bne.n	8002d52 <LTDC_SetConfig+0x23e>
  {
    tmp = 4;
 8002d4c:	2304      	movs	r3, #4
 8002d4e:	61fb      	str	r3, [r7, #28]
 8002d50:	e01b      	b.n	8002d8a <LTDC_SetConfig+0x276>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d102      	bne.n	8002d60 <LTDC_SetConfig+0x24c>
  {
    tmp = 3;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	61fb      	str	r3, [r7, #28]
 8002d5e:	e014      	b.n	8002d8a <LTDC_SetConfig+0x276>
  }
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	691b      	ldr	r3, [r3, #16]
 8002d64:	2b04      	cmp	r3, #4
 8002d66:	d00b      	beq.n	8002d80 <LTDC_SetConfig+0x26c>
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	691b      	ldr	r3, [r3, #16]
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d007      	beq.n	8002d80 <LTDC_SetConfig+0x26c>
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	691b      	ldr	r3, [r3, #16]
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002d74:	2b03      	cmp	r3, #3
 8002d76:	d003      	beq.n	8002d80 <LTDC_SetConfig+0x26c>
        (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	691b      	ldr	r3, [r3, #16]
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002d7c:	2b07      	cmp	r3, #7
 8002d7e:	d102      	bne.n	8002d86 <LTDC_SetConfig+0x272>
  {
    tmp = 2;
 8002d80:	2302      	movs	r3, #2
 8002d82:	61fb      	str	r3, [r7, #28]
 8002d84:	e001      	b.n	8002d8a <LTDC_SetConfig+0x276>
  }
  else
  {
    tmp = 1;
 8002d86:	2301      	movs	r3, #1
 8002d88:	61fb      	str	r3, [r7, #28]
  }

  /* Configures the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	461a      	mov	r2, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	01db      	lsls	r3, r3, #7
 8002d94:	4413      	add	r3, r2
 8002d96:	3384      	adds	r3, #132	; 0x84
 8002d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d9a:	68fa      	ldr	r2, [r7, #12]
 8002d9c:	6812      	ldr	r2, [r2, #0]
 8002d9e:	4611      	mov	r1, r2
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	01d2      	lsls	r2, r2, #7
 8002da4:	440a      	add	r2, r1
 8002da6:	3284      	adds	r2, #132	; 0x84
 8002da8:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8002dac:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db2:	69fa      	ldr	r2, [r7, #28]
 8002db4:	fb02 f303 	mul.w	r3, r2, r3
 8002db8:	041a      	lsls	r2, r3, #16
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	6859      	ldr	r1, [r3, #4]
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	1acb      	subs	r3, r1, r3
 8002dc4:	69f9      	ldr	r1, [r7, #28]
 8002dc6:	fb01 f303 	mul.w	r3, r1, r3
 8002dca:	3303      	adds	r3, #3
 8002dcc:	68f9      	ldr	r1, [r7, #12]
 8002dce:	6809      	ldr	r1, [r1, #0]
 8002dd0:	4608      	mov	r0, r1
 8002dd2:	6879      	ldr	r1, [r7, #4]
 8002dd4:	01c9      	lsls	r1, r1, #7
 8002dd6:	4401      	add	r1, r0
 8002dd8:	3184      	adds	r1, #132	; 0x84
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configures the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	461a      	mov	r2, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	01db      	lsls	r3, r3, #7
 8002de8:	4413      	add	r3, r2
 8002dea:	3384      	adds	r3, #132	; 0x84
 8002dec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4619      	mov	r1, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	01db      	lsls	r3, r3, #7
 8002df8:	440b      	add	r3, r1
 8002dfa:	3384      	adds	r3, #132	; 0x84
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	4b14      	ldr	r3, [pc, #80]	; (8002e50 <LTDC_SetConfig+0x33c>)
 8002e00:	4013      	ands	r3, r2
 8002e02:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	461a      	mov	r2, r3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	01db      	lsls	r3, r3, #7
 8002e0e:	4413      	add	r3, r2
 8002e10:	3384      	adds	r3, #132	; 0x84
 8002e12:	461a      	mov	r2, r3
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e18:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */  
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	461a      	mov	r2, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	01db      	lsls	r3, r3, #7
 8002e24:	4413      	add	r3, r2
 8002e26:	3384      	adds	r3, #132	; 0x84
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	68fa      	ldr	r2, [r7, #12]
 8002e2c:	6812      	ldr	r2, [r2, #0]
 8002e2e:	4611      	mov	r1, r2
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	01d2      	lsls	r2, r2, #7
 8002e34:	440a      	add	r2, r1
 8002e36:	3284      	adds	r2, #132	; 0x84
 8002e38:	f043 0301 	orr.w	r3, r3, #1
 8002e3c:	6013      	str	r3, [r2, #0]
}
 8002e3e:	bf00      	nop
 8002e40:	3724      	adds	r7, #36	; 0x24
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop
 8002e4c:	fffff8f8 	.word	0xfffff8f8
 8002e50:	fffff800 	.word	0xfffff800

08002e54 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002e5e:	4b23      	ldr	r3, [pc, #140]	; (8002eec <HAL_PWREx_EnableOverDrive+0x98>)
 8002e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e62:	4a22      	ldr	r2, [pc, #136]	; (8002eec <HAL_PWREx_EnableOverDrive+0x98>)
 8002e64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e68:	6413      	str	r3, [r2, #64]	; 0x40
 8002e6a:	4b20      	ldr	r3, [pc, #128]	; (8002eec <HAL_PWREx_EnableOverDrive+0x98>)
 8002e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e72:	603b      	str	r3, [r7, #0]
 8002e74:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002e76:	4b1e      	ldr	r3, [pc, #120]	; (8002ef0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a1d      	ldr	r2, [pc, #116]	; (8002ef0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e80:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e82:	f7fd fec9 	bl	8000c18 <HAL_GetTick>
 8002e86:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002e88:	e009      	b.n	8002e9e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002e8a:	f7fd fec5 	bl	8000c18 <HAL_GetTick>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e98:	d901      	bls.n	8002e9e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e022      	b.n	8002ee4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002e9e:	4b14      	ldr	r3, [pc, #80]	; (8002ef0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ea6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eaa:	d1ee      	bne.n	8002e8a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002eac:	4b10      	ldr	r3, [pc, #64]	; (8002ef0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a0f      	ldr	r2, [pc, #60]	; (8002ef0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002eb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002eb6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002eb8:	f7fd feae 	bl	8000c18 <HAL_GetTick>
 8002ebc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002ebe:	e009      	b.n	8002ed4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002ec0:	f7fd feaa 	bl	8000c18 <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ece:	d901      	bls.n	8002ed4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	e007      	b.n	8002ee4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002ed4:	4b06      	ldr	r3, [pc, #24]	; (8002ef0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002edc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ee0:	d1ee      	bne.n	8002ec0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002ee2:	2300      	movs	r3, #0
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3708      	adds	r7, #8
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	40023800 	.word	0x40023800
 8002ef0:	40007000 	.word	0x40007000

08002ef4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b086      	sub	sp, #24
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002efc:	2300      	movs	r3, #0
 8002efe:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d101      	bne.n	8002f0a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e291      	b.n	800342e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0301 	and.w	r3, r3, #1
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	f000 8087 	beq.w	8003026 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f18:	4b96      	ldr	r3, [pc, #600]	; (8003174 <HAL_RCC_OscConfig+0x280>)
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	f003 030c 	and.w	r3, r3, #12
 8002f20:	2b04      	cmp	r3, #4
 8002f22:	d00c      	beq.n	8002f3e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f24:	4b93      	ldr	r3, [pc, #588]	; (8003174 <HAL_RCC_OscConfig+0x280>)
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	f003 030c 	and.w	r3, r3, #12
 8002f2c:	2b08      	cmp	r3, #8
 8002f2e:	d112      	bne.n	8002f56 <HAL_RCC_OscConfig+0x62>
 8002f30:	4b90      	ldr	r3, [pc, #576]	; (8003174 <HAL_RCC_OscConfig+0x280>)
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f3c:	d10b      	bne.n	8002f56 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f3e:	4b8d      	ldr	r3, [pc, #564]	; (8003174 <HAL_RCC_OscConfig+0x280>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d06c      	beq.n	8003024 <HAL_RCC_OscConfig+0x130>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d168      	bne.n	8003024 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e26b      	b.n	800342e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f5e:	d106      	bne.n	8002f6e <HAL_RCC_OscConfig+0x7a>
 8002f60:	4b84      	ldr	r3, [pc, #528]	; (8003174 <HAL_RCC_OscConfig+0x280>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a83      	ldr	r2, [pc, #524]	; (8003174 <HAL_RCC_OscConfig+0x280>)
 8002f66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f6a:	6013      	str	r3, [r2, #0]
 8002f6c:	e02e      	b.n	8002fcc <HAL_RCC_OscConfig+0xd8>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d10c      	bne.n	8002f90 <HAL_RCC_OscConfig+0x9c>
 8002f76:	4b7f      	ldr	r3, [pc, #508]	; (8003174 <HAL_RCC_OscConfig+0x280>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a7e      	ldr	r2, [pc, #504]	; (8003174 <HAL_RCC_OscConfig+0x280>)
 8002f7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f80:	6013      	str	r3, [r2, #0]
 8002f82:	4b7c      	ldr	r3, [pc, #496]	; (8003174 <HAL_RCC_OscConfig+0x280>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a7b      	ldr	r2, [pc, #492]	; (8003174 <HAL_RCC_OscConfig+0x280>)
 8002f88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f8c:	6013      	str	r3, [r2, #0]
 8002f8e:	e01d      	b.n	8002fcc <HAL_RCC_OscConfig+0xd8>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f98:	d10c      	bne.n	8002fb4 <HAL_RCC_OscConfig+0xc0>
 8002f9a:	4b76      	ldr	r3, [pc, #472]	; (8003174 <HAL_RCC_OscConfig+0x280>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a75      	ldr	r2, [pc, #468]	; (8003174 <HAL_RCC_OscConfig+0x280>)
 8002fa0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fa4:	6013      	str	r3, [r2, #0]
 8002fa6:	4b73      	ldr	r3, [pc, #460]	; (8003174 <HAL_RCC_OscConfig+0x280>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a72      	ldr	r2, [pc, #456]	; (8003174 <HAL_RCC_OscConfig+0x280>)
 8002fac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fb0:	6013      	str	r3, [r2, #0]
 8002fb2:	e00b      	b.n	8002fcc <HAL_RCC_OscConfig+0xd8>
 8002fb4:	4b6f      	ldr	r3, [pc, #444]	; (8003174 <HAL_RCC_OscConfig+0x280>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a6e      	ldr	r2, [pc, #440]	; (8003174 <HAL_RCC_OscConfig+0x280>)
 8002fba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fbe:	6013      	str	r3, [r2, #0]
 8002fc0:	4b6c      	ldr	r3, [pc, #432]	; (8003174 <HAL_RCC_OscConfig+0x280>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a6b      	ldr	r2, [pc, #428]	; (8003174 <HAL_RCC_OscConfig+0x280>)
 8002fc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d013      	beq.n	8002ffc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd4:	f7fd fe20 	bl	8000c18 <HAL_GetTick>
 8002fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fda:	e008      	b.n	8002fee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fdc:	f7fd fe1c 	bl	8000c18 <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	2b64      	cmp	r3, #100	; 0x64
 8002fe8:	d901      	bls.n	8002fee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e21f      	b.n	800342e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fee:	4b61      	ldr	r3, [pc, #388]	; (8003174 <HAL_RCC_OscConfig+0x280>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d0f0      	beq.n	8002fdc <HAL_RCC_OscConfig+0xe8>
 8002ffa:	e014      	b.n	8003026 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ffc:	f7fd fe0c 	bl	8000c18 <HAL_GetTick>
 8003000:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003002:	e008      	b.n	8003016 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003004:	f7fd fe08 	bl	8000c18 <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	2b64      	cmp	r3, #100	; 0x64
 8003010:	d901      	bls.n	8003016 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e20b      	b.n	800342e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003016:	4b57      	ldr	r3, [pc, #348]	; (8003174 <HAL_RCC_OscConfig+0x280>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d1f0      	bne.n	8003004 <HAL_RCC_OscConfig+0x110>
 8003022:	e000      	b.n	8003026 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003024:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0302 	and.w	r3, r3, #2
 800302e:	2b00      	cmp	r3, #0
 8003030:	d069      	beq.n	8003106 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003032:	4b50      	ldr	r3, [pc, #320]	; (8003174 <HAL_RCC_OscConfig+0x280>)
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	f003 030c 	and.w	r3, r3, #12
 800303a:	2b00      	cmp	r3, #0
 800303c:	d00b      	beq.n	8003056 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800303e:	4b4d      	ldr	r3, [pc, #308]	; (8003174 <HAL_RCC_OscConfig+0x280>)
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	f003 030c 	and.w	r3, r3, #12
 8003046:	2b08      	cmp	r3, #8
 8003048:	d11c      	bne.n	8003084 <HAL_RCC_OscConfig+0x190>
 800304a:	4b4a      	ldr	r3, [pc, #296]	; (8003174 <HAL_RCC_OscConfig+0x280>)
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d116      	bne.n	8003084 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003056:	4b47      	ldr	r3, [pc, #284]	; (8003174 <HAL_RCC_OscConfig+0x280>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0302 	and.w	r3, r3, #2
 800305e:	2b00      	cmp	r3, #0
 8003060:	d005      	beq.n	800306e <HAL_RCC_OscConfig+0x17a>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	2b01      	cmp	r3, #1
 8003068:	d001      	beq.n	800306e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e1df      	b.n	800342e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800306e:	4b41      	ldr	r3, [pc, #260]	; (8003174 <HAL_RCC_OscConfig+0x280>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	691b      	ldr	r3, [r3, #16]
 800307a:	00db      	lsls	r3, r3, #3
 800307c:	493d      	ldr	r1, [pc, #244]	; (8003174 <HAL_RCC_OscConfig+0x280>)
 800307e:	4313      	orrs	r3, r2
 8003080:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003082:	e040      	b.n	8003106 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d023      	beq.n	80030d4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800308c:	4b39      	ldr	r3, [pc, #228]	; (8003174 <HAL_RCC_OscConfig+0x280>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a38      	ldr	r2, [pc, #224]	; (8003174 <HAL_RCC_OscConfig+0x280>)
 8003092:	f043 0301 	orr.w	r3, r3, #1
 8003096:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003098:	f7fd fdbe 	bl	8000c18 <HAL_GetTick>
 800309c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800309e:	e008      	b.n	80030b2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030a0:	f7fd fdba 	bl	8000c18 <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	d901      	bls.n	80030b2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e1bd      	b.n	800342e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030b2:	4b30      	ldr	r3, [pc, #192]	; (8003174 <HAL_RCC_OscConfig+0x280>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0302 	and.w	r3, r3, #2
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d0f0      	beq.n	80030a0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030be:	4b2d      	ldr	r3, [pc, #180]	; (8003174 <HAL_RCC_OscConfig+0x280>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	691b      	ldr	r3, [r3, #16]
 80030ca:	00db      	lsls	r3, r3, #3
 80030cc:	4929      	ldr	r1, [pc, #164]	; (8003174 <HAL_RCC_OscConfig+0x280>)
 80030ce:	4313      	orrs	r3, r2
 80030d0:	600b      	str	r3, [r1, #0]
 80030d2:	e018      	b.n	8003106 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030d4:	4b27      	ldr	r3, [pc, #156]	; (8003174 <HAL_RCC_OscConfig+0x280>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a26      	ldr	r2, [pc, #152]	; (8003174 <HAL_RCC_OscConfig+0x280>)
 80030da:	f023 0301 	bic.w	r3, r3, #1
 80030de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e0:	f7fd fd9a 	bl	8000c18 <HAL_GetTick>
 80030e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030e6:	e008      	b.n	80030fa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030e8:	f7fd fd96 	bl	8000c18 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d901      	bls.n	80030fa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e199      	b.n	800342e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030fa:	4b1e      	ldr	r3, [pc, #120]	; (8003174 <HAL_RCC_OscConfig+0x280>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0302 	and.w	r3, r3, #2
 8003102:	2b00      	cmp	r3, #0
 8003104:	d1f0      	bne.n	80030e8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0308 	and.w	r3, r3, #8
 800310e:	2b00      	cmp	r3, #0
 8003110:	d038      	beq.n	8003184 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	695b      	ldr	r3, [r3, #20]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d019      	beq.n	800314e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800311a:	4b16      	ldr	r3, [pc, #88]	; (8003174 <HAL_RCC_OscConfig+0x280>)
 800311c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800311e:	4a15      	ldr	r2, [pc, #84]	; (8003174 <HAL_RCC_OscConfig+0x280>)
 8003120:	f043 0301 	orr.w	r3, r3, #1
 8003124:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003126:	f7fd fd77 	bl	8000c18 <HAL_GetTick>
 800312a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800312c:	e008      	b.n	8003140 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800312e:	f7fd fd73 	bl	8000c18 <HAL_GetTick>
 8003132:	4602      	mov	r2, r0
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	2b02      	cmp	r3, #2
 800313a:	d901      	bls.n	8003140 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800313c:	2303      	movs	r3, #3
 800313e:	e176      	b.n	800342e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003140:	4b0c      	ldr	r3, [pc, #48]	; (8003174 <HAL_RCC_OscConfig+0x280>)
 8003142:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003144:	f003 0302 	and.w	r3, r3, #2
 8003148:	2b00      	cmp	r3, #0
 800314a:	d0f0      	beq.n	800312e <HAL_RCC_OscConfig+0x23a>
 800314c:	e01a      	b.n	8003184 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800314e:	4b09      	ldr	r3, [pc, #36]	; (8003174 <HAL_RCC_OscConfig+0x280>)
 8003150:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003152:	4a08      	ldr	r2, [pc, #32]	; (8003174 <HAL_RCC_OscConfig+0x280>)
 8003154:	f023 0301 	bic.w	r3, r3, #1
 8003158:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800315a:	f7fd fd5d 	bl	8000c18 <HAL_GetTick>
 800315e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003160:	e00a      	b.n	8003178 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003162:	f7fd fd59 	bl	8000c18 <HAL_GetTick>
 8003166:	4602      	mov	r2, r0
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	2b02      	cmp	r3, #2
 800316e:	d903      	bls.n	8003178 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003170:	2303      	movs	r3, #3
 8003172:	e15c      	b.n	800342e <HAL_RCC_OscConfig+0x53a>
 8003174:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003178:	4b91      	ldr	r3, [pc, #580]	; (80033c0 <HAL_RCC_OscConfig+0x4cc>)
 800317a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800317c:	f003 0302 	and.w	r3, r3, #2
 8003180:	2b00      	cmp	r3, #0
 8003182:	d1ee      	bne.n	8003162 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0304 	and.w	r3, r3, #4
 800318c:	2b00      	cmp	r3, #0
 800318e:	f000 80a4 	beq.w	80032da <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003192:	4b8b      	ldr	r3, [pc, #556]	; (80033c0 <HAL_RCC_OscConfig+0x4cc>)
 8003194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d10d      	bne.n	80031ba <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800319e:	4b88      	ldr	r3, [pc, #544]	; (80033c0 <HAL_RCC_OscConfig+0x4cc>)
 80031a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a2:	4a87      	ldr	r2, [pc, #540]	; (80033c0 <HAL_RCC_OscConfig+0x4cc>)
 80031a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031a8:	6413      	str	r3, [r2, #64]	; 0x40
 80031aa:	4b85      	ldr	r3, [pc, #532]	; (80033c0 <HAL_RCC_OscConfig+0x4cc>)
 80031ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031b2:	60bb      	str	r3, [r7, #8]
 80031b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031b6:	2301      	movs	r3, #1
 80031b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031ba:	4b82      	ldr	r3, [pc, #520]	; (80033c4 <HAL_RCC_OscConfig+0x4d0>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d118      	bne.n	80031f8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80031c6:	4b7f      	ldr	r3, [pc, #508]	; (80033c4 <HAL_RCC_OscConfig+0x4d0>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a7e      	ldr	r2, [pc, #504]	; (80033c4 <HAL_RCC_OscConfig+0x4d0>)
 80031cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031d2:	f7fd fd21 	bl	8000c18 <HAL_GetTick>
 80031d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031d8:	e008      	b.n	80031ec <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031da:	f7fd fd1d 	bl	8000c18 <HAL_GetTick>
 80031de:	4602      	mov	r2, r0
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	2b64      	cmp	r3, #100	; 0x64
 80031e6:	d901      	bls.n	80031ec <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80031e8:	2303      	movs	r3, #3
 80031ea:	e120      	b.n	800342e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031ec:	4b75      	ldr	r3, [pc, #468]	; (80033c4 <HAL_RCC_OscConfig+0x4d0>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d0f0      	beq.n	80031da <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d106      	bne.n	800320e <HAL_RCC_OscConfig+0x31a>
 8003200:	4b6f      	ldr	r3, [pc, #444]	; (80033c0 <HAL_RCC_OscConfig+0x4cc>)
 8003202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003204:	4a6e      	ldr	r2, [pc, #440]	; (80033c0 <HAL_RCC_OscConfig+0x4cc>)
 8003206:	f043 0301 	orr.w	r3, r3, #1
 800320a:	6713      	str	r3, [r2, #112]	; 0x70
 800320c:	e02d      	b.n	800326a <HAL_RCC_OscConfig+0x376>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d10c      	bne.n	8003230 <HAL_RCC_OscConfig+0x33c>
 8003216:	4b6a      	ldr	r3, [pc, #424]	; (80033c0 <HAL_RCC_OscConfig+0x4cc>)
 8003218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800321a:	4a69      	ldr	r2, [pc, #420]	; (80033c0 <HAL_RCC_OscConfig+0x4cc>)
 800321c:	f023 0301 	bic.w	r3, r3, #1
 8003220:	6713      	str	r3, [r2, #112]	; 0x70
 8003222:	4b67      	ldr	r3, [pc, #412]	; (80033c0 <HAL_RCC_OscConfig+0x4cc>)
 8003224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003226:	4a66      	ldr	r2, [pc, #408]	; (80033c0 <HAL_RCC_OscConfig+0x4cc>)
 8003228:	f023 0304 	bic.w	r3, r3, #4
 800322c:	6713      	str	r3, [r2, #112]	; 0x70
 800322e:	e01c      	b.n	800326a <HAL_RCC_OscConfig+0x376>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	2b05      	cmp	r3, #5
 8003236:	d10c      	bne.n	8003252 <HAL_RCC_OscConfig+0x35e>
 8003238:	4b61      	ldr	r3, [pc, #388]	; (80033c0 <HAL_RCC_OscConfig+0x4cc>)
 800323a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800323c:	4a60      	ldr	r2, [pc, #384]	; (80033c0 <HAL_RCC_OscConfig+0x4cc>)
 800323e:	f043 0304 	orr.w	r3, r3, #4
 8003242:	6713      	str	r3, [r2, #112]	; 0x70
 8003244:	4b5e      	ldr	r3, [pc, #376]	; (80033c0 <HAL_RCC_OscConfig+0x4cc>)
 8003246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003248:	4a5d      	ldr	r2, [pc, #372]	; (80033c0 <HAL_RCC_OscConfig+0x4cc>)
 800324a:	f043 0301 	orr.w	r3, r3, #1
 800324e:	6713      	str	r3, [r2, #112]	; 0x70
 8003250:	e00b      	b.n	800326a <HAL_RCC_OscConfig+0x376>
 8003252:	4b5b      	ldr	r3, [pc, #364]	; (80033c0 <HAL_RCC_OscConfig+0x4cc>)
 8003254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003256:	4a5a      	ldr	r2, [pc, #360]	; (80033c0 <HAL_RCC_OscConfig+0x4cc>)
 8003258:	f023 0301 	bic.w	r3, r3, #1
 800325c:	6713      	str	r3, [r2, #112]	; 0x70
 800325e:	4b58      	ldr	r3, [pc, #352]	; (80033c0 <HAL_RCC_OscConfig+0x4cc>)
 8003260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003262:	4a57      	ldr	r2, [pc, #348]	; (80033c0 <HAL_RCC_OscConfig+0x4cc>)
 8003264:	f023 0304 	bic.w	r3, r3, #4
 8003268:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d015      	beq.n	800329e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003272:	f7fd fcd1 	bl	8000c18 <HAL_GetTick>
 8003276:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003278:	e00a      	b.n	8003290 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800327a:	f7fd fccd 	bl	8000c18 <HAL_GetTick>
 800327e:	4602      	mov	r2, r0
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	f241 3288 	movw	r2, #5000	; 0x1388
 8003288:	4293      	cmp	r3, r2
 800328a:	d901      	bls.n	8003290 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	e0ce      	b.n	800342e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003290:	4b4b      	ldr	r3, [pc, #300]	; (80033c0 <HAL_RCC_OscConfig+0x4cc>)
 8003292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003294:	f003 0302 	and.w	r3, r3, #2
 8003298:	2b00      	cmp	r3, #0
 800329a:	d0ee      	beq.n	800327a <HAL_RCC_OscConfig+0x386>
 800329c:	e014      	b.n	80032c8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800329e:	f7fd fcbb 	bl	8000c18 <HAL_GetTick>
 80032a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032a4:	e00a      	b.n	80032bc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032a6:	f7fd fcb7 	bl	8000c18 <HAL_GetTick>
 80032aa:	4602      	mov	r2, r0
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d901      	bls.n	80032bc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	e0b8      	b.n	800342e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032bc:	4b40      	ldr	r3, [pc, #256]	; (80033c0 <HAL_RCC_OscConfig+0x4cc>)
 80032be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c0:	f003 0302 	and.w	r3, r3, #2
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d1ee      	bne.n	80032a6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80032c8:	7dfb      	ldrb	r3, [r7, #23]
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d105      	bne.n	80032da <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032ce:	4b3c      	ldr	r3, [pc, #240]	; (80033c0 <HAL_RCC_OscConfig+0x4cc>)
 80032d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d2:	4a3b      	ldr	r2, [pc, #236]	; (80033c0 <HAL_RCC_OscConfig+0x4cc>)
 80032d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032d8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	699b      	ldr	r3, [r3, #24]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	f000 80a4 	beq.w	800342c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032e4:	4b36      	ldr	r3, [pc, #216]	; (80033c0 <HAL_RCC_OscConfig+0x4cc>)
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	f003 030c 	and.w	r3, r3, #12
 80032ec:	2b08      	cmp	r3, #8
 80032ee:	d06b      	beq.n	80033c8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	699b      	ldr	r3, [r3, #24]
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d149      	bne.n	800338c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032f8:	4b31      	ldr	r3, [pc, #196]	; (80033c0 <HAL_RCC_OscConfig+0x4cc>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a30      	ldr	r2, [pc, #192]	; (80033c0 <HAL_RCC_OscConfig+0x4cc>)
 80032fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003302:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003304:	f7fd fc88 	bl	8000c18 <HAL_GetTick>
 8003308:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800330a:	e008      	b.n	800331e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800330c:	f7fd fc84 	bl	8000c18 <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	2b02      	cmp	r3, #2
 8003318:	d901      	bls.n	800331e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e087      	b.n	800342e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800331e:	4b28      	ldr	r3, [pc, #160]	; (80033c0 <HAL_RCC_OscConfig+0x4cc>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d1f0      	bne.n	800330c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	69da      	ldr	r2, [r3, #28]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a1b      	ldr	r3, [r3, #32]
 8003332:	431a      	orrs	r2, r3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003338:	019b      	lsls	r3, r3, #6
 800333a:	431a      	orrs	r2, r3
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003340:	085b      	lsrs	r3, r3, #1
 8003342:	3b01      	subs	r3, #1
 8003344:	041b      	lsls	r3, r3, #16
 8003346:	431a      	orrs	r2, r3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800334c:	061b      	lsls	r3, r3, #24
 800334e:	4313      	orrs	r3, r2
 8003350:	4a1b      	ldr	r2, [pc, #108]	; (80033c0 <HAL_RCC_OscConfig+0x4cc>)
 8003352:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003356:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003358:	4b19      	ldr	r3, [pc, #100]	; (80033c0 <HAL_RCC_OscConfig+0x4cc>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a18      	ldr	r2, [pc, #96]	; (80033c0 <HAL_RCC_OscConfig+0x4cc>)
 800335e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003362:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003364:	f7fd fc58 	bl	8000c18 <HAL_GetTick>
 8003368:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800336a:	e008      	b.n	800337e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800336c:	f7fd fc54 	bl	8000c18 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	2b02      	cmp	r3, #2
 8003378:	d901      	bls.n	800337e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e057      	b.n	800342e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800337e:	4b10      	ldr	r3, [pc, #64]	; (80033c0 <HAL_RCC_OscConfig+0x4cc>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d0f0      	beq.n	800336c <HAL_RCC_OscConfig+0x478>
 800338a:	e04f      	b.n	800342c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800338c:	4b0c      	ldr	r3, [pc, #48]	; (80033c0 <HAL_RCC_OscConfig+0x4cc>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a0b      	ldr	r2, [pc, #44]	; (80033c0 <HAL_RCC_OscConfig+0x4cc>)
 8003392:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003396:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003398:	f7fd fc3e 	bl	8000c18 <HAL_GetTick>
 800339c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800339e:	e008      	b.n	80033b2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033a0:	f7fd fc3a 	bl	8000c18 <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d901      	bls.n	80033b2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e03d      	b.n	800342e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033b2:	4b03      	ldr	r3, [pc, #12]	; (80033c0 <HAL_RCC_OscConfig+0x4cc>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d1f0      	bne.n	80033a0 <HAL_RCC_OscConfig+0x4ac>
 80033be:	e035      	b.n	800342c <HAL_RCC_OscConfig+0x538>
 80033c0:	40023800 	.word	0x40023800
 80033c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80033c8:	4b1b      	ldr	r3, [pc, #108]	; (8003438 <HAL_RCC_OscConfig+0x544>)
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	699b      	ldr	r3, [r3, #24]
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d028      	beq.n	8003428 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d121      	bne.n	8003428 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d11a      	bne.n	8003428 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033f2:	68fa      	ldr	r2, [r7, #12]
 80033f4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80033f8:	4013      	ands	r3, r2
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80033fe:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003400:	4293      	cmp	r3, r2
 8003402:	d111      	bne.n	8003428 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800340e:	085b      	lsrs	r3, r3, #1
 8003410:	3b01      	subs	r3, #1
 8003412:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003414:	429a      	cmp	r2, r3
 8003416:	d107      	bne.n	8003428 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003422:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003424:	429a      	cmp	r2, r3
 8003426:	d001      	beq.n	800342c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e000      	b.n	800342e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800342c:	2300      	movs	r3, #0
}
 800342e:	4618      	mov	r0, r3
 8003430:	3718      	adds	r7, #24
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	40023800 	.word	0x40023800

0800343c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003446:	2300      	movs	r3, #0
 8003448:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d101      	bne.n	8003454 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e0d0      	b.n	80035f6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003454:	4b6a      	ldr	r3, [pc, #424]	; (8003600 <HAL_RCC_ClockConfig+0x1c4>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 030f 	and.w	r3, r3, #15
 800345c:	683a      	ldr	r2, [r7, #0]
 800345e:	429a      	cmp	r2, r3
 8003460:	d910      	bls.n	8003484 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003462:	4b67      	ldr	r3, [pc, #412]	; (8003600 <HAL_RCC_ClockConfig+0x1c4>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f023 020f 	bic.w	r2, r3, #15
 800346a:	4965      	ldr	r1, [pc, #404]	; (8003600 <HAL_RCC_ClockConfig+0x1c4>)
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	4313      	orrs	r3, r2
 8003470:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003472:	4b63      	ldr	r3, [pc, #396]	; (8003600 <HAL_RCC_ClockConfig+0x1c4>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 030f 	and.w	r3, r3, #15
 800347a:	683a      	ldr	r2, [r7, #0]
 800347c:	429a      	cmp	r2, r3
 800347e:	d001      	beq.n	8003484 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e0b8      	b.n	80035f6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0302 	and.w	r3, r3, #2
 800348c:	2b00      	cmp	r3, #0
 800348e:	d020      	beq.n	80034d2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0304 	and.w	r3, r3, #4
 8003498:	2b00      	cmp	r3, #0
 800349a:	d005      	beq.n	80034a8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800349c:	4b59      	ldr	r3, [pc, #356]	; (8003604 <HAL_RCC_ClockConfig+0x1c8>)
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	4a58      	ldr	r2, [pc, #352]	; (8003604 <HAL_RCC_ClockConfig+0x1c8>)
 80034a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80034a6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0308 	and.w	r3, r3, #8
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d005      	beq.n	80034c0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034b4:	4b53      	ldr	r3, [pc, #332]	; (8003604 <HAL_RCC_ClockConfig+0x1c8>)
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	4a52      	ldr	r2, [pc, #328]	; (8003604 <HAL_RCC_ClockConfig+0x1c8>)
 80034ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80034be:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034c0:	4b50      	ldr	r3, [pc, #320]	; (8003604 <HAL_RCC_ClockConfig+0x1c8>)
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	494d      	ldr	r1, [pc, #308]	; (8003604 <HAL_RCC_ClockConfig+0x1c8>)
 80034ce:	4313      	orrs	r3, r2
 80034d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0301 	and.w	r3, r3, #1
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d040      	beq.n	8003560 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d107      	bne.n	80034f6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034e6:	4b47      	ldr	r3, [pc, #284]	; (8003604 <HAL_RCC_ClockConfig+0x1c8>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d115      	bne.n	800351e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e07f      	b.n	80035f6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	d107      	bne.n	800350e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034fe:	4b41      	ldr	r3, [pc, #260]	; (8003604 <HAL_RCC_ClockConfig+0x1c8>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d109      	bne.n	800351e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e073      	b.n	80035f6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800350e:	4b3d      	ldr	r3, [pc, #244]	; (8003604 <HAL_RCC_ClockConfig+0x1c8>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0302 	and.w	r3, r3, #2
 8003516:	2b00      	cmp	r3, #0
 8003518:	d101      	bne.n	800351e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e06b      	b.n	80035f6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800351e:	4b39      	ldr	r3, [pc, #228]	; (8003604 <HAL_RCC_ClockConfig+0x1c8>)
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	f023 0203 	bic.w	r2, r3, #3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	4936      	ldr	r1, [pc, #216]	; (8003604 <HAL_RCC_ClockConfig+0x1c8>)
 800352c:	4313      	orrs	r3, r2
 800352e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003530:	f7fd fb72 	bl	8000c18 <HAL_GetTick>
 8003534:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003536:	e00a      	b.n	800354e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003538:	f7fd fb6e 	bl	8000c18 <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	f241 3288 	movw	r2, #5000	; 0x1388
 8003546:	4293      	cmp	r3, r2
 8003548:	d901      	bls.n	800354e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e053      	b.n	80035f6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800354e:	4b2d      	ldr	r3, [pc, #180]	; (8003604 <HAL_RCC_ClockConfig+0x1c8>)
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	f003 020c 	and.w	r2, r3, #12
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	429a      	cmp	r2, r3
 800355e:	d1eb      	bne.n	8003538 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003560:	4b27      	ldr	r3, [pc, #156]	; (8003600 <HAL_RCC_ClockConfig+0x1c4>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 030f 	and.w	r3, r3, #15
 8003568:	683a      	ldr	r2, [r7, #0]
 800356a:	429a      	cmp	r2, r3
 800356c:	d210      	bcs.n	8003590 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800356e:	4b24      	ldr	r3, [pc, #144]	; (8003600 <HAL_RCC_ClockConfig+0x1c4>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f023 020f 	bic.w	r2, r3, #15
 8003576:	4922      	ldr	r1, [pc, #136]	; (8003600 <HAL_RCC_ClockConfig+0x1c4>)
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	4313      	orrs	r3, r2
 800357c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800357e:	4b20      	ldr	r3, [pc, #128]	; (8003600 <HAL_RCC_ClockConfig+0x1c4>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 030f 	and.w	r3, r3, #15
 8003586:	683a      	ldr	r2, [r7, #0]
 8003588:	429a      	cmp	r2, r3
 800358a:	d001      	beq.n	8003590 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e032      	b.n	80035f6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0304 	and.w	r3, r3, #4
 8003598:	2b00      	cmp	r3, #0
 800359a:	d008      	beq.n	80035ae <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800359c:	4b19      	ldr	r3, [pc, #100]	; (8003604 <HAL_RCC_ClockConfig+0x1c8>)
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	4916      	ldr	r1, [pc, #88]	; (8003604 <HAL_RCC_ClockConfig+0x1c8>)
 80035aa:	4313      	orrs	r3, r2
 80035ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0308 	and.w	r3, r3, #8
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d009      	beq.n	80035ce <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80035ba:	4b12      	ldr	r3, [pc, #72]	; (8003604 <HAL_RCC_ClockConfig+0x1c8>)
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	00db      	lsls	r3, r3, #3
 80035c8:	490e      	ldr	r1, [pc, #56]	; (8003604 <HAL_RCC_ClockConfig+0x1c8>)
 80035ca:	4313      	orrs	r3, r2
 80035cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80035ce:	f000 f821 	bl	8003614 <HAL_RCC_GetSysClockFreq>
 80035d2:	4602      	mov	r2, r0
 80035d4:	4b0b      	ldr	r3, [pc, #44]	; (8003604 <HAL_RCC_ClockConfig+0x1c8>)
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	091b      	lsrs	r3, r3, #4
 80035da:	f003 030f 	and.w	r3, r3, #15
 80035de:	490a      	ldr	r1, [pc, #40]	; (8003608 <HAL_RCC_ClockConfig+0x1cc>)
 80035e0:	5ccb      	ldrb	r3, [r1, r3]
 80035e2:	fa22 f303 	lsr.w	r3, r2, r3
 80035e6:	4a09      	ldr	r2, [pc, #36]	; (800360c <HAL_RCC_ClockConfig+0x1d0>)
 80035e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80035ea:	4b09      	ldr	r3, [pc, #36]	; (8003610 <HAL_RCC_ClockConfig+0x1d4>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4618      	mov	r0, r3
 80035f0:	f7fd face 	bl	8000b90 <HAL_InitTick>

  return HAL_OK;
 80035f4:	2300      	movs	r3, #0
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3710      	adds	r7, #16
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	40023c00 	.word	0x40023c00
 8003604:	40023800 	.word	0x40023800
 8003608:	0800669c 	.word	0x0800669c
 800360c:	20000000 	.word	0x20000000
 8003610:	20000004 	.word	0x20000004

08003614 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003614:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003618:	b084      	sub	sp, #16
 800361a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800361c:	2300      	movs	r3, #0
 800361e:	607b      	str	r3, [r7, #4]
 8003620:	2300      	movs	r3, #0
 8003622:	60fb      	str	r3, [r7, #12]
 8003624:	2300      	movs	r3, #0
 8003626:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003628:	2300      	movs	r3, #0
 800362a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800362c:	4b67      	ldr	r3, [pc, #412]	; (80037cc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	f003 030c 	and.w	r3, r3, #12
 8003634:	2b08      	cmp	r3, #8
 8003636:	d00d      	beq.n	8003654 <HAL_RCC_GetSysClockFreq+0x40>
 8003638:	2b08      	cmp	r3, #8
 800363a:	f200 80bd 	bhi.w	80037b8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800363e:	2b00      	cmp	r3, #0
 8003640:	d002      	beq.n	8003648 <HAL_RCC_GetSysClockFreq+0x34>
 8003642:	2b04      	cmp	r3, #4
 8003644:	d003      	beq.n	800364e <HAL_RCC_GetSysClockFreq+0x3a>
 8003646:	e0b7      	b.n	80037b8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003648:	4b61      	ldr	r3, [pc, #388]	; (80037d0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800364a:	60bb      	str	r3, [r7, #8]
      break;
 800364c:	e0b7      	b.n	80037be <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800364e:	4b61      	ldr	r3, [pc, #388]	; (80037d4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003650:	60bb      	str	r3, [r7, #8]
      break;
 8003652:	e0b4      	b.n	80037be <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003654:	4b5d      	ldr	r3, [pc, #372]	; (80037cc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800365c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800365e:	4b5b      	ldr	r3, [pc, #364]	; (80037cc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d04d      	beq.n	8003706 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800366a:	4b58      	ldr	r3, [pc, #352]	; (80037cc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	099b      	lsrs	r3, r3, #6
 8003670:	461a      	mov	r2, r3
 8003672:	f04f 0300 	mov.w	r3, #0
 8003676:	f240 10ff 	movw	r0, #511	; 0x1ff
 800367a:	f04f 0100 	mov.w	r1, #0
 800367e:	ea02 0800 	and.w	r8, r2, r0
 8003682:	ea03 0901 	and.w	r9, r3, r1
 8003686:	4640      	mov	r0, r8
 8003688:	4649      	mov	r1, r9
 800368a:	f04f 0200 	mov.w	r2, #0
 800368e:	f04f 0300 	mov.w	r3, #0
 8003692:	014b      	lsls	r3, r1, #5
 8003694:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003698:	0142      	lsls	r2, r0, #5
 800369a:	4610      	mov	r0, r2
 800369c:	4619      	mov	r1, r3
 800369e:	ebb0 0008 	subs.w	r0, r0, r8
 80036a2:	eb61 0109 	sbc.w	r1, r1, r9
 80036a6:	f04f 0200 	mov.w	r2, #0
 80036aa:	f04f 0300 	mov.w	r3, #0
 80036ae:	018b      	lsls	r3, r1, #6
 80036b0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80036b4:	0182      	lsls	r2, r0, #6
 80036b6:	1a12      	subs	r2, r2, r0
 80036b8:	eb63 0301 	sbc.w	r3, r3, r1
 80036bc:	f04f 0000 	mov.w	r0, #0
 80036c0:	f04f 0100 	mov.w	r1, #0
 80036c4:	00d9      	lsls	r1, r3, #3
 80036c6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80036ca:	00d0      	lsls	r0, r2, #3
 80036cc:	4602      	mov	r2, r0
 80036ce:	460b      	mov	r3, r1
 80036d0:	eb12 0208 	adds.w	r2, r2, r8
 80036d4:	eb43 0309 	adc.w	r3, r3, r9
 80036d8:	f04f 0000 	mov.w	r0, #0
 80036dc:	f04f 0100 	mov.w	r1, #0
 80036e0:	0259      	lsls	r1, r3, #9
 80036e2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80036e6:	0250      	lsls	r0, r2, #9
 80036e8:	4602      	mov	r2, r0
 80036ea:	460b      	mov	r3, r1
 80036ec:	4610      	mov	r0, r2
 80036ee:	4619      	mov	r1, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	461a      	mov	r2, r3
 80036f4:	f04f 0300 	mov.w	r3, #0
 80036f8:	f7fc fdda 	bl	80002b0 <__aeabi_uldivmod>
 80036fc:	4602      	mov	r2, r0
 80036fe:	460b      	mov	r3, r1
 8003700:	4613      	mov	r3, r2
 8003702:	60fb      	str	r3, [r7, #12]
 8003704:	e04a      	b.n	800379c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003706:	4b31      	ldr	r3, [pc, #196]	; (80037cc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	099b      	lsrs	r3, r3, #6
 800370c:	461a      	mov	r2, r3
 800370e:	f04f 0300 	mov.w	r3, #0
 8003712:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003716:	f04f 0100 	mov.w	r1, #0
 800371a:	ea02 0400 	and.w	r4, r2, r0
 800371e:	ea03 0501 	and.w	r5, r3, r1
 8003722:	4620      	mov	r0, r4
 8003724:	4629      	mov	r1, r5
 8003726:	f04f 0200 	mov.w	r2, #0
 800372a:	f04f 0300 	mov.w	r3, #0
 800372e:	014b      	lsls	r3, r1, #5
 8003730:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003734:	0142      	lsls	r2, r0, #5
 8003736:	4610      	mov	r0, r2
 8003738:	4619      	mov	r1, r3
 800373a:	1b00      	subs	r0, r0, r4
 800373c:	eb61 0105 	sbc.w	r1, r1, r5
 8003740:	f04f 0200 	mov.w	r2, #0
 8003744:	f04f 0300 	mov.w	r3, #0
 8003748:	018b      	lsls	r3, r1, #6
 800374a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800374e:	0182      	lsls	r2, r0, #6
 8003750:	1a12      	subs	r2, r2, r0
 8003752:	eb63 0301 	sbc.w	r3, r3, r1
 8003756:	f04f 0000 	mov.w	r0, #0
 800375a:	f04f 0100 	mov.w	r1, #0
 800375e:	00d9      	lsls	r1, r3, #3
 8003760:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003764:	00d0      	lsls	r0, r2, #3
 8003766:	4602      	mov	r2, r0
 8003768:	460b      	mov	r3, r1
 800376a:	1912      	adds	r2, r2, r4
 800376c:	eb45 0303 	adc.w	r3, r5, r3
 8003770:	f04f 0000 	mov.w	r0, #0
 8003774:	f04f 0100 	mov.w	r1, #0
 8003778:	0299      	lsls	r1, r3, #10
 800377a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800377e:	0290      	lsls	r0, r2, #10
 8003780:	4602      	mov	r2, r0
 8003782:	460b      	mov	r3, r1
 8003784:	4610      	mov	r0, r2
 8003786:	4619      	mov	r1, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	461a      	mov	r2, r3
 800378c:	f04f 0300 	mov.w	r3, #0
 8003790:	f7fc fd8e 	bl	80002b0 <__aeabi_uldivmod>
 8003794:	4602      	mov	r2, r0
 8003796:	460b      	mov	r3, r1
 8003798:	4613      	mov	r3, r2
 800379a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800379c:	4b0b      	ldr	r3, [pc, #44]	; (80037cc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	0c1b      	lsrs	r3, r3, #16
 80037a2:	f003 0303 	and.w	r3, r3, #3
 80037a6:	3301      	adds	r3, #1
 80037a8:	005b      	lsls	r3, r3, #1
 80037aa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80037ac:	68fa      	ldr	r2, [r7, #12]
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037b4:	60bb      	str	r3, [r7, #8]
      break;
 80037b6:	e002      	b.n	80037be <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037b8:	4b05      	ldr	r3, [pc, #20]	; (80037d0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80037ba:	60bb      	str	r3, [r7, #8]
      break;
 80037bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037be:	68bb      	ldr	r3, [r7, #8]
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3710      	adds	r7, #16
 80037c4:	46bd      	mov	sp, r7
 80037c6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80037ca:	bf00      	nop
 80037cc:	40023800 	.word	0x40023800
 80037d0:	00f42400 	.word	0x00f42400
 80037d4:	007a1200 	.word	0x007a1200

080037d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b088      	sub	sp, #32
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80037e0:	2300      	movs	r3, #0
 80037e2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80037e4:	2300      	movs	r3, #0
 80037e6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80037e8:	2300      	movs	r3, #0
 80037ea:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80037ec:	2300      	movs	r3, #0
 80037ee:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80037f0:	2300      	movs	r3, #0
 80037f2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0301 	and.w	r3, r3, #1
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d012      	beq.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003800:	4b69      	ldr	r3, [pc, #420]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	4a68      	ldr	r2, [pc, #416]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003806:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800380a:	6093      	str	r3, [r2, #8]
 800380c:	4b66      	ldr	r3, [pc, #408]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800380e:	689a      	ldr	r2, [r3, #8]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003814:	4964      	ldr	r1, [pc, #400]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003816:	4313      	orrs	r3, r2
 8003818:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800381e:	2b00      	cmp	r3, #0
 8003820:	d101      	bne.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003822:	2301      	movs	r3, #1
 8003824:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d017      	beq.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003832:	4b5d      	ldr	r3, [pc, #372]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003834:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003838:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003840:	4959      	ldr	r1, [pc, #356]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003842:	4313      	orrs	r3, r2
 8003844:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800384c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003850:	d101      	bne.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003852:	2301      	movs	r3, #1
 8003854:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800385a:	2b00      	cmp	r3, #0
 800385c:	d101      	bne.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800385e:	2301      	movs	r3, #1
 8003860:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d017      	beq.n	800389e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800386e:	4b4e      	ldr	r3, [pc, #312]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003870:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003874:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387c:	494a      	ldr	r1, [pc, #296]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800387e:	4313      	orrs	r3, r2
 8003880:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003888:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800388c:	d101      	bne.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800388e:	2301      	movs	r3, #1
 8003890:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003896:	2b00      	cmp	r3, #0
 8003898:	d101      	bne.n	800389e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800389a:	2301      	movs	r3, #1
 800389c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d001      	beq.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80038aa:	2301      	movs	r3, #1
 80038ac:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0320 	and.w	r3, r3, #32
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	f000 808b 	beq.w	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80038bc:	4b3a      	ldr	r3, [pc, #232]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c0:	4a39      	ldr	r2, [pc, #228]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038c6:	6413      	str	r3, [r2, #64]	; 0x40
 80038c8:	4b37      	ldr	r3, [pc, #220]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038d0:	60bb      	str	r3, [r7, #8]
 80038d2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80038d4:	4b35      	ldr	r3, [pc, #212]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a34      	ldr	r2, [pc, #208]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80038da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038e0:	f7fd f99a 	bl	8000c18 <HAL_GetTick>
 80038e4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80038e6:	e008      	b.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038e8:	f7fd f996 	bl	8000c18 <HAL_GetTick>
 80038ec:	4602      	mov	r2, r0
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	2b64      	cmp	r3, #100	; 0x64
 80038f4:	d901      	bls.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80038f6:	2303      	movs	r3, #3
 80038f8:	e357      	b.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80038fa:	4b2c      	ldr	r3, [pc, #176]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003902:	2b00      	cmp	r3, #0
 8003904:	d0f0      	beq.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003906:	4b28      	ldr	r3, [pc, #160]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800390a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800390e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d035      	beq.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800391e:	693a      	ldr	r2, [r7, #16]
 8003920:	429a      	cmp	r2, r3
 8003922:	d02e      	beq.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003924:	4b20      	ldr	r3, [pc, #128]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003928:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800392c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800392e:	4b1e      	ldr	r3, [pc, #120]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003932:	4a1d      	ldr	r2, [pc, #116]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003934:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003938:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800393a:	4b1b      	ldr	r3, [pc, #108]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800393c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800393e:	4a1a      	ldr	r2, [pc, #104]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003940:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003944:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003946:	4a18      	ldr	r2, [pc, #96]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800394c:	4b16      	ldr	r3, [pc, #88]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800394e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003950:	f003 0301 	and.w	r3, r3, #1
 8003954:	2b01      	cmp	r3, #1
 8003956:	d114      	bne.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003958:	f7fd f95e 	bl	8000c18 <HAL_GetTick>
 800395c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800395e:	e00a      	b.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003960:	f7fd f95a 	bl	8000c18 <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	f241 3288 	movw	r2, #5000	; 0x1388
 800396e:	4293      	cmp	r3, r2
 8003970:	d901      	bls.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	e319      	b.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003976:	4b0c      	ldr	r3, [pc, #48]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800397a:	f003 0302 	and.w	r3, r3, #2
 800397e:	2b00      	cmp	r3, #0
 8003980:	d0ee      	beq.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003986:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800398a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800398e:	d111      	bne.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003990:	4b05      	ldr	r3, [pc, #20]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800399c:	4b04      	ldr	r3, [pc, #16]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800399e:	400b      	ands	r3, r1
 80039a0:	4901      	ldr	r1, [pc, #4]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039a2:	4313      	orrs	r3, r2
 80039a4:	608b      	str	r3, [r1, #8]
 80039a6:	e00b      	b.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80039a8:	40023800 	.word	0x40023800
 80039ac:	40007000 	.word	0x40007000
 80039b0:	0ffffcff 	.word	0x0ffffcff
 80039b4:	4bb1      	ldr	r3, [pc, #708]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	4ab0      	ldr	r2, [pc, #704]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80039ba:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80039be:	6093      	str	r3, [r2, #8]
 80039c0:	4bae      	ldr	r3, [pc, #696]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80039c2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039cc:	49ab      	ldr	r1, [pc, #684]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80039ce:	4313      	orrs	r3, r2
 80039d0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 0310 	and.w	r3, r3, #16
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d010      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80039de:	4ba7      	ldr	r3, [pc, #668]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80039e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039e4:	4aa5      	ldr	r2, [pc, #660]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80039e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039ea:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80039ee:	4ba3      	ldr	r3, [pc, #652]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80039f0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f8:	49a0      	ldr	r1, [pc, #640]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80039fa:	4313      	orrs	r3, r2
 80039fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d00a      	beq.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a0c:	4b9b      	ldr	r3, [pc, #620]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a12:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a1a:	4998      	ldr	r1, [pc, #608]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d00a      	beq.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a2e:	4b93      	ldr	r3, [pc, #588]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a34:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a3c:	498f      	ldr	r1, [pc, #572]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d00a      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a50:	4b8a      	ldr	r3, [pc, #552]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a56:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a5e:	4987      	ldr	r1, [pc, #540]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003a60:	4313      	orrs	r3, r2
 8003a62:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d00a      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003a72:	4b82      	ldr	r3, [pc, #520]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003a74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a78:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a80:	497e      	ldr	r1, [pc, #504]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003a82:	4313      	orrs	r3, r2
 8003a84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d00a      	beq.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a94:	4b79      	ldr	r3, [pc, #484]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a9a:	f023 0203 	bic.w	r2, r3, #3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa2:	4976      	ldr	r1, [pc, #472]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d00a      	beq.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ab6:	4b71      	ldr	r3, [pc, #452]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003abc:	f023 020c 	bic.w	r2, r3, #12
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ac4:	496d      	ldr	r1, [pc, #436]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d00a      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003ad8:	4b68      	ldr	r3, [pc, #416]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ade:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ae6:	4965      	ldr	r1, [pc, #404]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d00a      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003afa:	4b60      	ldr	r3, [pc, #384]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003afc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b00:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b08:	495c      	ldr	r1, [pc, #368]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d00a      	beq.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003b1c:	4b57      	ldr	r3, [pc, #348]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003b1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b22:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b2a:	4954      	ldr	r1, [pc, #336]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d00a      	beq.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003b3e:	4b4f      	ldr	r3, [pc, #316]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b44:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b4c:	494b      	ldr	r1, [pc, #300]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d00a      	beq.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003b60:	4b46      	ldr	r3, [pc, #280]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b66:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b6e:	4943      	ldr	r1, [pc, #268]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003b70:	4313      	orrs	r3, r2
 8003b72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d00a      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003b82:	4b3e      	ldr	r3, [pc, #248]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003b84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b88:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b90:	493a      	ldr	r1, [pc, #232]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003b92:	4313      	orrs	r3, r2
 8003b94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d00a      	beq.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003ba4:	4b35      	ldr	r3, [pc, #212]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003baa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003bb2:	4932      	ldr	r1, [pc, #200]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d011      	beq.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003bc6:	4b2d      	ldr	r3, [pc, #180]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003bc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bcc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bd4:	4929      	ldr	r1, [pc, #164]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003be0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003be4:	d101      	bne.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003be6:	2301      	movs	r3, #1
 8003be8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0308 	and.w	r3, r3, #8
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d001      	beq.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d00a      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c06:	4b1d      	ldr	r3, [pc, #116]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003c08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c0c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c14:	4919      	ldr	r1, [pc, #100]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003c16:	4313      	orrs	r3, r2
 8003c18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d00b      	beq.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003c28:	4b14      	ldr	r3, [pc, #80]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c2e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c38:	4910      	ldr	r1, [pc, #64]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d006      	beq.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	f000 80d9 	beq.w	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003c54:	4b09      	ldr	r3, [pc, #36]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a08      	ldr	r2, [pc, #32]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003c5a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003c5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c60:	f7fc ffda 	bl	8000c18 <HAL_GetTick>
 8003c64:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003c66:	e00b      	b.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003c68:	f7fc ffd6 	bl	8000c18 <HAL_GetTick>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	2b64      	cmp	r3, #100	; 0x64
 8003c74:	d904      	bls.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	e197      	b.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003c7a:	bf00      	nop
 8003c7c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003c80:	4b6c      	ldr	r3, [pc, #432]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d1ed      	bne.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0301 	and.w	r3, r3, #1
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d021      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d11d      	bne.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003ca0:	4b64      	ldr	r3, [pc, #400]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ca2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ca6:	0c1b      	lsrs	r3, r3, #16
 8003ca8:	f003 0303 	and.w	r3, r3, #3
 8003cac:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003cae:	4b61      	ldr	r3, [pc, #388]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003cb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cb4:	0e1b      	lsrs	r3, r3, #24
 8003cb6:	f003 030f 	and.w	r3, r3, #15
 8003cba:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	019a      	lsls	r2, r3, #6
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	041b      	lsls	r3, r3, #16
 8003cc6:	431a      	orrs	r2, r3
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	061b      	lsls	r3, r3, #24
 8003ccc:	431a      	orrs	r2, r3
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	071b      	lsls	r3, r3, #28
 8003cd4:	4957      	ldr	r1, [pc, #348]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d004      	beq.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003cf0:	d00a      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d02e      	beq.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d06:	d129      	bne.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003d08:	4b4a      	ldr	r3, [pc, #296]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d0e:	0c1b      	lsrs	r3, r3, #16
 8003d10:	f003 0303 	and.w	r3, r3, #3
 8003d14:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003d16:	4b47      	ldr	r3, [pc, #284]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d1c:	0f1b      	lsrs	r3, r3, #28
 8003d1e:	f003 0307 	and.w	r3, r3, #7
 8003d22:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	019a      	lsls	r2, r3, #6
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	041b      	lsls	r3, r3, #16
 8003d2e:	431a      	orrs	r2, r3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	061b      	lsls	r3, r3, #24
 8003d36:	431a      	orrs	r2, r3
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	071b      	lsls	r3, r3, #28
 8003d3c:	493d      	ldr	r1, [pc, #244]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003d44:	4b3b      	ldr	r3, [pc, #236]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d4a:	f023 021f 	bic.w	r2, r3, #31
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d52:	3b01      	subs	r3, #1
 8003d54:	4937      	ldr	r1, [pc, #220]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d01d      	beq.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003d68:	4b32      	ldr	r3, [pc, #200]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d6e:	0e1b      	lsrs	r3, r3, #24
 8003d70:	f003 030f 	and.w	r3, r3, #15
 8003d74:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003d76:	4b2f      	ldr	r3, [pc, #188]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d7c:	0f1b      	lsrs	r3, r3, #28
 8003d7e:	f003 0307 	and.w	r3, r3, #7
 8003d82:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	019a      	lsls	r2, r3, #6
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	691b      	ldr	r3, [r3, #16]
 8003d8e:	041b      	lsls	r3, r3, #16
 8003d90:	431a      	orrs	r2, r3
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	061b      	lsls	r3, r3, #24
 8003d96:	431a      	orrs	r2, r3
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	071b      	lsls	r3, r3, #28
 8003d9c:	4925      	ldr	r1, [pc, #148]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d011      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	019a      	lsls	r2, r3, #6
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	041b      	lsls	r3, r3, #16
 8003dbc:	431a      	orrs	r2, r3
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	061b      	lsls	r3, r3, #24
 8003dc4:	431a      	orrs	r2, r3
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	071b      	lsls	r3, r3, #28
 8003dcc:	4919      	ldr	r1, [pc, #100]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003dd4:	4b17      	ldr	r3, [pc, #92]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a16      	ldr	r2, [pc, #88]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003dda:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003dde:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003de0:	f7fc ff1a 	bl	8000c18 <HAL_GetTick>
 8003de4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003de6:	e008      	b.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003de8:	f7fc ff16 	bl	8000c18 <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	2b64      	cmp	r3, #100	; 0x64
 8003df4:	d901      	bls.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e0d7      	b.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003dfa:	4b0e      	ldr	r3, [pc, #56]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d0f0      	beq.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003e06:	69bb      	ldr	r3, [r7, #24]
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	f040 80cd 	bne.w	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003e0e:	4b09      	ldr	r3, [pc, #36]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a08      	ldr	r2, [pc, #32]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e1a:	f7fc fefd 	bl	8000c18 <HAL_GetTick>
 8003e1e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003e20:	e00a      	b.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003e22:	f7fc fef9 	bl	8000c18 <HAL_GetTick>
 8003e26:	4602      	mov	r2, r0
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	2b64      	cmp	r3, #100	; 0x64
 8003e2e:	d903      	bls.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e30:	2303      	movs	r3, #3
 8003e32:	e0ba      	b.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003e34:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003e38:	4b5e      	ldr	r3, [pc, #376]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e44:	d0ed      	beq.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d003      	beq.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d009      	beq.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d02e      	beq.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d12a      	bne.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003e6e:	4b51      	ldr	r3, [pc, #324]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003e70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e74:	0c1b      	lsrs	r3, r3, #16
 8003e76:	f003 0303 	and.w	r3, r3, #3
 8003e7a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003e7c:	4b4d      	ldr	r3, [pc, #308]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e82:	0f1b      	lsrs	r3, r3, #28
 8003e84:	f003 0307 	and.w	r3, r3, #7
 8003e88:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	695b      	ldr	r3, [r3, #20]
 8003e8e:	019a      	lsls	r2, r3, #6
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	041b      	lsls	r3, r3, #16
 8003e94:	431a      	orrs	r2, r3
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	699b      	ldr	r3, [r3, #24]
 8003e9a:	061b      	lsls	r3, r3, #24
 8003e9c:	431a      	orrs	r2, r3
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	071b      	lsls	r3, r3, #28
 8003ea2:	4944      	ldr	r1, [pc, #272]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003eaa:	4b42      	ldr	r3, [pc, #264]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003eac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003eb0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb8:	3b01      	subs	r3, #1
 8003eba:	021b      	lsls	r3, r3, #8
 8003ebc:	493d      	ldr	r1, [pc, #244]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d022      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ed4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ed8:	d11d      	bne.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003eda:	4b36      	ldr	r3, [pc, #216]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ee0:	0e1b      	lsrs	r3, r3, #24
 8003ee2:	f003 030f 	and.w	r3, r3, #15
 8003ee6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003ee8:	4b32      	ldr	r3, [pc, #200]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eee:	0f1b      	lsrs	r3, r3, #28
 8003ef0:	f003 0307 	and.w	r3, r3, #7
 8003ef4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	695b      	ldr	r3, [r3, #20]
 8003efa:	019a      	lsls	r2, r3, #6
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6a1b      	ldr	r3, [r3, #32]
 8003f00:	041b      	lsls	r3, r3, #16
 8003f02:	431a      	orrs	r2, r3
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	061b      	lsls	r3, r3, #24
 8003f08:	431a      	orrs	r2, r3
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	071b      	lsls	r3, r3, #28
 8003f0e:	4929      	ldr	r1, [pc, #164]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f10:	4313      	orrs	r3, r2
 8003f12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0308 	and.w	r3, r3, #8
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d028      	beq.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003f22:	4b24      	ldr	r3, [pc, #144]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f28:	0e1b      	lsrs	r3, r3, #24
 8003f2a:	f003 030f 	and.w	r3, r3, #15
 8003f2e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003f30:	4b20      	ldr	r3, [pc, #128]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f36:	0c1b      	lsrs	r3, r3, #16
 8003f38:	f003 0303 	and.w	r3, r3, #3
 8003f3c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	695b      	ldr	r3, [r3, #20]
 8003f42:	019a      	lsls	r2, r3, #6
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	041b      	lsls	r3, r3, #16
 8003f48:	431a      	orrs	r2, r3
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	061b      	lsls	r3, r3, #24
 8003f4e:	431a      	orrs	r2, r3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	69db      	ldr	r3, [r3, #28]
 8003f54:	071b      	lsls	r3, r3, #28
 8003f56:	4917      	ldr	r1, [pc, #92]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003f5e:	4b15      	ldr	r3, [pc, #84]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f64:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f6c:	4911      	ldr	r1, [pc, #68]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003f74:	4b0f      	ldr	r3, [pc, #60]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a0e      	ldr	r2, [pc, #56]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f80:	f7fc fe4a 	bl	8000c18 <HAL_GetTick>
 8003f84:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003f86:	e008      	b.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003f88:	f7fc fe46 	bl	8000c18 <HAL_GetTick>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	2b64      	cmp	r3, #100	; 0x64
 8003f94:	d901      	bls.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e007      	b.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003f9a:	4b06      	ldr	r3, [pc, #24]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003fa2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003fa6:	d1ef      	bne.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003fa8:	2300      	movs	r3, #0
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3720      	adds	r7, #32
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	40023800 	.word	0x40023800

08003fb8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b082      	sub	sp, #8
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d101      	bne.n	8003fcc <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e025      	b.n	8004018 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d106      	bne.n	8003fe6 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f000 f81d 	bl	8004020 <HAL_SDRAM_MspInit>
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2202      	movs	r2, #2
 8003fea:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	3304      	adds	r3, #4
 8003ff6:	4619      	mov	r1, r3
 8003ff8:	4610      	mov	r0, r2
 8003ffa:	f000 f867 	bl	80040cc <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6818      	ldr	r0, [r3, #0]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	461a      	mov	r2, r3
 8004008:	6839      	ldr	r1, [r7, #0]
 800400a:	f000 f8d1 	bl	80041b0 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2201      	movs	r2, #1
 8004012:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8004016:	2300      	movs	r3, #0
}
 8004018:	4618      	mov	r0, r3
 800401a:	3708      	adds	r7, #8
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}

08004020 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);
 
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
 8004028:	bf00      	nop
 800402a:	370c      	adds	r7, #12
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr

08004034 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af00      	add	r7, sp, #0
 800403a:	60f8      	str	r0, [r7, #12]
 800403c:	60b9      	str	r1, [r7, #8]
 800403e:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004046:	b2db      	uxtb	r3, r3
 8004048:	2b02      	cmp	r3, #2
 800404a:	d101      	bne.n	8004050 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 800404c:	2302      	movs	r3, #2
 800404e:	e018      	b.n	8004082 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2202      	movs	r2, #2
 8004054:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	687a      	ldr	r2, [r7, #4]
 800405e:	68b9      	ldr	r1, [r7, #8]
 8004060:	4618      	mov	r0, r3
 8004062:	f000 f925 	bl	80042b0 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	2b02      	cmp	r3, #2
 800406c:	d104      	bne.n	8004078 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2205      	movs	r2, #5
 8004072:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8004076:	e003      	b.n	8004080 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8004080:	2300      	movs	r3, #0
}
 8004082:	4618      	mov	r0, r3
 8004084:	3710      	adds	r7, #16
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}

0800408a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800408a:	b580      	push	{r7, lr}
 800408c:	b082      	sub	sp, #8
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
 8004092:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800409a:	b2db      	uxtb	r3, r3
 800409c:	2b02      	cmp	r3, #2
 800409e:	d101      	bne.n	80040a4 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80040a0:	2302      	movs	r3, #2
 80040a2:	e00e      	b.n	80040c2 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2202      	movs	r2, #2
 80040a8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	6839      	ldr	r1, [r7, #0]
 80040b2:	4618      	mov	r0, r3
 80040b4:	f000 f91d 	bl	80042f2 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 80040c0:	2300      	movs	r3, #0
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3708      	adds	r7, #8
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
	...

080040cc <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b085      	sub	sp, #20
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 80040d6:	2300      	movs	r3, #0
 80040d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 80040da:	2300      	movs	r3, #0
 80040dc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d027      	beq.n	8004136 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80040ec:	68fa      	ldr	r2, [r7, #12]
 80040ee:	4b2f      	ldr	r3, [pc, #188]	; (80041ac <FMC_SDRAM_Init+0xe0>)
 80040f0:	4013      	ands	r3, r2
 80040f2:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80040fc:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 8004102:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8004108:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800410e:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 8004114:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800411a:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 8004120:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8004126:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	4313      	orrs	r3, r2
 800412c:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	68fa      	ldr	r2, [r7, #12]
 8004132:	601a      	str	r2, [r3, #0]
 8004134:	e032      	b.n	800419c <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004142:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800414c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8004152:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8004154:	68fa      	ldr	r2, [r7, #12]
 8004156:	4313      	orrs	r3, r2
 8004158:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8004160:	68ba      	ldr	r2, [r7, #8]
 8004162:	4b12      	ldr	r3, [pc, #72]	; (80041ac <FMC_SDRAM_Init+0xe0>)
 8004164:	4013      	ands	r3, r2
 8004166:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004170:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 8004176:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800417c:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 8004182:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 8004188:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800418a:	68ba      	ldr	r2, [r7, #8]
 800418c:	4313      	orrs	r3, r2
 800418e:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	68fa      	ldr	r2, [r7, #12]
 8004194:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	68ba      	ldr	r2, [r7, #8]
 800419a:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800419c:	2300      	movs	r3, #0
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3714      	adds	r7, #20
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr
 80041aa:	bf00      	nop
 80041ac:	ffff8000 	.word	0xffff8000

080041b0 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b087      	sub	sp, #28
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	60f8      	str	r0, [r7, #12]
 80041b8:	60b9      	str	r1, [r7, #8]
 80041ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 80041bc:	2300      	movs	r3, #0
 80041be:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 80041c0:	2300      	movs	r3, #0
 80041c2:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d02e      	beq.n	8004228 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80041d6:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	3b01      	subs	r3, #1
 80041e4:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80041e6:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	3b01      	subs	r3, #1
 80041ee:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 80041f0:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	3b01      	subs	r3, #1
 80041f8:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 80041fa:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	691b      	ldr	r3, [r3, #16]
 8004200:	3b01      	subs	r3, #1
 8004202:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8004204:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	695b      	ldr	r3, [r3, #20]
 800420a:	3b01      	subs	r3, #1
 800420c:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800420e:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	699b      	ldr	r3, [r3, #24]
 8004214:	3b01      	subs	r3, #1
 8004216:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8004218:	4313      	orrs	r3, r2
 800421a:	697a      	ldr	r2, [r7, #20]
 800421c:	4313      	orrs	r3, r2
 800421e:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	697a      	ldr	r2, [r7, #20]
 8004224:	609a      	str	r2, [r3, #8]
 8004226:	e039      	b.n	800429c <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800422e:	697a      	ldr	r2, [r7, #20]
 8004230:	4b1e      	ldr	r3, [pc, #120]	; (80042ac <FMC_SDRAM_Timing_Init+0xfc>)
 8004232:	4013      	ands	r3, r2
 8004234:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	68db      	ldr	r3, [r3, #12]
 800423a:	3b01      	subs	r3, #1
 800423c:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	695b      	ldr	r3, [r3, #20]
 8004242:	3b01      	subs	r3, #1
 8004244:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8004246:	4313      	orrs	r3, r2
 8004248:	697a      	ldr	r2, [r7, #20]
 800424a:	4313      	orrs	r3, r2
 800424c:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800425a:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	3b01      	subs	r3, #1
 8004268:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800426a:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	3b01      	subs	r3, #1
 8004272:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8004274:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	691b      	ldr	r3, [r3, #16]
 800427a:	3b01      	subs	r3, #1
 800427c:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800427e:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	699b      	ldr	r3, [r3, #24]
 8004284:	3b01      	subs	r3, #1
 8004286:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8004288:	4313      	orrs	r3, r2
 800428a:	693a      	ldr	r2, [r7, #16]
 800428c:	4313      	orrs	r3, r2
 800428e:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	697a      	ldr	r2, [r7, #20]
 8004294:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	693a      	ldr	r2, [r7, #16]
 800429a:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800429c:	2300      	movs	r3, #0
}
 800429e:	4618      	mov	r0, r3
 80042a0:	371c      	adds	r7, #28
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr
 80042aa:	bf00      	nop
 80042ac:	ff0f0fff 	.word	0xff0f0fff

080042b0 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b087      	sub	sp, #28
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	60f8      	str	r0, [r7, #12]
 80042b8:	60b9      	str	r1, [r7, #8]
 80042ba:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 80042bc:	2300      	movs	r3, #0
 80042be:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80042c8:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	3b01      	subs	r3, #1
 80042d0:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 80042d2:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80042da:	4313      	orrs	r3, r2
 80042dc:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 80042de:	697a      	ldr	r2, [r7, #20]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	371c      	adds	r7, #28
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr

080042f2 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80042f2:	b480      	push	{r7}
 80042f4:	b083      	sub	sp, #12
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	6078      	str	r0, [r7, #4]
 80042fa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	695a      	ldr	r2, [r3, #20]
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	005b      	lsls	r3, r3, #1
 8004304:	431a      	orrs	r2, r3
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800430a:	2300      	movs	r3, #0
}
 800430c:	4618      	mov	r0, r3
 800430e:	370c      	adds	r7, #12
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr

08004318 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b082      	sub	sp, #8
 800431c:	af00      	add	r7, sp, #0
 800431e:	4603      	mov	r3, r0
 8004320:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 8004322:	20c8      	movs	r0, #200	; 0xc8
 8004324:	f000 fc32 	bl	8004b8c <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8004328:	f000 fa7a 	bl	8004820 <ft5336_I2C_InitializeIfRequired>
}
 800432c:	bf00      	nop
 800432e:	3708      	adds	r7, #8
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}

08004334 <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	4603      	mov	r3, r0
 800433c:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 800433e:	bf00      	nop
 8004340:	370c      	adds	r7, #12
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr

0800434a <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 800434a:	b580      	push	{r7, lr}
 800434c:	b084      	sub	sp, #16
 800434e:	af00      	add	r7, sp, #0
 8004350:	4603      	mov	r3, r0
 8004352:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 8004354:	2300      	movs	r3, #0
 8004356:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 8004358:	2300      	movs	r3, #0
 800435a:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 800435c:	2300      	movs	r3, #0
 800435e:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8004360:	f000 fa5e 	bl	8004820 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8004364:	2300      	movs	r3, #0
 8004366:	73fb      	strb	r3, [r7, #15]
 8004368:	e010      	b.n	800438c <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 800436a:	88fb      	ldrh	r3, [r7, #6]
 800436c:	b2db      	uxtb	r3, r3
 800436e:	21a8      	movs	r1, #168	; 0xa8
 8004370:	4618      	mov	r0, r3
 8004372:	f000 fbed 	bl	8004b50 <TS_IO_Read>
 8004376:	4603      	mov	r3, r0
 8004378:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 800437a:	7b7b      	ldrb	r3, [r7, #13]
 800437c:	b2db      	uxtb	r3, r3
 800437e:	2b51      	cmp	r3, #81	; 0x51
 8004380:	d101      	bne.n	8004386 <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 8004382:	2301      	movs	r3, #1
 8004384:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8004386:	7bfb      	ldrb	r3, [r7, #15]
 8004388:	3301      	adds	r3, #1
 800438a:	73fb      	strb	r3, [r7, #15]
 800438c:	7bfb      	ldrb	r3, [r7, #15]
 800438e:	2b02      	cmp	r3, #2
 8004390:	d802      	bhi.n	8004398 <ft5336_ReadID+0x4e>
 8004392:	7bbb      	ldrb	r3, [r7, #14]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d0e8      	beq.n	800436a <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 8004398:	7b7b      	ldrb	r3, [r7, #13]
 800439a:	b2db      	uxtb	r3, r3
 800439c:	b29b      	uxth	r3, r3
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3710      	adds	r7, #16
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}

080043a6 <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 80043a6:	b580      	push	{r7, lr}
 80043a8:	b082      	sub	sp, #8
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	4603      	mov	r3, r0
 80043ae:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 80043b0:	88fb      	ldrh	r3, [r7, #6]
 80043b2:	4618      	mov	r0, r3
 80043b4:	f000 fa44 	bl	8004840 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 80043b8:	88fb      	ldrh	r3, [r7, #6]
 80043ba:	4618      	mov	r0, r3
 80043bc:	f000 f932 	bl	8004624 <ft5336_TS_DisableIT>
}
 80043c0:	bf00      	nop
 80043c2:	3708      	adds	r7, #8
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}

080043c8 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b084      	sub	sp, #16
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	4603      	mov	r3, r0
 80043d0:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 80043d2:	2300      	movs	r3, #0
 80043d4:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 80043d6:	88fb      	ldrh	r3, [r7, #6]
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	2102      	movs	r1, #2
 80043dc:	4618      	mov	r0, r3
 80043de:	f000 fbb7 	bl	8004b50 <TS_IO_Read>
 80043e2:	4603      	mov	r3, r0
 80043e4:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 80043e6:	7bfb      	ldrb	r3, [r7, #15]
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	f003 030f 	and.w	r3, r3, #15
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 80043f2:	7bfb      	ldrb	r3, [r7, #15]
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	2b05      	cmp	r3, #5
 80043f8:	d901      	bls.n	80043fe <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 80043fa:	2300      	movs	r3, #0
 80043fc:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 80043fe:	7bfb      	ldrb	r3, [r7, #15]
 8004400:	b2da      	uxtb	r2, r3
 8004402:	4b05      	ldr	r3, [pc, #20]	; (8004418 <ft5336_TS_DetectTouch+0x50>)
 8004404:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 8004406:	4b04      	ldr	r3, [pc, #16]	; (8004418 <ft5336_TS_DetectTouch+0x50>)
 8004408:	2200      	movs	r2, #0
 800440a:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 800440c:	7bfb      	ldrb	r3, [r7, #15]
 800440e:	b2db      	uxtb	r3, r3
}
 8004410:	4618      	mov	r0, r3
 8004412:	3710      	adds	r7, #16
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}
 8004418:	200000c4 	.word	0x200000c4

0800441c <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b086      	sub	sp, #24
 8004420:	af00      	add	r7, sp, #0
 8004422:	4603      	mov	r3, r0
 8004424:	60b9      	str	r1, [r7, #8]
 8004426:	607a      	str	r2, [r7, #4]
 8004428:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 800442a:	2300      	movs	r3, #0
 800442c:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 800442e:	2300      	movs	r3, #0
 8004430:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 8004432:	2300      	movs	r3, #0
 8004434:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 8004436:	2300      	movs	r3, #0
 8004438:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 800443a:	2300      	movs	r3, #0
 800443c:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 800443e:	4b6d      	ldr	r3, [pc, #436]	; (80045f4 <ft5336_TS_GetXY+0x1d8>)
 8004440:	789a      	ldrb	r2, [r3, #2]
 8004442:	4b6c      	ldr	r3, [pc, #432]	; (80045f4 <ft5336_TS_GetXY+0x1d8>)
 8004444:	785b      	ldrb	r3, [r3, #1]
 8004446:	429a      	cmp	r2, r3
 8004448:	f080 80cf 	bcs.w	80045ea <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 800444c:	4b69      	ldr	r3, [pc, #420]	; (80045f4 <ft5336_TS_GetXY+0x1d8>)
 800444e:	789b      	ldrb	r3, [r3, #2]
 8004450:	2b09      	cmp	r3, #9
 8004452:	d871      	bhi.n	8004538 <ft5336_TS_GetXY+0x11c>
 8004454:	a201      	add	r2, pc, #4	; (adr r2, 800445c <ft5336_TS_GetXY+0x40>)
 8004456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800445a:	bf00      	nop
 800445c:	08004485 	.word	0x08004485
 8004460:	08004497 	.word	0x08004497
 8004464:	080044a9 	.word	0x080044a9
 8004468:	080044bb 	.word	0x080044bb
 800446c:	080044cd 	.word	0x080044cd
 8004470:	080044df 	.word	0x080044df
 8004474:	080044f1 	.word	0x080044f1
 8004478:	08004503 	.word	0x08004503
 800447c:	08004515 	.word	0x08004515
 8004480:	08004527 	.word	0x08004527
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 8004484:	2304      	movs	r3, #4
 8004486:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8004488:	2303      	movs	r3, #3
 800448a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 800448c:	2306      	movs	r3, #6
 800448e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8004490:	2305      	movs	r3, #5
 8004492:	753b      	strb	r3, [r7, #20]
      break;
 8004494:	e051      	b.n	800453a <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 8004496:	230a      	movs	r3, #10
 8004498:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 800449a:	2309      	movs	r3, #9
 800449c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 800449e:	230c      	movs	r3, #12
 80044a0:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 80044a2:	230b      	movs	r3, #11
 80044a4:	753b      	strb	r3, [r7, #20]
      break;
 80044a6:	e048      	b.n	800453a <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 80044a8:	2310      	movs	r3, #16
 80044aa:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 80044ac:	230f      	movs	r3, #15
 80044ae:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 80044b0:	2312      	movs	r3, #18
 80044b2:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 80044b4:	2311      	movs	r3, #17
 80044b6:	753b      	strb	r3, [r7, #20]
      break;
 80044b8:	e03f      	b.n	800453a <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 80044ba:	2316      	movs	r3, #22
 80044bc:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 80044be:	2315      	movs	r3, #21
 80044c0:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 80044c2:	2318      	movs	r3, #24
 80044c4:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 80044c6:	2317      	movs	r3, #23
 80044c8:	753b      	strb	r3, [r7, #20]
      break;
 80044ca:	e036      	b.n	800453a <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 80044cc:	231c      	movs	r3, #28
 80044ce:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 80044d0:	231b      	movs	r3, #27
 80044d2:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 80044d4:	231e      	movs	r3, #30
 80044d6:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 80044d8:	231d      	movs	r3, #29
 80044da:	753b      	strb	r3, [r7, #20]
      break;
 80044dc:	e02d      	b.n	800453a <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 80044de:	2322      	movs	r3, #34	; 0x22
 80044e0:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 80044e2:	2321      	movs	r3, #33	; 0x21
 80044e4:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 80044e6:	2324      	movs	r3, #36	; 0x24
 80044e8:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 80044ea:	2323      	movs	r3, #35	; 0x23
 80044ec:	753b      	strb	r3, [r7, #20]
      break;
 80044ee:	e024      	b.n	800453a <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 80044f0:	2328      	movs	r3, #40	; 0x28
 80044f2:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 80044f4:	2327      	movs	r3, #39	; 0x27
 80044f6:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 80044f8:	232a      	movs	r3, #42	; 0x2a
 80044fa:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 80044fc:	2329      	movs	r3, #41	; 0x29
 80044fe:	753b      	strb	r3, [r7, #20]
      break;
 8004500:	e01b      	b.n	800453a <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 8004502:	232e      	movs	r3, #46	; 0x2e
 8004504:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 8004506:	232d      	movs	r3, #45	; 0x2d
 8004508:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 800450a:	2330      	movs	r3, #48	; 0x30
 800450c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 800450e:	232f      	movs	r3, #47	; 0x2f
 8004510:	753b      	strb	r3, [r7, #20]
      break;
 8004512:	e012      	b.n	800453a <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 8004514:	2334      	movs	r3, #52	; 0x34
 8004516:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 8004518:	2333      	movs	r3, #51	; 0x33
 800451a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 800451c:	2336      	movs	r3, #54	; 0x36
 800451e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 8004520:	2335      	movs	r3, #53	; 0x35
 8004522:	753b      	strb	r3, [r7, #20]
      break;
 8004524:	e009      	b.n	800453a <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 8004526:	233a      	movs	r3, #58	; 0x3a
 8004528:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 800452a:	2339      	movs	r3, #57	; 0x39
 800452c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 800452e:	233c      	movs	r3, #60	; 0x3c
 8004530:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 8004532:	233b      	movs	r3, #59	; 0x3b
 8004534:	753b      	strb	r3, [r7, #20]
      break;
 8004536:	e000      	b.n	800453a <ft5336_TS_GetXY+0x11e>

    default :
      break;
 8004538:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 800453a:	89fb      	ldrh	r3, [r7, #14]
 800453c:	b2db      	uxtb	r3, r3
 800453e:	7dfa      	ldrb	r2, [r7, #23]
 8004540:	4611      	mov	r1, r2
 8004542:	4618      	mov	r0, r3
 8004544:	f000 fb04 	bl	8004b50 <TS_IO_Read>
 8004548:	4603      	mov	r3, r0
 800454a:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 800454c:	7cfb      	ldrb	r3, [r7, #19]
 800454e:	b2db      	uxtb	r3, r3
 8004550:	b29a      	uxth	r2, r3
 8004552:	4b29      	ldr	r3, [pc, #164]	; (80045f8 <ft5336_TS_GetXY+0x1dc>)
 8004554:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8004556:	89fb      	ldrh	r3, [r7, #14]
 8004558:	b2db      	uxtb	r3, r3
 800455a:	7dba      	ldrb	r2, [r7, #22]
 800455c:	4611      	mov	r1, r2
 800455e:	4618      	mov	r0, r3
 8004560:	f000 faf6 	bl	8004b50 <TS_IO_Read>
 8004564:	4603      	mov	r3, r0
 8004566:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8004568:	7cfb      	ldrb	r3, [r7, #19]
 800456a:	b2db      	uxtb	r3, r3
 800456c:	021b      	lsls	r3, r3, #8
 800456e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004572:	b21a      	sxth	r2, r3
 8004574:	4b20      	ldr	r3, [pc, #128]	; (80045f8 <ft5336_TS_GetXY+0x1dc>)
 8004576:	881b      	ldrh	r3, [r3, #0]
 8004578:	b21b      	sxth	r3, r3
 800457a:	4313      	orrs	r3, r2
 800457c:	b21b      	sxth	r3, r3
 800457e:	b29a      	uxth	r2, r3
 8004580:	4b1d      	ldr	r3, [pc, #116]	; (80045f8 <ft5336_TS_GetXY+0x1dc>)
 8004582:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 8004584:	4b1c      	ldr	r3, [pc, #112]	; (80045f8 <ft5336_TS_GetXY+0x1dc>)
 8004586:	881a      	ldrh	r2, [r3, #0]
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 800458c:	89fb      	ldrh	r3, [r7, #14]
 800458e:	b2db      	uxtb	r3, r3
 8004590:	7d7a      	ldrb	r2, [r7, #21]
 8004592:	4611      	mov	r1, r2
 8004594:	4618      	mov	r0, r3
 8004596:	f000 fadb 	bl	8004b50 <TS_IO_Read>
 800459a:	4603      	mov	r3, r0
 800459c:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 800459e:	7cfb      	ldrb	r3, [r7, #19]
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	b29a      	uxth	r2, r3
 80045a4:	4b14      	ldr	r3, [pc, #80]	; (80045f8 <ft5336_TS_GetXY+0x1dc>)
 80045a6:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 80045a8:	89fb      	ldrh	r3, [r7, #14]
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	7d3a      	ldrb	r2, [r7, #20]
 80045ae:	4611      	mov	r1, r2
 80045b0:	4618      	mov	r0, r3
 80045b2:	f000 facd 	bl	8004b50 <TS_IO_Read>
 80045b6:	4603      	mov	r3, r0
 80045b8:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80045ba:	7cfb      	ldrb	r3, [r7, #19]
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	021b      	lsls	r3, r3, #8
 80045c0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80045c4:	b21a      	sxth	r2, r3
 80045c6:	4b0c      	ldr	r3, [pc, #48]	; (80045f8 <ft5336_TS_GetXY+0x1dc>)
 80045c8:	881b      	ldrh	r3, [r3, #0]
 80045ca:	b21b      	sxth	r3, r3
 80045cc:	4313      	orrs	r3, r2
 80045ce:	b21b      	sxth	r3, r3
 80045d0:	b29a      	uxth	r2, r3
 80045d2:	4b09      	ldr	r3, [pc, #36]	; (80045f8 <ft5336_TS_GetXY+0x1dc>)
 80045d4:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 80045d6:	4b08      	ldr	r3, [pc, #32]	; (80045f8 <ft5336_TS_GetXY+0x1dc>)
 80045d8:	881a      	ldrh	r2, [r3, #0]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 80045de:	4b05      	ldr	r3, [pc, #20]	; (80045f4 <ft5336_TS_GetXY+0x1d8>)
 80045e0:	789b      	ldrb	r3, [r3, #2]
 80045e2:	3301      	adds	r3, #1
 80045e4:	b2da      	uxtb	r2, r3
 80045e6:	4b03      	ldr	r3, [pc, #12]	; (80045f4 <ft5336_TS_GetXY+0x1d8>)
 80045e8:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 80045ea:	bf00      	nop
 80045ec:	3718      	adds	r7, #24
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop
 80045f4:	200000c4 	.word	0x200000c4
 80045f8:	200000c8 	.word	0x200000c8

080045fc <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b084      	sub	sp, #16
 8004600:	af00      	add	r7, sp, #0
 8004602:	4603      	mov	r3, r0
 8004604:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 8004606:	2300      	movs	r3, #0
 8004608:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 800460a:	2301      	movs	r3, #1
 800460c:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 800460e:	88fb      	ldrh	r3, [r7, #6]
 8004610:	b2db      	uxtb	r3, r3
 8004612:	7bfa      	ldrb	r2, [r7, #15]
 8004614:	21a4      	movs	r1, #164	; 0xa4
 8004616:	4618      	mov	r0, r3
 8004618:	f000 fa80 	bl	8004b1c <TS_IO_Write>
}
 800461c:	bf00      	nop
 800461e:	3710      	adds	r7, #16
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}

08004624 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b084      	sub	sp, #16
 8004628:	af00      	add	r7, sp, #0
 800462a:	4603      	mov	r3, r0
 800462c:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 800462e:	2300      	movs	r3, #0
 8004630:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8004632:	2300      	movs	r3, #0
 8004634:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8004636:	88fb      	ldrh	r3, [r7, #6]
 8004638:	b2db      	uxtb	r3, r3
 800463a:	7bfa      	ldrb	r2, [r7, #15]
 800463c:	21a4      	movs	r1, #164	; 0xa4
 800463e:	4618      	mov	r0, r3
 8004640:	f000 fa6c 	bl	8004b1c <TS_IO_Write>
}
 8004644:	bf00      	nop
 8004646:	3710      	adds	r7, #16
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}

0800464c <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	4603      	mov	r3, r0
 8004654:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 8004656:	2300      	movs	r3, #0
}
 8004658:	4618      	mov	r0, r3
 800465a:	370c      	adds	r7, #12
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr

08004664 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 8004664:	b480      	push	{r7}
 8004666:	b083      	sub	sp, #12
 8004668:	af00      	add	r7, sp, #0
 800466a:	4603      	mov	r3, r0
 800466c:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 800466e:	bf00      	nop
 8004670:	370c      	adds	r7, #12
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr

0800467a <ft5336_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 800467a:	b580      	push	{r7, lr}
 800467c:	b084      	sub	sp, #16
 800467e:	af00      	add	r7, sp, #0
 8004680:	4603      	mov	r3, r0
 8004682:	6039      	str	r1, [r7, #0]
 8004684:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
 8004686:	2300      	movs	r3, #0
 8004688:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 800468a:	88fb      	ldrh	r3, [r7, #6]
 800468c:	b2db      	uxtb	r3, r3
 800468e:	2101      	movs	r1, #1
 8004690:	4618      	mov	r0, r3
 8004692:	f000 fa5d 	bl	8004b50 <TS_IO_Read>
 8004696:	4603      	mov	r3, r0
 8004698:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
 800469a:	7bfb      	ldrb	r3, [r7, #15]
 800469c:	b2db      	uxtb	r3, r3
 800469e:	461a      	mov	r2, r3
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	601a      	str	r2, [r3, #0]
}
 80046a4:	bf00      	nop
 80046a6:	3710      	adds	r7, #16
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}

080046ac <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b086      	sub	sp, #24
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	60b9      	str	r1, [r7, #8]
 80046b4:	607a      	str	r2, [r7, #4]
 80046b6:	603b      	str	r3, [r7, #0]
 80046b8:	4603      	mov	r3, r0
 80046ba:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 80046bc:	2300      	movs	r3, #0
 80046be:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 80046c0:	2300      	movs	r3, #0
 80046c2:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 80046c4:	2300      	movs	r3, #0
 80046c6:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 80046c8:	2300      	movs	r3, #0
 80046ca:	757b      	strb	r3, [r7, #21]

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 80046cc:	4b4d      	ldr	r3, [pc, #308]	; (8004804 <ft5336_TS_GetTouchInfo+0x158>)
 80046ce:	785b      	ldrb	r3, [r3, #1]
 80046d0:	461a      	mov	r2, r3
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	4293      	cmp	r3, r2
 80046d6:	f080 8090 	bcs.w	80047fa <ft5336_TS_GetTouchInfo+0x14e>
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	2b09      	cmp	r3, #9
 80046de:	d85d      	bhi.n	800479c <ft5336_TS_GetTouchInfo+0xf0>
 80046e0:	a201      	add	r2, pc, #4	; (adr r2, 80046e8 <ft5336_TS_GetTouchInfo+0x3c>)
 80046e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046e6:	bf00      	nop
 80046e8:	08004711 	.word	0x08004711
 80046ec:	0800471f 	.word	0x0800471f
 80046f0:	0800472d 	.word	0x0800472d
 80046f4:	0800473b 	.word	0x0800473b
 80046f8:	08004749 	.word	0x08004749
 80046fc:	08004757 	.word	0x08004757
 8004700:	08004765 	.word	0x08004765
 8004704:	08004773 	.word	0x08004773
 8004708:	08004781 	.word	0x08004781
 800470c:	0800478f 	.word	0x0800478f
  {
    switch(touchIdx)
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 8004710:	2303      	movs	r3, #3
 8004712:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 8004714:	2307      	movs	r3, #7
 8004716:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 8004718:	2308      	movs	r3, #8
 800471a:	757b      	strb	r3, [r7, #21]
      break;
 800471c:	e03f      	b.n	800479e <ft5336_TS_GetTouchInfo+0xf2>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 800471e:	2309      	movs	r3, #9
 8004720:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 8004722:	230d      	movs	r3, #13
 8004724:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 8004726:	230e      	movs	r3, #14
 8004728:	757b      	strb	r3, [r7, #21]
      break;
 800472a:	e038      	b.n	800479e <ft5336_TS_GetTouchInfo+0xf2>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 800472c:	230f      	movs	r3, #15
 800472e:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 8004730:	2313      	movs	r3, #19
 8004732:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 8004734:	2314      	movs	r3, #20
 8004736:	757b      	strb	r3, [r7, #21]
      break;
 8004738:	e031      	b.n	800479e <ft5336_TS_GetTouchInfo+0xf2>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 800473a:	2315      	movs	r3, #21
 800473c:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 800473e:	2319      	movs	r3, #25
 8004740:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 8004742:	231a      	movs	r3, #26
 8004744:	757b      	strb	r3, [r7, #21]
      break;
 8004746:	e02a      	b.n	800479e <ft5336_TS_GetTouchInfo+0xf2>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 8004748:	231b      	movs	r3, #27
 800474a:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 800474c:	231f      	movs	r3, #31
 800474e:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 8004750:	2320      	movs	r3, #32
 8004752:	757b      	strb	r3, [r7, #21]
      break;
 8004754:	e023      	b.n	800479e <ft5336_TS_GetTouchInfo+0xf2>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 8004756:	2321      	movs	r3, #33	; 0x21
 8004758:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 800475a:	2325      	movs	r3, #37	; 0x25
 800475c:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 800475e:	2326      	movs	r3, #38	; 0x26
 8004760:	757b      	strb	r3, [r7, #21]
      break;
 8004762:	e01c      	b.n	800479e <ft5336_TS_GetTouchInfo+0xf2>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 8004764:	2327      	movs	r3, #39	; 0x27
 8004766:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 8004768:	232b      	movs	r3, #43	; 0x2b
 800476a:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 800476c:	232c      	movs	r3, #44	; 0x2c
 800476e:	757b      	strb	r3, [r7, #21]
      break;
 8004770:	e015      	b.n	800479e <ft5336_TS_GetTouchInfo+0xf2>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 8004772:	232d      	movs	r3, #45	; 0x2d
 8004774:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 8004776:	2331      	movs	r3, #49	; 0x31
 8004778:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 800477a:	2332      	movs	r3, #50	; 0x32
 800477c:	757b      	strb	r3, [r7, #21]
      break;
 800477e:	e00e      	b.n	800479e <ft5336_TS_GetTouchInfo+0xf2>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 8004780:	2333      	movs	r3, #51	; 0x33
 8004782:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 8004784:	2337      	movs	r3, #55	; 0x37
 8004786:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 8004788:	2338      	movs	r3, #56	; 0x38
 800478a:	757b      	strb	r3, [r7, #21]
      break;
 800478c:	e007      	b.n	800479e <ft5336_TS_GetTouchInfo+0xf2>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 800478e:	2339      	movs	r3, #57	; 0x39
 8004790:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 8004792:	233d      	movs	r3, #61	; 0x3d
 8004794:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 8004796:	233e      	movs	r3, #62	; 0x3e
 8004798:	757b      	strb	r3, [r7, #21]
      break;
 800479a:	e000      	b.n	800479e <ft5336_TS_GetTouchInfo+0xf2>

    default :
      break;
 800479c:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 800479e:	89fb      	ldrh	r3, [r7, #14]
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	7dfa      	ldrb	r2, [r7, #23]
 80047a4:	4611      	mov	r1, r2
 80047a6:	4618      	mov	r0, r3
 80047a8:	f000 f9d2 	bl	8004b50 <TS_IO_Read>
 80047ac:	4603      	mov	r3, r0
 80047ae:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 80047b0:	7d3b      	ldrb	r3, [r7, #20]
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	119b      	asrs	r3, r3, #6
 80047b6:	f003 0203 	and.w	r2, r3, #3
 80047ba:	6a3b      	ldr	r3, [r7, #32]
 80047bc:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 80047be:	89fb      	ldrh	r3, [r7, #14]
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	7dba      	ldrb	r2, [r7, #22]
 80047c4:	4611      	mov	r1, r2
 80047c6:	4618      	mov	r0, r3
 80047c8:	f000 f9c2 	bl	8004b50 <TS_IO_Read>
 80047cc:	4603      	mov	r3, r0
 80047ce:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 80047d0:	7d3b      	ldrb	r3, [r7, #20]
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	461a      	mov	r2, r3
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 80047da:	89fb      	ldrh	r3, [r7, #14]
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	7d7a      	ldrb	r2, [r7, #21]
 80047e0:	4611      	mov	r1, r2
 80047e2:	4618      	mov	r0, r3
 80047e4:	f000 f9b4 	bl	8004b50 <TS_IO_Read>
 80047e8:	4603      	mov	r3, r0
 80047ea:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 80047ec:	7d3b      	ldrb	r3, [r7, #20]
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	111b      	asrs	r3, r3, #4
 80047f2:	f003 0204 	and.w	r2, r3, #4
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
 80047fa:	bf00      	nop
 80047fc:	3718      	adds	r7, #24
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
 8004802:	bf00      	nop
 8004804:	200000c4 	.word	0x200000c4

08004808 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 8004808:	b480      	push	{r7}
 800480a:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 800480c:	4b03      	ldr	r3, [pc, #12]	; (800481c <ft5336_Get_I2C_InitializedStatus+0x14>)
 800480e:	781b      	ldrb	r3, [r3, #0]
}
 8004810:	4618      	mov	r0, r3
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr
 800481a:	bf00      	nop
 800481c:	200000c4 	.word	0x200000c4

08004820 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8004824:	f7ff fff0 	bl	8004808 <ft5336_Get_I2C_InitializedStatus>
 8004828:	4603      	mov	r3, r0
 800482a:	2b00      	cmp	r3, #0
 800482c:	d104      	bne.n	8004838 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 800482e:	f000 f96b 	bl	8004b08 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8004832:	4b02      	ldr	r3, [pc, #8]	; (800483c <ft5336_I2C_InitializeIfRequired+0x1c>)
 8004834:	2201      	movs	r2, #1
 8004836:	701a      	strb	r2, [r3, #0]
  }
}
 8004838:	bf00      	nop
 800483a:	bd80      	pop	{r7, pc}
 800483c:	200000c4 	.word	0x200000c4

08004840 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 8004840:	b480      	push	{r7}
 8004842:	b085      	sub	sp, #20
 8004844:	af00      	add	r7, sp, #0
 8004846:	4603      	mov	r3, r0
 8004848:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 800484a:	2300      	movs	r3, #0
 800484c:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 800484e:	68fb      	ldr	r3, [r7, #12]
}
 8004850:	4618      	mov	r0, r3
 8004852:	3714      	adds	r7, #20
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr

0800485c <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b08c      	sub	sp, #48	; 0x30
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	4a51      	ldr	r2, [pc, #324]	; (80049ac <I2Cx_MspInit+0x150>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d14d      	bne.n	8004908 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800486c:	4b50      	ldr	r3, [pc, #320]	; (80049b0 <I2Cx_MspInit+0x154>)
 800486e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004870:	4a4f      	ldr	r2, [pc, #316]	; (80049b0 <I2Cx_MspInit+0x154>)
 8004872:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004876:	6313      	str	r3, [r2, #48]	; 0x30
 8004878:	4b4d      	ldr	r3, [pc, #308]	; (80049b0 <I2Cx_MspInit+0x154>)
 800487a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800487c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004880:	61bb      	str	r3, [r7, #24]
 8004882:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8004884:	2380      	movs	r3, #128	; 0x80
 8004886:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8004888:	2312      	movs	r3, #18
 800488a:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 800488c:	2300      	movs	r3, #0
 800488e:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8004890:	2302      	movs	r3, #2
 8004892:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8004894:	2304      	movs	r3, #4
 8004896:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8004898:	f107 031c 	add.w	r3, r7, #28
 800489c:	4619      	mov	r1, r3
 800489e:	4845      	ldr	r0, [pc, #276]	; (80049b4 <I2Cx_MspInit+0x158>)
 80048a0:	f7fd f830 	bl	8001904 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 80048a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80048a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80048aa:	f107 031c 	add.w	r3, r7, #28
 80048ae:	4619      	mov	r1, r3
 80048b0:	4840      	ldr	r0, [pc, #256]	; (80049b4 <I2Cx_MspInit+0x158>)
 80048b2:	f7fd f827 	bl	8001904 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 80048b6:	4b3e      	ldr	r3, [pc, #248]	; (80049b0 <I2Cx_MspInit+0x154>)
 80048b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ba:	4a3d      	ldr	r2, [pc, #244]	; (80049b0 <I2Cx_MspInit+0x154>)
 80048bc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80048c0:	6413      	str	r3, [r2, #64]	; 0x40
 80048c2:	4b3b      	ldr	r3, [pc, #236]	; (80049b0 <I2Cx_MspInit+0x154>)
 80048c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80048ca:	617b      	str	r3, [r7, #20]
 80048cc:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 80048ce:	4b38      	ldr	r3, [pc, #224]	; (80049b0 <I2Cx_MspInit+0x154>)
 80048d0:	6a1b      	ldr	r3, [r3, #32]
 80048d2:	4a37      	ldr	r2, [pc, #220]	; (80049b0 <I2Cx_MspInit+0x154>)
 80048d4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80048d8:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 80048da:	4b35      	ldr	r3, [pc, #212]	; (80049b0 <I2Cx_MspInit+0x154>)
 80048dc:	6a1b      	ldr	r3, [r3, #32]
 80048de:	4a34      	ldr	r2, [pc, #208]	; (80049b0 <I2Cx_MspInit+0x154>)
 80048e0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80048e4:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 80048e6:	2200      	movs	r2, #0
 80048e8:	210f      	movs	r1, #15
 80048ea:	2048      	movs	r0, #72	; 0x48
 80048ec:	f7fc fa9f 	bl	8000e2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 80048f0:	2048      	movs	r0, #72	; 0x48
 80048f2:	f7fc fab8 	bl	8000e66 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 80048f6:	2200      	movs	r2, #0
 80048f8:	210f      	movs	r1, #15
 80048fa:	2049      	movs	r0, #73	; 0x49
 80048fc:	f7fc fa97 	bl	8000e2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8004900:	2049      	movs	r0, #73	; 0x49
 8004902:	f7fc fab0 	bl	8000e66 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8004906:	e04d      	b.n	80049a4 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8004908:	4b29      	ldr	r3, [pc, #164]	; (80049b0 <I2Cx_MspInit+0x154>)
 800490a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800490c:	4a28      	ldr	r2, [pc, #160]	; (80049b0 <I2Cx_MspInit+0x154>)
 800490e:	f043 0302 	orr.w	r3, r3, #2
 8004912:	6313      	str	r3, [r2, #48]	; 0x30
 8004914:	4b26      	ldr	r3, [pc, #152]	; (80049b0 <I2Cx_MspInit+0x154>)
 8004916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004918:	f003 0302 	and.w	r3, r3, #2
 800491c:	613b      	str	r3, [r7, #16]
 800491e:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8004920:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004924:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8004926:	2312      	movs	r3, #18
 8004928:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 800492a:	2300      	movs	r3, #0
 800492c:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800492e:	2302      	movs	r3, #2
 8004930:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8004932:	2304      	movs	r3, #4
 8004934:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8004936:	f107 031c 	add.w	r3, r7, #28
 800493a:	4619      	mov	r1, r3
 800493c:	481e      	ldr	r0, [pc, #120]	; (80049b8 <I2Cx_MspInit+0x15c>)
 800493e:	f7fc ffe1 	bl	8001904 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8004942:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004946:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8004948:	f107 031c 	add.w	r3, r7, #28
 800494c:	4619      	mov	r1, r3
 800494e:	481a      	ldr	r0, [pc, #104]	; (80049b8 <I2Cx_MspInit+0x15c>)
 8004950:	f7fc ffd8 	bl	8001904 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8004954:	4b16      	ldr	r3, [pc, #88]	; (80049b0 <I2Cx_MspInit+0x154>)
 8004956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004958:	4a15      	ldr	r2, [pc, #84]	; (80049b0 <I2Cx_MspInit+0x154>)
 800495a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800495e:	6413      	str	r3, [r2, #64]	; 0x40
 8004960:	4b13      	ldr	r3, [pc, #76]	; (80049b0 <I2Cx_MspInit+0x154>)
 8004962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004964:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004968:	60fb      	str	r3, [r7, #12]
 800496a:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 800496c:	4b10      	ldr	r3, [pc, #64]	; (80049b0 <I2Cx_MspInit+0x154>)
 800496e:	6a1b      	ldr	r3, [r3, #32]
 8004970:	4a0f      	ldr	r2, [pc, #60]	; (80049b0 <I2Cx_MspInit+0x154>)
 8004972:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004976:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8004978:	4b0d      	ldr	r3, [pc, #52]	; (80049b0 <I2Cx_MspInit+0x154>)
 800497a:	6a1b      	ldr	r3, [r3, #32]
 800497c:	4a0c      	ldr	r2, [pc, #48]	; (80049b0 <I2Cx_MspInit+0x154>)
 800497e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004982:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8004984:	2200      	movs	r2, #0
 8004986:	210f      	movs	r1, #15
 8004988:	201f      	movs	r0, #31
 800498a:	f7fc fa50 	bl	8000e2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 800498e:	201f      	movs	r0, #31
 8004990:	f7fc fa69 	bl	8000e66 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8004994:	2200      	movs	r2, #0
 8004996:	210f      	movs	r1, #15
 8004998:	2020      	movs	r0, #32
 800499a:	f7fc fa48 	bl	8000e2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 800499e:	2020      	movs	r0, #32
 80049a0:	f7fc fa61 	bl	8000e66 <HAL_NVIC_EnableIRQ>
}
 80049a4:	bf00      	nop
 80049a6:	3730      	adds	r7, #48	; 0x30
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}
 80049ac:	200000cc 	.word	0x200000cc
 80049b0:	40023800 	.word	0x40023800
 80049b4:	40021c00 	.word	0x40021c00
 80049b8:	40020400 	.word	0x40020400

080049bc <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b082      	sub	sp, #8
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f7fd fc7f 	bl	80022c8 <HAL_I2C_GetState>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d125      	bne.n	8004a1c <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	4a14      	ldr	r2, [pc, #80]	; (8004a24 <I2Cx_Init+0x68>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d103      	bne.n	80049e0 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	4a13      	ldr	r2, [pc, #76]	; (8004a28 <I2Cx_Init+0x6c>)
 80049dc:	601a      	str	r2, [r3, #0]
 80049de:	e002      	b.n	80049e6 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	4a12      	ldr	r2, [pc, #72]	; (8004a2c <I2Cx_Init+0x70>)
 80049e4:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	4a11      	ldr	r2, [pc, #68]	; (8004a30 <I2Cx_Init+0x74>)
 80049ea:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2200      	movs	r2, #0
 80049f0:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2201      	movs	r2, #1
 80049f6:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2200      	movs	r2, #0
 8004a02:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2200      	movs	r2, #0
 8004a08:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f7ff ff23 	bl	800485c <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f7fd f954 	bl	8001cc4 <HAL_I2C_Init>
  }
}
 8004a1c:	bf00      	nop
 8004a1e:	3708      	adds	r7, #8
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}
 8004a24:	200000cc 	.word	0x200000cc
 8004a28:	40005c00 	.word	0x40005c00
 8004a2c:	40005400 	.word	0x40005400
 8004a30:	40912732 	.word	0x40912732

08004a34 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b08a      	sub	sp, #40	; 0x28
 8004a38:	af04      	add	r7, sp, #16
 8004a3a:	60f8      	str	r0, [r7, #12]
 8004a3c:	4608      	mov	r0, r1
 8004a3e:	4611      	mov	r1, r2
 8004a40:	461a      	mov	r2, r3
 8004a42:	4603      	mov	r3, r0
 8004a44:	72fb      	strb	r3, [r7, #11]
 8004a46:	460b      	mov	r3, r1
 8004a48:	813b      	strh	r3, [r7, #8]
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8004a52:	7afb      	ldrb	r3, [r7, #11]
 8004a54:	b299      	uxth	r1, r3
 8004a56:	88f8      	ldrh	r0, [r7, #6]
 8004a58:	893a      	ldrh	r2, [r7, #8]
 8004a5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004a5e:	9302      	str	r3, [sp, #8]
 8004a60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004a62:	9301      	str	r3, [sp, #4]
 8004a64:	6a3b      	ldr	r3, [r7, #32]
 8004a66:	9300      	str	r3, [sp, #0]
 8004a68:	4603      	mov	r3, r0
 8004a6a:	68f8      	ldr	r0, [r7, #12]
 8004a6c:	f7fd fb12 	bl	8002094 <HAL_I2C_Mem_Read>
 8004a70:	4603      	mov	r3, r0
 8004a72:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8004a74:	7dfb      	ldrb	r3, [r7, #23]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d004      	beq.n	8004a84 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8004a7a:	7afb      	ldrb	r3, [r7, #11]
 8004a7c:	4619      	mov	r1, r3
 8004a7e:	68f8      	ldr	r0, [r7, #12]
 8004a80:	f000 f832 	bl	8004ae8 <I2Cx_Error>
  }
  return status;    
 8004a84:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3718      	adds	r7, #24
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}

08004a8e <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8004a8e:	b580      	push	{r7, lr}
 8004a90:	b08a      	sub	sp, #40	; 0x28
 8004a92:	af04      	add	r7, sp, #16
 8004a94:	60f8      	str	r0, [r7, #12]
 8004a96:	4608      	mov	r0, r1
 8004a98:	4611      	mov	r1, r2
 8004a9a:	461a      	mov	r2, r3
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	72fb      	strb	r3, [r7, #11]
 8004aa0:	460b      	mov	r3, r1
 8004aa2:	813b      	strh	r3, [r7, #8]
 8004aa4:	4613      	mov	r3, r2
 8004aa6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8004aac:	7afb      	ldrb	r3, [r7, #11]
 8004aae:	b299      	uxth	r1, r3
 8004ab0:	88f8      	ldrh	r0, [r7, #6]
 8004ab2:	893a      	ldrh	r2, [r7, #8]
 8004ab4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004ab8:	9302      	str	r3, [sp, #8]
 8004aba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004abc:	9301      	str	r3, [sp, #4]
 8004abe:	6a3b      	ldr	r3, [r7, #32]
 8004ac0:	9300      	str	r3, [sp, #0]
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	68f8      	ldr	r0, [r7, #12]
 8004ac6:	f7fd f9d1 	bl	8001e6c <HAL_I2C_Mem_Write>
 8004aca:	4603      	mov	r3, r0
 8004acc:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8004ace:	7dfb      	ldrb	r3, [r7, #23]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d004      	beq.n	8004ade <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8004ad4:	7afb      	ldrb	r3, [r7, #11]
 8004ad6:	4619      	mov	r1, r3
 8004ad8:	68f8      	ldr	r0, [r7, #12]
 8004ada:	f000 f805 	bl	8004ae8 <I2Cx_Error>
  }
  return status;
 8004ade:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3718      	adds	r7, #24
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}

08004ae8 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b082      	sub	sp, #8
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	460b      	mov	r3, r1
 8004af2:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f7fd f975 	bl	8001de4 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f7ff ff5e 	bl	80049bc <I2Cx_Init>
}
 8004b00:	bf00      	nop
 8004b02:	3708      	adds	r7, #8
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}

08004b08 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8004b0c:	4802      	ldr	r0, [pc, #8]	; (8004b18 <TS_IO_Init+0x10>)
 8004b0e:	f7ff ff55 	bl	80049bc <I2Cx_Init>
}
 8004b12:	bf00      	nop
 8004b14:	bd80      	pop	{r7, pc}
 8004b16:	bf00      	nop
 8004b18:	200000cc 	.word	0x200000cc

08004b1c <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b084      	sub	sp, #16
 8004b20:	af02      	add	r7, sp, #8
 8004b22:	4603      	mov	r3, r0
 8004b24:	71fb      	strb	r3, [r7, #7]
 8004b26:	460b      	mov	r3, r1
 8004b28:	71bb      	strb	r3, [r7, #6]
 8004b2a:	4613      	mov	r3, r2
 8004b2c:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8004b2e:	79bb      	ldrb	r3, [r7, #6]
 8004b30:	b29a      	uxth	r2, r3
 8004b32:	79f9      	ldrb	r1, [r7, #7]
 8004b34:	2301      	movs	r3, #1
 8004b36:	9301      	str	r3, [sp, #4]
 8004b38:	1d7b      	adds	r3, r7, #5
 8004b3a:	9300      	str	r3, [sp, #0]
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	4803      	ldr	r0, [pc, #12]	; (8004b4c <TS_IO_Write+0x30>)
 8004b40:	f7ff ffa5 	bl	8004a8e <I2Cx_WriteMultiple>
}
 8004b44:	bf00      	nop
 8004b46:	3708      	adds	r7, #8
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}
 8004b4c:	200000cc 	.word	0x200000cc

08004b50 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b086      	sub	sp, #24
 8004b54:	af02      	add	r7, sp, #8
 8004b56:	4603      	mov	r3, r0
 8004b58:	460a      	mov	r2, r1
 8004b5a:	71fb      	strb	r3, [r7, #7]
 8004b5c:	4613      	mov	r3, r2
 8004b5e:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8004b60:	2300      	movs	r3, #0
 8004b62:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8004b64:	79bb      	ldrb	r3, [r7, #6]
 8004b66:	b29a      	uxth	r2, r3
 8004b68:	79f9      	ldrb	r1, [r7, #7]
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	9301      	str	r3, [sp, #4]
 8004b6e:	f107 030f 	add.w	r3, r7, #15
 8004b72:	9300      	str	r3, [sp, #0]
 8004b74:	2301      	movs	r3, #1
 8004b76:	4804      	ldr	r0, [pc, #16]	; (8004b88 <TS_IO_Read+0x38>)
 8004b78:	f7ff ff5c 	bl	8004a34 <I2Cx_ReadMultiple>

  return read_value;
 8004b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3710      	adds	r7, #16
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
 8004b86:	bf00      	nop
 8004b88:	200000cc 	.word	0x200000cc

08004b8c <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b082      	sub	sp, #8
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f7fc f84b 	bl	8000c30 <HAL_Delay>
}
 8004b9a:	bf00      	nop
 8004b9c:	3708      	adds	r7, #8
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}
	...

08004ba4 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8004ba8:	4b31      	ldr	r3, [pc, #196]	; (8004c70 <BSP_LCD_Init+0xcc>)
 8004baa:	2228      	movs	r2, #40	; 0x28
 8004bac:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8004bae:	4b30      	ldr	r3, [pc, #192]	; (8004c70 <BSP_LCD_Init+0xcc>)
 8004bb0:	2209      	movs	r2, #9
 8004bb2:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8004bb4:	4b2e      	ldr	r3, [pc, #184]	; (8004c70 <BSP_LCD_Init+0xcc>)
 8004bb6:	2235      	movs	r2, #53	; 0x35
 8004bb8:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8004bba:	4b2d      	ldr	r3, [pc, #180]	; (8004c70 <BSP_LCD_Init+0xcc>)
 8004bbc:	220b      	movs	r2, #11
 8004bbe:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8004bc0:	4b2b      	ldr	r3, [pc, #172]	; (8004c70 <BSP_LCD_Init+0xcc>)
 8004bc2:	f240 121b 	movw	r2, #283	; 0x11b
 8004bc6:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8004bc8:	4b29      	ldr	r3, [pc, #164]	; (8004c70 <BSP_LCD_Init+0xcc>)
 8004bca:	f240 2215 	movw	r2, #533	; 0x215
 8004bce:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8004bd0:	4b27      	ldr	r3, [pc, #156]	; (8004c70 <BSP_LCD_Init+0xcc>)
 8004bd2:	f240 121d 	movw	r2, #285	; 0x11d
 8004bd6:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8004bd8:	4b25      	ldr	r3, [pc, #148]	; (8004c70 <BSP_LCD_Init+0xcc>)
 8004bda:	f240 2235 	movw	r2, #565	; 0x235
 8004bde:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8004be0:	2100      	movs	r1, #0
 8004be2:	4823      	ldr	r0, [pc, #140]	; (8004c70 <BSP_LCD_Init+0xcc>)
 8004be4:	f000 fb74 	bl	80052d0 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8004be8:	4b21      	ldr	r3, [pc, #132]	; (8004c70 <BSP_LCD_Init+0xcc>)
 8004bea:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004bee:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8004bf0:	4b1f      	ldr	r3, [pc, #124]	; (8004c70 <BSP_LCD_Init+0xcc>)
 8004bf2:	f44f 7288 	mov.w	r2, #272	; 0x110
 8004bf6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8004bf8:	4b1d      	ldr	r3, [pc, #116]	; (8004c70 <BSP_LCD_Init+0xcc>)
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8004c00:	4b1b      	ldr	r3, [pc, #108]	; (8004c70 <BSP_LCD_Init+0xcc>)
 8004c02:	2200      	movs	r2, #0
 8004c04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8004c08:	4b19      	ldr	r3, [pc, #100]	; (8004c70 <BSP_LCD_Init+0xcc>)
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8004c10:	4b17      	ldr	r3, [pc, #92]	; (8004c70 <BSP_LCD_Init+0xcc>)
 8004c12:	2200      	movs	r2, #0
 8004c14:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8004c16:	4b16      	ldr	r3, [pc, #88]	; (8004c70 <BSP_LCD_Init+0xcc>)
 8004c18:	2200      	movs	r2, #0
 8004c1a:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8004c1c:	4b14      	ldr	r3, [pc, #80]	; (8004c70 <BSP_LCD_Init+0xcc>)
 8004c1e:	2200      	movs	r2, #0
 8004c20:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8004c22:	4b13      	ldr	r3, [pc, #76]	; (8004c70 <BSP_LCD_Init+0xcc>)
 8004c24:	2200      	movs	r2, #0
 8004c26:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8004c28:	4b11      	ldr	r3, [pc, #68]	; (8004c70 <BSP_LCD_Init+0xcc>)
 8004c2a:	4a12      	ldr	r2, [pc, #72]	; (8004c74 <BSP_LCD_Init+0xd0>)
 8004c2c:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8004c2e:	4810      	ldr	r0, [pc, #64]	; (8004c70 <BSP_LCD_Init+0xcc>)
 8004c30:	f7fd ff62 	bl	8002af8 <HAL_LTDC_GetState>
 8004c34:	4603      	mov	r3, r0
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d103      	bne.n	8004c42 <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8004c3a:	2100      	movs	r1, #0
 8004c3c:	480c      	ldr	r0, [pc, #48]	; (8004c70 <BSP_LCD_Init+0xcc>)
 8004c3e:	f000 fa6d 	bl	800511c <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 8004c42:	480b      	ldr	r0, [pc, #44]	; (8004c70 <BSP_LCD_Init+0xcc>)
 8004c44:	f7fd fd6a 	bl	800271c <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8004c48:	2201      	movs	r2, #1
 8004c4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004c4e:	480a      	ldr	r0, [pc, #40]	; (8004c78 <BSP_LCD_Init+0xd4>)
 8004c50:	f7fd f804 	bl	8001c5c <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8004c54:	2201      	movs	r2, #1
 8004c56:	2108      	movs	r1, #8
 8004c58:	4808      	ldr	r0, [pc, #32]	; (8004c7c <BSP_LCD_Init+0xd8>)
 8004c5a:	f7fc ffff 	bl	8001c5c <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8004c5e:	f000 fc57 	bl	8005510 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8004c62:	4807      	ldr	r0, [pc, #28]	; (8004c80 <BSP_LCD_Init+0xdc>)
 8004c64:	f000 f8a6 	bl	8004db4 <BSP_LCD_SetFont>
  
  return LCD_OK;
 8004c68:	2300      	movs	r3, #0
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	bf00      	nop
 8004c70:	20000360 	.word	0x20000360
 8004c74:	40016800 	.word	0x40016800
 8004c78:	40022000 	.word	0x40022000
 8004c7c:	40022800 	.word	0x40022800
 8004c80:	2000000c 	.word	0x2000000c

08004c84 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8004c84:	b480      	push	{r7}
 8004c86:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8004c88:	4b06      	ldr	r3, [pc, #24]	; (8004ca4 <BSP_LCD_GetXSize+0x20>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a06      	ldr	r2, [pc, #24]	; (8004ca8 <BSP_LCD_GetXSize+0x24>)
 8004c8e:	2134      	movs	r1, #52	; 0x34
 8004c90:	fb01 f303 	mul.w	r3, r1, r3
 8004c94:	4413      	add	r3, r2
 8004c96:	3360      	adds	r3, #96	; 0x60
 8004c98:	681b      	ldr	r3, [r3, #0]
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr
 8004ca4:	20000158 	.word	0x20000158
 8004ca8:	20000360 	.word	0x20000360

08004cac <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8004cac:	b480      	push	{r7}
 8004cae:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8004cb0:	4b06      	ldr	r3, [pc, #24]	; (8004ccc <BSP_LCD_GetYSize+0x20>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a06      	ldr	r2, [pc, #24]	; (8004cd0 <BSP_LCD_GetYSize+0x24>)
 8004cb6:	2134      	movs	r1, #52	; 0x34
 8004cb8:	fb01 f303 	mul.w	r3, r1, r3
 8004cbc:	4413      	add	r3, r2
 8004cbe:	3364      	adds	r3, #100	; 0x64
 8004cc0:	681b      	ldr	r3, [r3, #0]
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr
 8004ccc:	20000158 	.word	0x20000158
 8004cd0:	20000360 	.word	0x20000360

08004cd4 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b090      	sub	sp, #64	; 0x40
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	4603      	mov	r3, r0
 8004cdc:	6039      	str	r1, [r7, #0]
 8004cde:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8004ce4:	f7ff ffce 	bl	8004c84 <BSP_LCD_GetXSize>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8004cec:	2300      	movs	r3, #0
 8004cee:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8004cf0:	f7ff ffdc 	bl	8004cac <BSP_LCD_GetYSize>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 8004d00:	23ff      	movs	r3, #255	; 0xff
 8004d02:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8004d04:	2300      	movs	r3, #0
 8004d06:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 8004d14:	2300      	movs	r3, #0
 8004d16:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8004d1a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004d1e:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8004d20:	2307      	movs	r3, #7
 8004d22:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8004d24:	f7ff ffae 	bl	8004c84 <BSP_LCD_GetXSize>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8004d2c:	f7ff ffbe 	bl	8004cac <BSP_LCD_GetYSize>
 8004d30:	4603      	mov	r3, r0
 8004d32:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8004d34:	88fa      	ldrh	r2, [r7, #6]
 8004d36:	f107 030c 	add.w	r3, r7, #12
 8004d3a:	4619      	mov	r1, r3
 8004d3c:	4812      	ldr	r0, [pc, #72]	; (8004d88 <BSP_LCD_LayerDefaultInit+0xb4>)
 8004d3e:	f7fd fe9d 	bl	8002a7c <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8004d42:	88fa      	ldrh	r2, [r7, #6]
 8004d44:	4911      	ldr	r1, [pc, #68]	; (8004d8c <BSP_LCD_LayerDefaultInit+0xb8>)
 8004d46:	4613      	mov	r3, r2
 8004d48:	005b      	lsls	r3, r3, #1
 8004d4a:	4413      	add	r3, r2
 8004d4c:	009b      	lsls	r3, r3, #2
 8004d4e:	440b      	add	r3, r1
 8004d50:	3304      	adds	r3, #4
 8004d52:	f04f 32ff 	mov.w	r2, #4294967295
 8004d56:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8004d58:	88fa      	ldrh	r2, [r7, #6]
 8004d5a:	490c      	ldr	r1, [pc, #48]	; (8004d8c <BSP_LCD_LayerDefaultInit+0xb8>)
 8004d5c:	4613      	mov	r3, r2
 8004d5e:	005b      	lsls	r3, r3, #1
 8004d60:	4413      	add	r3, r2
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	440b      	add	r3, r1
 8004d66:	3308      	adds	r3, #8
 8004d68:	4a09      	ldr	r2, [pc, #36]	; (8004d90 <BSP_LCD_LayerDefaultInit+0xbc>)
 8004d6a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8004d6c:	88fa      	ldrh	r2, [r7, #6]
 8004d6e:	4907      	ldr	r1, [pc, #28]	; (8004d8c <BSP_LCD_LayerDefaultInit+0xb8>)
 8004d70:	4613      	mov	r3, r2
 8004d72:	005b      	lsls	r3, r3, #1
 8004d74:	4413      	add	r3, r2
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	440b      	add	r3, r1
 8004d7a:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8004d7e:	601a      	str	r2, [r3, #0]
}
 8004d80:	bf00      	nop
 8004d82:	3740      	adds	r7, #64	; 0x40
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}
 8004d88:	20000360 	.word	0x20000360
 8004d8c:	2000015c 	.word	0x2000015c
 8004d90:	2000000c 	.word	0x2000000c

08004d94 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b083      	sub	sp, #12
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8004d9c:	4a04      	ldr	r2, [pc, #16]	; (8004db0 <BSP_LCD_SelectLayer+0x1c>)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6013      	str	r3, [r2, #0]
} 
 8004da2:	bf00      	nop
 8004da4:	370c      	adds	r7, #12
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr
 8004dae:	bf00      	nop
 8004db0:	20000158 	.word	0x20000158

08004db4 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b083      	sub	sp, #12
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8004dbc:	4b08      	ldr	r3, [pc, #32]	; (8004de0 <BSP_LCD_SetFont+0x2c>)
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	4908      	ldr	r1, [pc, #32]	; (8004de4 <BSP_LCD_SetFont+0x30>)
 8004dc2:	4613      	mov	r3, r2
 8004dc4:	005b      	lsls	r3, r3, #1
 8004dc6:	4413      	add	r3, r2
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	440b      	add	r3, r1
 8004dcc:	3308      	adds	r3, #8
 8004dce:	687a      	ldr	r2, [r7, #4]
 8004dd0:	601a      	str	r2, [r3, #0]
}
 8004dd2:	bf00      	nop
 8004dd4:	370c      	adds	r7, #12
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr
 8004dde:	bf00      	nop
 8004de0:	20000158 	.word	0x20000158
 8004de4:	2000015c 	.word	0x2000015c

08004de8 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8004de8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004dea:	b085      	sub	sp, #20
 8004dec:	af02      	add	r7, sp, #8
 8004dee:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8004df0:	4b0f      	ldr	r3, [pc, #60]	; (8004e30 <BSP_LCD_Clear+0x48>)
 8004df2:	681c      	ldr	r4, [r3, #0]
 8004df4:	4b0e      	ldr	r3, [pc, #56]	; (8004e30 <BSP_LCD_Clear+0x48>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a0e      	ldr	r2, [pc, #56]	; (8004e34 <BSP_LCD_Clear+0x4c>)
 8004dfa:	2134      	movs	r1, #52	; 0x34
 8004dfc:	fb01 f303 	mul.w	r3, r1, r3
 8004e00:	4413      	add	r3, r2
 8004e02:	335c      	adds	r3, #92	; 0x5c
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	461e      	mov	r6, r3
 8004e08:	f7ff ff3c 	bl	8004c84 <BSP_LCD_GetXSize>
 8004e0c:	4605      	mov	r5, r0
 8004e0e:	f7ff ff4d 	bl	8004cac <BSP_LCD_GetYSize>
 8004e12:	4602      	mov	r2, r0
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	9301      	str	r3, [sp, #4]
 8004e18:	2300      	movs	r3, #0
 8004e1a:	9300      	str	r3, [sp, #0]
 8004e1c:	4613      	mov	r3, r2
 8004e1e:	462a      	mov	r2, r5
 8004e20:	4631      	mov	r1, r6
 8004e22:	4620      	mov	r0, r4
 8004e24:	f000 fb28 	bl	8005478 <LL_FillBuffer>
}
 8004e28:	bf00      	nop
 8004e2a:	370c      	adds	r7, #12
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e30:	20000158 	.word	0x20000158
 8004e34:	20000360 	.word	0x20000360

08004e38 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8004e38:	b590      	push	{r4, r7, lr}
 8004e3a:	b083      	sub	sp, #12
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	4603      	mov	r3, r0
 8004e40:	80fb      	strh	r3, [r7, #6]
 8004e42:	460b      	mov	r3, r1
 8004e44:	80bb      	strh	r3, [r7, #4]
 8004e46:	4613      	mov	r3, r2
 8004e48:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8004e4a:	4b1b      	ldr	r3, [pc, #108]	; (8004eb8 <BSP_LCD_DisplayChar+0x80>)
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	491b      	ldr	r1, [pc, #108]	; (8004ebc <BSP_LCD_DisplayChar+0x84>)
 8004e50:	4613      	mov	r3, r2
 8004e52:	005b      	lsls	r3, r3, #1
 8004e54:	4413      	add	r3, r2
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	440b      	add	r3, r1
 8004e5a:	3308      	adds	r3, #8
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	6819      	ldr	r1, [r3, #0]
 8004e60:	78fb      	ldrb	r3, [r7, #3]
 8004e62:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8004e66:	4b14      	ldr	r3, [pc, #80]	; (8004eb8 <BSP_LCD_DisplayChar+0x80>)
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	4c14      	ldr	r4, [pc, #80]	; (8004ebc <BSP_LCD_DisplayChar+0x84>)
 8004e6c:	4613      	mov	r3, r2
 8004e6e:	005b      	lsls	r3, r3, #1
 8004e70:	4413      	add	r3, r2
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	4423      	add	r3, r4
 8004e76:	3308      	adds	r3, #8
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8004e7c:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8004e80:	4b0d      	ldr	r3, [pc, #52]	; (8004eb8 <BSP_LCD_DisplayChar+0x80>)
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	4c0d      	ldr	r4, [pc, #52]	; (8004ebc <BSP_LCD_DisplayChar+0x84>)
 8004e86:	4613      	mov	r3, r2
 8004e88:	005b      	lsls	r3, r3, #1
 8004e8a:	4413      	add	r3, r2
 8004e8c:	009b      	lsls	r3, r3, #2
 8004e8e:	4423      	add	r3, r4
 8004e90:	3308      	adds	r3, #8
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	889b      	ldrh	r3, [r3, #4]
 8004e96:	3307      	adds	r3, #7
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	da00      	bge.n	8004e9e <BSP_LCD_DisplayChar+0x66>
 8004e9c:	3307      	adds	r3, #7
 8004e9e:	10db      	asrs	r3, r3, #3
 8004ea0:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8004ea4:	18ca      	adds	r2, r1, r3
 8004ea6:	88b9      	ldrh	r1, [r7, #4]
 8004ea8:	88fb      	ldrh	r3, [r7, #6]
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f000 fa2c 	bl	8005308 <DrawChar>
}
 8004eb0:	bf00      	nop
 8004eb2:	370c      	adds	r7, #12
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd90      	pop	{r4, r7, pc}
 8004eb8:	20000158 	.word	0x20000158
 8004ebc:	2000015c 	.word	0x2000015c

08004ec0 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8004ec0:	b5b0      	push	{r4, r5, r7, lr}
 8004ec2:	b088      	sub	sp, #32
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	60ba      	str	r2, [r7, #8]
 8004ec8:	461a      	mov	r2, r3
 8004eca:	4603      	mov	r3, r0
 8004ecc:	81fb      	strh	r3, [r7, #14]
 8004ece:	460b      	mov	r3, r1
 8004ed0:	81bb      	strh	r3, [r7, #12]
 8004ed2:	4613      	mov	r3, r2
 8004ed4:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	83fb      	strh	r3, [r7, #30]
 8004eda:	2300      	movs	r3, #0
 8004edc:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8004ede:	2300      	movs	r3, #0
 8004ee0:	61bb      	str	r3, [r7, #24]
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8004eea:	e002      	b.n	8004ef2 <BSP_LCD_DisplayStringAt+0x32>
 8004eec:	69bb      	ldr	r3, [r7, #24]
 8004eee:	3301      	adds	r3, #1
 8004ef0:	61bb      	str	r3, [r7, #24]
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	1c5a      	adds	r2, r3, #1
 8004ef6:	617a      	str	r2, [r7, #20]
 8004ef8:	781b      	ldrb	r3, [r3, #0]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d1f6      	bne.n	8004eec <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8004efe:	f7ff fec1 	bl	8004c84 <BSP_LCD_GetXSize>
 8004f02:	4601      	mov	r1, r0
 8004f04:	4b50      	ldr	r3, [pc, #320]	; (8005048 <BSP_LCD_DisplayStringAt+0x188>)
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	4850      	ldr	r0, [pc, #320]	; (800504c <BSP_LCD_DisplayStringAt+0x18c>)
 8004f0a:	4613      	mov	r3, r2
 8004f0c:	005b      	lsls	r3, r3, #1
 8004f0e:	4413      	add	r3, r2
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	4403      	add	r3, r0
 8004f14:	3308      	adds	r3, #8
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	889b      	ldrh	r3, [r3, #4]
 8004f1a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f1e:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8004f20:	79fb      	ldrb	r3, [r7, #7]
 8004f22:	2b03      	cmp	r3, #3
 8004f24:	d01c      	beq.n	8004f60 <BSP_LCD_DisplayStringAt+0xa0>
 8004f26:	2b03      	cmp	r3, #3
 8004f28:	dc33      	bgt.n	8004f92 <BSP_LCD_DisplayStringAt+0xd2>
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d002      	beq.n	8004f34 <BSP_LCD_DisplayStringAt+0x74>
 8004f2e:	2b02      	cmp	r3, #2
 8004f30:	d019      	beq.n	8004f66 <BSP_LCD_DisplayStringAt+0xa6>
 8004f32:	e02e      	b.n	8004f92 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8004f34:	693a      	ldr	r2, [r7, #16]
 8004f36:	69bb      	ldr	r3, [r7, #24]
 8004f38:	1ad1      	subs	r1, r2, r3
 8004f3a:	4b43      	ldr	r3, [pc, #268]	; (8005048 <BSP_LCD_DisplayStringAt+0x188>)
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	4843      	ldr	r0, [pc, #268]	; (800504c <BSP_LCD_DisplayStringAt+0x18c>)
 8004f40:	4613      	mov	r3, r2
 8004f42:	005b      	lsls	r3, r3, #1
 8004f44:	4413      	add	r3, r2
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	4403      	add	r3, r0
 8004f4a:	3308      	adds	r3, #8
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	889b      	ldrh	r3, [r3, #4]
 8004f50:	fb03 f301 	mul.w	r3, r3, r1
 8004f54:	085b      	lsrs	r3, r3, #1
 8004f56:	b29a      	uxth	r2, r3
 8004f58:	89fb      	ldrh	r3, [r7, #14]
 8004f5a:	4413      	add	r3, r2
 8004f5c:	83fb      	strh	r3, [r7, #30]
      break;
 8004f5e:	e01b      	b.n	8004f98 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8004f60:	89fb      	ldrh	r3, [r7, #14]
 8004f62:	83fb      	strh	r3, [r7, #30]
      break;
 8004f64:	e018      	b.n	8004f98 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8004f66:	693a      	ldr	r2, [r7, #16]
 8004f68:	69bb      	ldr	r3, [r7, #24]
 8004f6a:	1ad3      	subs	r3, r2, r3
 8004f6c:	b299      	uxth	r1, r3
 8004f6e:	4b36      	ldr	r3, [pc, #216]	; (8005048 <BSP_LCD_DisplayStringAt+0x188>)
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	4836      	ldr	r0, [pc, #216]	; (800504c <BSP_LCD_DisplayStringAt+0x18c>)
 8004f74:	4613      	mov	r3, r2
 8004f76:	005b      	lsls	r3, r3, #1
 8004f78:	4413      	add	r3, r2
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	4403      	add	r3, r0
 8004f7e:	3308      	adds	r3, #8
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	889b      	ldrh	r3, [r3, #4]
 8004f84:	fb11 f303 	smulbb	r3, r1, r3
 8004f88:	b29a      	uxth	r2, r3
 8004f8a:	89fb      	ldrh	r3, [r7, #14]
 8004f8c:	1ad3      	subs	r3, r2, r3
 8004f8e:	83fb      	strh	r3, [r7, #30]
      break;
 8004f90:	e002      	b.n	8004f98 <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 8004f92:	89fb      	ldrh	r3, [r7, #14]
 8004f94:	83fb      	strh	r3, [r7, #30]
      break;
 8004f96:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8004f98:	8bfb      	ldrh	r3, [r7, #30]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d003      	beq.n	8004fa6 <BSP_LCD_DisplayStringAt+0xe6>
 8004f9e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	da1d      	bge.n	8004fe2 <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8004faa:	e01a      	b.n	8004fe2 <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	781a      	ldrb	r2, [r3, #0]
 8004fb0:	89b9      	ldrh	r1, [r7, #12]
 8004fb2:	8bfb      	ldrh	r3, [r7, #30]
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	f7ff ff3f 	bl	8004e38 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8004fba:	4b23      	ldr	r3, [pc, #140]	; (8005048 <BSP_LCD_DisplayStringAt+0x188>)
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	4923      	ldr	r1, [pc, #140]	; (800504c <BSP_LCD_DisplayStringAt+0x18c>)
 8004fc0:	4613      	mov	r3, r2
 8004fc2:	005b      	lsls	r3, r3, #1
 8004fc4:	4413      	add	r3, r2
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	440b      	add	r3, r1
 8004fca:	3308      	adds	r3, #8
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	889a      	ldrh	r2, [r3, #4]
 8004fd0:	8bfb      	ldrh	r3, [r7, #30]
 8004fd2:	4413      	add	r3, r2
 8004fd4:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	3301      	adds	r3, #1
 8004fda:	60bb      	str	r3, [r7, #8]
    i++;
 8004fdc:	8bbb      	ldrh	r3, [r7, #28]
 8004fde:	3301      	adds	r3, #1
 8004fe0:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	781b      	ldrb	r3, [r3, #0]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	bf14      	ite	ne
 8004fea:	2301      	movne	r3, #1
 8004fec:	2300      	moveq	r3, #0
 8004fee:	b2dc      	uxtb	r4, r3
 8004ff0:	f7ff fe48 	bl	8004c84 <BSP_LCD_GetXSize>
 8004ff4:	8bb9      	ldrh	r1, [r7, #28]
 8004ff6:	4b14      	ldr	r3, [pc, #80]	; (8005048 <BSP_LCD_DisplayStringAt+0x188>)
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	4d14      	ldr	r5, [pc, #80]	; (800504c <BSP_LCD_DisplayStringAt+0x18c>)
 8004ffc:	4613      	mov	r3, r2
 8004ffe:	005b      	lsls	r3, r3, #1
 8005000:	4413      	add	r3, r2
 8005002:	009b      	lsls	r3, r3, #2
 8005004:	442b      	add	r3, r5
 8005006:	3308      	adds	r3, #8
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	889b      	ldrh	r3, [r3, #4]
 800500c:	fb03 f301 	mul.w	r3, r3, r1
 8005010:	1ac3      	subs	r3, r0, r3
 8005012:	b299      	uxth	r1, r3
 8005014:	4b0c      	ldr	r3, [pc, #48]	; (8005048 <BSP_LCD_DisplayStringAt+0x188>)
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	480c      	ldr	r0, [pc, #48]	; (800504c <BSP_LCD_DisplayStringAt+0x18c>)
 800501a:	4613      	mov	r3, r2
 800501c:	005b      	lsls	r3, r3, #1
 800501e:	4413      	add	r3, r2
 8005020:	009b      	lsls	r3, r3, #2
 8005022:	4403      	add	r3, r0
 8005024:	3308      	adds	r3, #8
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	889b      	ldrh	r3, [r3, #4]
 800502a:	4299      	cmp	r1, r3
 800502c:	bf2c      	ite	cs
 800502e:	2301      	movcs	r3, #1
 8005030:	2300      	movcc	r3, #0
 8005032:	b2db      	uxtb	r3, r3
 8005034:	4023      	ands	r3, r4
 8005036:	b2db      	uxtb	r3, r3
 8005038:	2b00      	cmp	r3, #0
 800503a:	d1b7      	bne.n	8004fac <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 800503c:	bf00      	nop
 800503e:	bf00      	nop
 8005040:	3720      	adds	r7, #32
 8005042:	46bd      	mov	sp, r7
 8005044:	bdb0      	pop	{r4, r5, r7, pc}
 8005046:	bf00      	nop
 8005048:	20000158 	.word	0x20000158
 800504c:	2000015c 	.word	0x2000015c

08005050 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8005050:	b5b0      	push	{r4, r5, r7, lr}
 8005052:	b082      	sub	sp, #8
 8005054:	af00      	add	r7, sp, #0
 8005056:	4603      	mov	r3, r0
 8005058:	603a      	str	r2, [r7, #0]
 800505a:	80fb      	strh	r3, [r7, #6]
 800505c:	460b      	mov	r3, r1
 800505e:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8005060:	4b1d      	ldr	r3, [pc, #116]	; (80050d8 <BSP_LCD_DrawPixel+0x88>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a1d      	ldr	r2, [pc, #116]	; (80050dc <BSP_LCD_DrawPixel+0x8c>)
 8005066:	2134      	movs	r1, #52	; 0x34
 8005068:	fb01 f303 	mul.w	r3, r1, r3
 800506c:	4413      	add	r3, r2
 800506e:	3348      	adds	r3, #72	; 0x48
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	2b02      	cmp	r3, #2
 8005074:	d116      	bne.n	80050a4 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8005076:	4b18      	ldr	r3, [pc, #96]	; (80050d8 <BSP_LCD_DrawPixel+0x88>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a18      	ldr	r2, [pc, #96]	; (80050dc <BSP_LCD_DrawPixel+0x8c>)
 800507c:	2134      	movs	r1, #52	; 0x34
 800507e:	fb01 f303 	mul.w	r3, r1, r3
 8005082:	4413      	add	r3, r2
 8005084:	335c      	adds	r3, #92	; 0x5c
 8005086:	681c      	ldr	r4, [r3, #0]
 8005088:	88bd      	ldrh	r5, [r7, #4]
 800508a:	f7ff fdfb 	bl	8004c84 <BSP_LCD_GetXSize>
 800508e:	4603      	mov	r3, r0
 8005090:	fb03 f205 	mul.w	r2, r3, r5
 8005094:	88fb      	ldrh	r3, [r7, #6]
 8005096:	4413      	add	r3, r2
 8005098:	005b      	lsls	r3, r3, #1
 800509a:	4423      	add	r3, r4
 800509c:	683a      	ldr	r2, [r7, #0]
 800509e:	b292      	uxth	r2, r2
 80050a0:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 80050a2:	e015      	b.n	80050d0 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80050a4:	4b0c      	ldr	r3, [pc, #48]	; (80050d8 <BSP_LCD_DrawPixel+0x88>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a0c      	ldr	r2, [pc, #48]	; (80050dc <BSP_LCD_DrawPixel+0x8c>)
 80050aa:	2134      	movs	r1, #52	; 0x34
 80050ac:	fb01 f303 	mul.w	r3, r1, r3
 80050b0:	4413      	add	r3, r2
 80050b2:	335c      	adds	r3, #92	; 0x5c
 80050b4:	681c      	ldr	r4, [r3, #0]
 80050b6:	88bd      	ldrh	r5, [r7, #4]
 80050b8:	f7ff fde4 	bl	8004c84 <BSP_LCD_GetXSize>
 80050bc:	4603      	mov	r3, r0
 80050be:	fb03 f205 	mul.w	r2, r3, r5
 80050c2:	88fb      	ldrh	r3, [r7, #6]
 80050c4:	4413      	add	r3, r2
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	4423      	add	r3, r4
 80050ca:	461a      	mov	r2, r3
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	6013      	str	r3, [r2, #0]
}
 80050d0:	bf00      	nop
 80050d2:	3708      	adds	r7, #8
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bdb0      	pop	{r4, r5, r7, pc}
 80050d8:	20000158 	.word	0x20000158
 80050dc:	20000360 	.word	0x20000360

080050e0 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 80050e4:	4b0a      	ldr	r3, [pc, #40]	; (8005110 <BSP_LCD_DisplayOn+0x30>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	699a      	ldr	r2, [r3, #24]
 80050ea:	4b09      	ldr	r3, [pc, #36]	; (8005110 <BSP_LCD_DisplayOn+0x30>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f042 0201 	orr.w	r2, r2, #1
 80050f2:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 80050f4:	2201      	movs	r2, #1
 80050f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80050fa:	4806      	ldr	r0, [pc, #24]	; (8005114 <BSP_LCD_DisplayOn+0x34>)
 80050fc:	f7fc fdae 	bl	8001c5c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8005100:	2201      	movs	r2, #1
 8005102:	2108      	movs	r1, #8
 8005104:	4804      	ldr	r0, [pc, #16]	; (8005118 <BSP_LCD_DisplayOn+0x38>)
 8005106:	f7fc fda9 	bl	8001c5c <HAL_GPIO_WritePin>
}
 800510a:	bf00      	nop
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	20000360 	.word	0x20000360
 8005114:	40022000 	.word	0x40022000
 8005118:	40022800 	.word	0x40022800

0800511c <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b090      	sub	sp, #64	; 0x40
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8005126:	4b64      	ldr	r3, [pc, #400]	; (80052b8 <BSP_LCD_MspInit+0x19c>)
 8005128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800512a:	4a63      	ldr	r2, [pc, #396]	; (80052b8 <BSP_LCD_MspInit+0x19c>)
 800512c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005130:	6453      	str	r3, [r2, #68]	; 0x44
 8005132:	4b61      	ldr	r3, [pc, #388]	; (80052b8 <BSP_LCD_MspInit+0x19c>)
 8005134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005136:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800513a:	62bb      	str	r3, [r7, #40]	; 0x28
 800513c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 800513e:	4b5e      	ldr	r3, [pc, #376]	; (80052b8 <BSP_LCD_MspInit+0x19c>)
 8005140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005142:	4a5d      	ldr	r2, [pc, #372]	; (80052b8 <BSP_LCD_MspInit+0x19c>)
 8005144:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005148:	6313      	str	r3, [r2, #48]	; 0x30
 800514a:	4b5b      	ldr	r3, [pc, #364]	; (80052b8 <BSP_LCD_MspInit+0x19c>)
 800514c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800514e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005152:	627b      	str	r3, [r7, #36]	; 0x24
 8005154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005156:	4b58      	ldr	r3, [pc, #352]	; (80052b8 <BSP_LCD_MspInit+0x19c>)
 8005158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800515a:	4a57      	ldr	r2, [pc, #348]	; (80052b8 <BSP_LCD_MspInit+0x19c>)
 800515c:	f043 0310 	orr.w	r3, r3, #16
 8005160:	6313      	str	r3, [r2, #48]	; 0x30
 8005162:	4b55      	ldr	r3, [pc, #340]	; (80052b8 <BSP_LCD_MspInit+0x19c>)
 8005164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005166:	f003 0310 	and.w	r3, r3, #16
 800516a:	623b      	str	r3, [r7, #32]
 800516c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800516e:	4b52      	ldr	r3, [pc, #328]	; (80052b8 <BSP_LCD_MspInit+0x19c>)
 8005170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005172:	4a51      	ldr	r2, [pc, #324]	; (80052b8 <BSP_LCD_MspInit+0x19c>)
 8005174:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005178:	6313      	str	r3, [r2, #48]	; 0x30
 800517a:	4b4f      	ldr	r3, [pc, #316]	; (80052b8 <BSP_LCD_MspInit+0x19c>)
 800517c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800517e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005182:	61fb      	str	r3, [r7, #28]
 8005184:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8005186:	4b4c      	ldr	r3, [pc, #304]	; (80052b8 <BSP_LCD_MspInit+0x19c>)
 8005188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800518a:	4a4b      	ldr	r2, [pc, #300]	; (80052b8 <BSP_LCD_MspInit+0x19c>)
 800518c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005190:	6313      	str	r3, [r2, #48]	; 0x30
 8005192:	4b49      	ldr	r3, [pc, #292]	; (80052b8 <BSP_LCD_MspInit+0x19c>)
 8005194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800519a:	61bb      	str	r3, [r7, #24]
 800519c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800519e:	4b46      	ldr	r3, [pc, #280]	; (80052b8 <BSP_LCD_MspInit+0x19c>)
 80051a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051a2:	4a45      	ldr	r2, [pc, #276]	; (80052b8 <BSP_LCD_MspInit+0x19c>)
 80051a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80051a8:	6313      	str	r3, [r2, #48]	; 0x30
 80051aa:	4b43      	ldr	r3, [pc, #268]	; (80052b8 <BSP_LCD_MspInit+0x19c>)
 80051ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051b2:	617b      	str	r3, [r7, #20]
 80051b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80051b6:	4b40      	ldr	r3, [pc, #256]	; (80052b8 <BSP_LCD_MspInit+0x19c>)
 80051b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ba:	4a3f      	ldr	r2, [pc, #252]	; (80052b8 <BSP_LCD_MspInit+0x19c>)
 80051bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80051c0:	6313      	str	r3, [r2, #48]	; 0x30
 80051c2:	4b3d      	ldr	r3, [pc, #244]	; (80052b8 <BSP_LCD_MspInit+0x19c>)
 80051c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051ca:	613b      	str	r3, [r7, #16]
 80051cc:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 80051ce:	4b3a      	ldr	r3, [pc, #232]	; (80052b8 <BSP_LCD_MspInit+0x19c>)
 80051d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051d2:	4a39      	ldr	r2, [pc, #228]	; (80052b8 <BSP_LCD_MspInit+0x19c>)
 80051d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051d8:	6313      	str	r3, [r2, #48]	; 0x30
 80051da:	4b37      	ldr	r3, [pc, #220]	; (80052b8 <BSP_LCD_MspInit+0x19c>)
 80051dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051e2:	60fb      	str	r3, [r7, #12]
 80051e4:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 80051e6:	4b34      	ldr	r3, [pc, #208]	; (80052b8 <BSP_LCD_MspInit+0x19c>)
 80051e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ea:	4a33      	ldr	r2, [pc, #204]	; (80052b8 <BSP_LCD_MspInit+0x19c>)
 80051ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80051f0:	6313      	str	r3, [r2, #48]	; 0x30
 80051f2:	4b31      	ldr	r3, [pc, #196]	; (80052b8 <BSP_LCD_MspInit+0x19c>)
 80051f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051fa:	60bb      	str	r3, [r7, #8]
 80051fc:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 80051fe:	2310      	movs	r3, #16
 8005200:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8005202:	2302      	movs	r3, #2
 8005204:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8005206:	2300      	movs	r3, #0
 8005208:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800520a:	2302      	movs	r3, #2
 800520c:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 800520e:	230e      	movs	r3, #14
 8005210:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8005212:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005216:	4619      	mov	r1, r3
 8005218:	4828      	ldr	r0, [pc, #160]	; (80052bc <BSP_LCD_MspInit+0x1a0>)
 800521a:	f7fc fb73 	bl	8001904 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 800521e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005222:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8005224:	2302      	movs	r3, #2
 8005226:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8005228:	2309      	movs	r3, #9
 800522a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800522c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005230:	4619      	mov	r1, r3
 8005232:	4823      	ldr	r0, [pc, #140]	; (80052c0 <BSP_LCD_MspInit+0x1a4>)
 8005234:	f7fc fb66 	bl	8001904 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8005238:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 800523c:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800523e:	2302      	movs	r3, #2
 8005240:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8005242:	230e      	movs	r3, #14
 8005244:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8005246:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800524a:	4619      	mov	r1, r3
 800524c:	481d      	ldr	r0, [pc, #116]	; (80052c4 <BSP_LCD_MspInit+0x1a8>)
 800524e:	f7fc fb59 	bl	8001904 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8005252:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8005256:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8005258:	2302      	movs	r3, #2
 800525a:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800525c:	230e      	movs	r3, #14
 800525e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8005260:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005264:	4619      	mov	r1, r3
 8005266:	4818      	ldr	r0, [pc, #96]	; (80052c8 <BSP_LCD_MspInit+0x1ac>)
 8005268:	f7fc fb4c 	bl	8001904 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 800526c:	23f7      	movs	r3, #247	; 0xf7
 800526e:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8005270:	2302      	movs	r3, #2
 8005272:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8005274:	230e      	movs	r3, #14
 8005276:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8005278:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800527c:	4619      	mov	r1, r3
 800527e:	4813      	ldr	r0, [pc, #76]	; (80052cc <BSP_LCD_MspInit+0x1b0>)
 8005280:	f7fc fb40 	bl	8001904 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8005284:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005288:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800528a:	2301      	movs	r3, #1
 800528c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 800528e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005292:	4619      	mov	r1, r3
 8005294:	480b      	ldr	r0, [pc, #44]	; (80052c4 <BSP_LCD_MspInit+0x1a8>)
 8005296:	f7fc fb35 	bl	8001904 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 800529a:	2308      	movs	r3, #8
 800529c:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800529e:	2301      	movs	r3, #1
 80052a0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 80052a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80052a6:	4619      	mov	r1, r3
 80052a8:	4808      	ldr	r0, [pc, #32]	; (80052cc <BSP_LCD_MspInit+0x1b0>)
 80052aa:	f7fc fb2b 	bl	8001904 <HAL_GPIO_Init>
}
 80052ae:	bf00      	nop
 80052b0:	3740      	adds	r7, #64	; 0x40
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}
 80052b6:	bf00      	nop
 80052b8:	40023800 	.word	0x40023800
 80052bc:	40021000 	.word	0x40021000
 80052c0:	40021800 	.word	0x40021800
 80052c4:	40022000 	.word	0x40022000
 80052c8:	40022400 	.word	0x40022400
 80052cc:	40022800 	.word	0x40022800

080052d0 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b082      	sub	sp, #8
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
 80052d8:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80052da:	4b0a      	ldr	r3, [pc, #40]	; (8005304 <BSP_LCD_ClockConfig+0x34>)
 80052dc:	2208      	movs	r2, #8
 80052de:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 80052e0:	4b08      	ldr	r3, [pc, #32]	; (8005304 <BSP_LCD_ClockConfig+0x34>)
 80052e2:	22c0      	movs	r2, #192	; 0xc0
 80052e4:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 80052e6:	4b07      	ldr	r3, [pc, #28]	; (8005304 <BSP_LCD_ClockConfig+0x34>)
 80052e8:	2205      	movs	r2, #5
 80052ea:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 80052ec:	4b05      	ldr	r3, [pc, #20]	; (8005304 <BSP_LCD_ClockConfig+0x34>)
 80052ee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80052f2:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 80052f4:	4803      	ldr	r0, [pc, #12]	; (8005304 <BSP_LCD_ClockConfig+0x34>)
 80052f6:	f7fe fa6f 	bl	80037d8 <HAL_RCCEx_PeriphCLKConfig>
}
 80052fa:	bf00      	nop
 80052fc:	3708      	adds	r7, #8
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}
 8005302:	bf00      	nop
 8005304:	20000174 	.word	0x20000174

08005308 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b088      	sub	sp, #32
 800530c:	af00      	add	r7, sp, #0
 800530e:	4603      	mov	r3, r0
 8005310:	603a      	str	r2, [r7, #0]
 8005312:	80fb      	strh	r3, [r7, #6]
 8005314:	460b      	mov	r3, r1
 8005316:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8005318:	2300      	movs	r3, #0
 800531a:	61fb      	str	r3, [r7, #28]
 800531c:	2300      	movs	r3, #0
 800531e:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 8005320:	4b53      	ldr	r3, [pc, #332]	; (8005470 <DrawChar+0x168>)
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	4953      	ldr	r1, [pc, #332]	; (8005474 <DrawChar+0x16c>)
 8005326:	4613      	mov	r3, r2
 8005328:	005b      	lsls	r3, r3, #1
 800532a:	4413      	add	r3, r2
 800532c:	009b      	lsls	r3, r3, #2
 800532e:	440b      	add	r3, r1
 8005330:	3308      	adds	r3, #8
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	88db      	ldrh	r3, [r3, #6]
 8005336:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8005338:	4b4d      	ldr	r3, [pc, #308]	; (8005470 <DrawChar+0x168>)
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	494d      	ldr	r1, [pc, #308]	; (8005474 <DrawChar+0x16c>)
 800533e:	4613      	mov	r3, r2
 8005340:	005b      	lsls	r3, r3, #1
 8005342:	4413      	add	r3, r2
 8005344:	009b      	lsls	r3, r3, #2
 8005346:	440b      	add	r3, r1
 8005348:	3308      	adds	r3, #8
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	889b      	ldrh	r3, [r3, #4]
 800534e:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8005350:	8a3b      	ldrh	r3, [r7, #16]
 8005352:	3307      	adds	r3, #7
 8005354:	2b00      	cmp	r3, #0
 8005356:	da00      	bge.n	800535a <DrawChar+0x52>
 8005358:	3307      	adds	r3, #7
 800535a:	10db      	asrs	r3, r3, #3
 800535c:	b2db      	uxtb	r3, r3
 800535e:	00db      	lsls	r3, r3, #3
 8005360:	b2da      	uxtb	r2, r3
 8005362:	8a3b      	ldrh	r3, [r7, #16]
 8005364:	b2db      	uxtb	r3, r3
 8005366:	1ad3      	subs	r3, r2, r3
 8005368:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 800536a:	2300      	movs	r3, #0
 800536c:	61fb      	str	r3, [r7, #28]
 800536e:	e076      	b.n	800545e <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8005370:	8a3b      	ldrh	r3, [r7, #16]
 8005372:	3307      	adds	r3, #7
 8005374:	2b00      	cmp	r3, #0
 8005376:	da00      	bge.n	800537a <DrawChar+0x72>
 8005378:	3307      	adds	r3, #7
 800537a:	10db      	asrs	r3, r3, #3
 800537c:	461a      	mov	r2, r3
 800537e:	69fb      	ldr	r3, [r7, #28]
 8005380:	fb03 f302 	mul.w	r3, r3, r2
 8005384:	683a      	ldr	r2, [r7, #0]
 8005386:	4413      	add	r3, r2
 8005388:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 800538a:	8a3b      	ldrh	r3, [r7, #16]
 800538c:	3307      	adds	r3, #7
 800538e:	2b00      	cmp	r3, #0
 8005390:	da00      	bge.n	8005394 <DrawChar+0x8c>
 8005392:	3307      	adds	r3, #7
 8005394:	10db      	asrs	r3, r3, #3
 8005396:	2b01      	cmp	r3, #1
 8005398:	d002      	beq.n	80053a0 <DrawChar+0x98>
 800539a:	2b02      	cmp	r3, #2
 800539c:	d004      	beq.n	80053a8 <DrawChar+0xa0>
 800539e:	e00c      	b.n	80053ba <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	617b      	str	r3, [r7, #20]
      break;
 80053a6:	e016      	b.n	80053d6 <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	021b      	lsls	r3, r3, #8
 80053ae:	68ba      	ldr	r2, [r7, #8]
 80053b0:	3201      	adds	r2, #1
 80053b2:	7812      	ldrb	r2, [r2, #0]
 80053b4:	4313      	orrs	r3, r2
 80053b6:	617b      	str	r3, [r7, #20]
      break;
 80053b8:	e00d      	b.n	80053d6 <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	781b      	ldrb	r3, [r3, #0]
 80053be:	041a      	lsls	r2, r3, #16
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	3301      	adds	r3, #1
 80053c4:	781b      	ldrb	r3, [r3, #0]
 80053c6:	021b      	lsls	r3, r3, #8
 80053c8:	4313      	orrs	r3, r2
 80053ca:	68ba      	ldr	r2, [r7, #8]
 80053cc:	3202      	adds	r2, #2
 80053ce:	7812      	ldrb	r2, [r2, #0]
 80053d0:	4313      	orrs	r3, r2
 80053d2:	617b      	str	r3, [r7, #20]
      break;
 80053d4:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 80053d6:	2300      	movs	r3, #0
 80053d8:	61bb      	str	r3, [r7, #24]
 80053da:	e036      	b.n	800544a <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 80053dc:	8a3a      	ldrh	r2, [r7, #16]
 80053de:	69bb      	ldr	r3, [r7, #24]
 80053e0:	1ad2      	subs	r2, r2, r3
 80053e2:	7bfb      	ldrb	r3, [r7, #15]
 80053e4:	4413      	add	r3, r2
 80053e6:	3b01      	subs	r3, #1
 80053e8:	2201      	movs	r2, #1
 80053ea:	fa02 f303 	lsl.w	r3, r2, r3
 80053ee:	461a      	mov	r2, r3
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	4013      	ands	r3, r2
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d012      	beq.n	800541e <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 80053f8:	69bb      	ldr	r3, [r7, #24]
 80053fa:	b29a      	uxth	r2, r3
 80053fc:	88fb      	ldrh	r3, [r7, #6]
 80053fe:	4413      	add	r3, r2
 8005400:	b298      	uxth	r0, r3
 8005402:	4b1b      	ldr	r3, [pc, #108]	; (8005470 <DrawChar+0x168>)
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	491b      	ldr	r1, [pc, #108]	; (8005474 <DrawChar+0x16c>)
 8005408:	4613      	mov	r3, r2
 800540a:	005b      	lsls	r3, r3, #1
 800540c:	4413      	add	r3, r2
 800540e:	009b      	lsls	r3, r3, #2
 8005410:	440b      	add	r3, r1
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	88bb      	ldrh	r3, [r7, #4]
 8005416:	4619      	mov	r1, r3
 8005418:	f7ff fe1a 	bl	8005050 <BSP_LCD_DrawPixel>
 800541c:	e012      	b.n	8005444 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 800541e:	69bb      	ldr	r3, [r7, #24]
 8005420:	b29a      	uxth	r2, r3
 8005422:	88fb      	ldrh	r3, [r7, #6]
 8005424:	4413      	add	r3, r2
 8005426:	b298      	uxth	r0, r3
 8005428:	4b11      	ldr	r3, [pc, #68]	; (8005470 <DrawChar+0x168>)
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	4911      	ldr	r1, [pc, #68]	; (8005474 <DrawChar+0x16c>)
 800542e:	4613      	mov	r3, r2
 8005430:	005b      	lsls	r3, r3, #1
 8005432:	4413      	add	r3, r2
 8005434:	009b      	lsls	r3, r3, #2
 8005436:	440b      	add	r3, r1
 8005438:	3304      	adds	r3, #4
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	88bb      	ldrh	r3, [r7, #4]
 800543e:	4619      	mov	r1, r3
 8005440:	f7ff fe06 	bl	8005050 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8005444:	69bb      	ldr	r3, [r7, #24]
 8005446:	3301      	adds	r3, #1
 8005448:	61bb      	str	r3, [r7, #24]
 800544a:	8a3b      	ldrh	r3, [r7, #16]
 800544c:	69ba      	ldr	r2, [r7, #24]
 800544e:	429a      	cmp	r2, r3
 8005450:	d3c4      	bcc.n	80053dc <DrawChar+0xd4>
      } 
    }
    Ypos++;
 8005452:	88bb      	ldrh	r3, [r7, #4]
 8005454:	3301      	adds	r3, #1
 8005456:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8005458:	69fb      	ldr	r3, [r7, #28]
 800545a:	3301      	adds	r3, #1
 800545c:	61fb      	str	r3, [r7, #28]
 800545e:	8a7b      	ldrh	r3, [r7, #18]
 8005460:	69fa      	ldr	r2, [r7, #28]
 8005462:	429a      	cmp	r2, r3
 8005464:	d384      	bcc.n	8005370 <DrawChar+0x68>
  }
}
 8005466:	bf00      	nop
 8005468:	bf00      	nop
 800546a:	3720      	adds	r7, #32
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}
 8005470:	20000158 	.word	0x20000158
 8005474:	2000015c 	.word	0x2000015c

08005478 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b086      	sub	sp, #24
 800547c:	af02      	add	r7, sp, #8
 800547e:	60f8      	str	r0, [r7, #12]
 8005480:	60b9      	str	r1, [r7, #8]
 8005482:	607a      	str	r2, [r7, #4]
 8005484:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8005486:	4b1e      	ldr	r3, [pc, #120]	; (8005500 <LL_FillBuffer+0x88>)
 8005488:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800548c:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800548e:	4b1d      	ldr	r3, [pc, #116]	; (8005504 <LL_FillBuffer+0x8c>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a1d      	ldr	r2, [pc, #116]	; (8005508 <LL_FillBuffer+0x90>)
 8005494:	2134      	movs	r1, #52	; 0x34
 8005496:	fb01 f303 	mul.w	r3, r1, r3
 800549a:	4413      	add	r3, r2
 800549c:	3348      	adds	r3, #72	; 0x48
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	2b02      	cmp	r3, #2
 80054a2:	d103      	bne.n	80054ac <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 80054a4:	4b16      	ldr	r3, [pc, #88]	; (8005500 <LL_FillBuffer+0x88>)
 80054a6:	2202      	movs	r2, #2
 80054a8:	609a      	str	r2, [r3, #8]
 80054aa:	e002      	b.n	80054b2 <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80054ac:	4b14      	ldr	r3, [pc, #80]	; (8005500 <LL_FillBuffer+0x88>)
 80054ae:	2200      	movs	r2, #0
 80054b0:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 80054b2:	4a13      	ldr	r2, [pc, #76]	; (8005500 <LL_FillBuffer+0x88>)
 80054b4:	69bb      	ldr	r3, [r7, #24]
 80054b6:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 80054b8:	4b11      	ldr	r3, [pc, #68]	; (8005500 <LL_FillBuffer+0x88>)
 80054ba:	4a14      	ldr	r2, [pc, #80]	; (800550c <LL_FillBuffer+0x94>)
 80054bc:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 80054be:	4810      	ldr	r0, [pc, #64]	; (8005500 <LL_FillBuffer+0x88>)
 80054c0:	f7fb ff94 	bl	80013ec <HAL_DMA2D_Init>
 80054c4:	4603      	mov	r3, r0
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d115      	bne.n	80054f6 <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 80054ca:	68f9      	ldr	r1, [r7, #12]
 80054cc:	480c      	ldr	r0, [pc, #48]	; (8005500 <LL_FillBuffer+0x88>)
 80054ce:	f7fc f8eb 	bl	80016a8 <HAL_DMA2D_ConfigLayer>
 80054d2:	4603      	mov	r3, r0
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d10e      	bne.n	80054f6 <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80054d8:	68ba      	ldr	r2, [r7, #8]
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	9300      	str	r3, [sp, #0]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	69f9      	ldr	r1, [r7, #28]
 80054e2:	4807      	ldr	r0, [pc, #28]	; (8005500 <LL_FillBuffer+0x88>)
 80054e4:	f7fb ffcc 	bl	8001480 <HAL_DMA2D_Start>
 80054e8:	4603      	mov	r3, r0
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d103      	bne.n	80054f6 <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 80054ee:	210a      	movs	r1, #10
 80054f0:	4803      	ldr	r0, [pc, #12]	; (8005500 <LL_FillBuffer+0x88>)
 80054f2:	f7fb fff0 	bl	80014d6 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 80054f6:	bf00      	nop
 80054f8:	3710      	adds	r7, #16
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}
 80054fe:	bf00      	nop
 8005500:	20000118 	.word	0x20000118
 8005504:	20000158 	.word	0x20000158
 8005508:	20000360 	.word	0x20000360
 800550c:	4002b000 	.word	0x4002b000

08005510 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8005510:	b580      	push	{r7, lr}
 8005512:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8005514:	4b29      	ldr	r3, [pc, #164]	; (80055bc <BSP_SDRAM_Init+0xac>)
 8005516:	4a2a      	ldr	r2, [pc, #168]	; (80055c0 <BSP_SDRAM_Init+0xb0>)
 8005518:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 800551a:	4b2a      	ldr	r3, [pc, #168]	; (80055c4 <BSP_SDRAM_Init+0xb4>)
 800551c:	2202      	movs	r2, #2
 800551e:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8005520:	4b28      	ldr	r3, [pc, #160]	; (80055c4 <BSP_SDRAM_Init+0xb4>)
 8005522:	2207      	movs	r2, #7
 8005524:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8005526:	4b27      	ldr	r3, [pc, #156]	; (80055c4 <BSP_SDRAM_Init+0xb4>)
 8005528:	2204      	movs	r2, #4
 800552a:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 800552c:	4b25      	ldr	r3, [pc, #148]	; (80055c4 <BSP_SDRAM_Init+0xb4>)
 800552e:	2207      	movs	r2, #7
 8005530:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8005532:	4b24      	ldr	r3, [pc, #144]	; (80055c4 <BSP_SDRAM_Init+0xb4>)
 8005534:	2202      	movs	r2, #2
 8005536:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8005538:	4b22      	ldr	r3, [pc, #136]	; (80055c4 <BSP_SDRAM_Init+0xb4>)
 800553a:	2202      	movs	r2, #2
 800553c:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 800553e:	4b21      	ldr	r3, [pc, #132]	; (80055c4 <BSP_SDRAM_Init+0xb4>)
 8005540:	2202      	movs	r2, #2
 8005542:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8005544:	4b1d      	ldr	r3, [pc, #116]	; (80055bc <BSP_SDRAM_Init+0xac>)
 8005546:	2200      	movs	r2, #0
 8005548:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800554a:	4b1c      	ldr	r3, [pc, #112]	; (80055bc <BSP_SDRAM_Init+0xac>)
 800554c:	2200      	movs	r2, #0
 800554e:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8005550:	4b1a      	ldr	r3, [pc, #104]	; (80055bc <BSP_SDRAM_Init+0xac>)
 8005552:	2204      	movs	r2, #4
 8005554:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8005556:	4b19      	ldr	r3, [pc, #100]	; (80055bc <BSP_SDRAM_Init+0xac>)
 8005558:	2210      	movs	r2, #16
 800555a:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800555c:	4b17      	ldr	r3, [pc, #92]	; (80055bc <BSP_SDRAM_Init+0xac>)
 800555e:	2240      	movs	r2, #64	; 0x40
 8005560:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8005562:	4b16      	ldr	r3, [pc, #88]	; (80055bc <BSP_SDRAM_Init+0xac>)
 8005564:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005568:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800556a:	4b14      	ldr	r3, [pc, #80]	; (80055bc <BSP_SDRAM_Init+0xac>)
 800556c:	2200      	movs	r2, #0
 800556e:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8005570:	4b12      	ldr	r3, [pc, #72]	; (80055bc <BSP_SDRAM_Init+0xac>)
 8005572:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005576:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8005578:	4b10      	ldr	r3, [pc, #64]	; (80055bc <BSP_SDRAM_Init+0xac>)
 800557a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800557e:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8005580:	4b0e      	ldr	r3, [pc, #56]	; (80055bc <BSP_SDRAM_Init+0xac>)
 8005582:	2200      	movs	r2, #0
 8005584:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8005586:	2100      	movs	r1, #0
 8005588:	480c      	ldr	r0, [pc, #48]	; (80055bc <BSP_SDRAM_Init+0xac>)
 800558a:	f000 f87f 	bl	800568c <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 800558e:	490d      	ldr	r1, [pc, #52]	; (80055c4 <BSP_SDRAM_Init+0xb4>)
 8005590:	480a      	ldr	r0, [pc, #40]	; (80055bc <BSP_SDRAM_Init+0xac>)
 8005592:	f7fe fd11 	bl	8003fb8 <HAL_SDRAM_Init>
 8005596:	4603      	mov	r3, r0
 8005598:	2b00      	cmp	r3, #0
 800559a:	d003      	beq.n	80055a4 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 800559c:	4b0a      	ldr	r3, [pc, #40]	; (80055c8 <BSP_SDRAM_Init+0xb8>)
 800559e:	2201      	movs	r2, #1
 80055a0:	701a      	strb	r2, [r3, #0]
 80055a2:	e002      	b.n	80055aa <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 80055a4:	4b08      	ldr	r3, [pc, #32]	; (80055c8 <BSP_SDRAM_Init+0xb8>)
 80055a6:	2200      	movs	r2, #0
 80055a8:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80055aa:	f240 6003 	movw	r0, #1539	; 0x603
 80055ae:	f000 f80d 	bl	80055cc <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 80055b2:	4b05      	ldr	r3, [pc, #20]	; (80055c8 <BSP_SDRAM_Init+0xb8>)
 80055b4:	781b      	ldrb	r3, [r3, #0]
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	bd80      	pop	{r7, pc}
 80055ba:	bf00      	nop
 80055bc:	20000408 	.word	0x20000408
 80055c0:	a0000140 	.word	0xa0000140
 80055c4:	200001f8 	.word	0x200001f8
 80055c8:	2000003c 	.word	0x2000003c

080055cc <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b084      	sub	sp, #16
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 80055d4:	2300      	movs	r3, #0
 80055d6:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80055d8:	4b2a      	ldr	r3, [pc, #168]	; (8005684 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80055da:	2201      	movs	r2, #1
 80055dc:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80055de:	4b29      	ldr	r3, [pc, #164]	; (8005684 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80055e0:	2210      	movs	r2, #16
 80055e2:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80055e4:	4b27      	ldr	r3, [pc, #156]	; (8005684 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80055e6:	2201      	movs	r2, #1
 80055e8:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80055ea:	4b26      	ldr	r3, [pc, #152]	; (8005684 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80055ec:	2200      	movs	r2, #0
 80055ee:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80055f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80055f4:	4923      	ldr	r1, [pc, #140]	; (8005684 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80055f6:	4824      	ldr	r0, [pc, #144]	; (8005688 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80055f8:	f7fe fd1c 	bl	8004034 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80055fc:	2001      	movs	r0, #1
 80055fe:	f7fb fb17 	bl	8000c30 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8005602:	4b20      	ldr	r3, [pc, #128]	; (8005684 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005604:	2202      	movs	r2, #2
 8005606:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8005608:	4b1e      	ldr	r3, [pc, #120]	; (8005684 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800560a:	2210      	movs	r2, #16
 800560c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800560e:	4b1d      	ldr	r3, [pc, #116]	; (8005684 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005610:	2201      	movs	r2, #1
 8005612:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8005614:	4b1b      	ldr	r3, [pc, #108]	; (8005684 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005616:	2200      	movs	r2, #0
 8005618:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 800561a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800561e:	4919      	ldr	r1, [pc, #100]	; (8005684 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005620:	4819      	ldr	r0, [pc, #100]	; (8005688 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8005622:	f7fe fd07 	bl	8004034 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8005626:	4b17      	ldr	r3, [pc, #92]	; (8005684 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005628:	2203      	movs	r2, #3
 800562a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800562c:	4b15      	ldr	r3, [pc, #84]	; (8005684 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800562e:	2210      	movs	r2, #16
 8005630:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8005632:	4b14      	ldr	r3, [pc, #80]	; (8005684 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005634:	2208      	movs	r2, #8
 8005636:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8005638:	4b12      	ldr	r3, [pc, #72]	; (8005684 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800563a:	2200      	movs	r2, #0
 800563c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800563e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005642:	4910      	ldr	r1, [pc, #64]	; (8005684 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005644:	4810      	ldr	r0, [pc, #64]	; (8005688 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8005646:	f7fe fcf5 	bl	8004034 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 800564a:	f44f 7308 	mov.w	r3, #544	; 0x220
 800564e:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8005650:	4b0c      	ldr	r3, [pc, #48]	; (8005684 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005652:	2204      	movs	r2, #4
 8005654:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8005656:	4b0b      	ldr	r3, [pc, #44]	; (8005684 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005658:	2210      	movs	r2, #16
 800565a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800565c:	4b09      	ldr	r3, [pc, #36]	; (8005684 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800565e:	2201      	movs	r2, #1
 8005660:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	4a07      	ldr	r2, [pc, #28]	; (8005684 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005666:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8005668:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800566c:	4905      	ldr	r1, [pc, #20]	; (8005684 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800566e:	4806      	ldr	r0, [pc, #24]	; (8005688 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8005670:	f7fe fce0 	bl	8004034 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8005674:	6879      	ldr	r1, [r7, #4]
 8005676:	4804      	ldr	r0, [pc, #16]	; (8005688 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8005678:	f7fe fd07 	bl	800408a <HAL_SDRAM_ProgramRefreshRate>
}
 800567c:	bf00      	nop
 800567e:	3710      	adds	r7, #16
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}
 8005684:	20000214 	.word	0x20000214
 8005688:	20000408 	.word	0x20000408

0800568c <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 800568c:	b580      	push	{r7, lr}
 800568e:	b090      	sub	sp, #64	; 0x40
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8005696:	4b70      	ldr	r3, [pc, #448]	; (8005858 <BSP_SDRAM_MspInit+0x1cc>)
 8005698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800569a:	4a6f      	ldr	r2, [pc, #444]	; (8005858 <BSP_SDRAM_MspInit+0x1cc>)
 800569c:	f043 0301 	orr.w	r3, r3, #1
 80056a0:	6393      	str	r3, [r2, #56]	; 0x38
 80056a2:	4b6d      	ldr	r3, [pc, #436]	; (8005858 <BSP_SDRAM_MspInit+0x1cc>)
 80056a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a6:	f003 0301 	and.w	r3, r3, #1
 80056aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80056ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 80056ae:	4b6a      	ldr	r3, [pc, #424]	; (8005858 <BSP_SDRAM_MspInit+0x1cc>)
 80056b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b2:	4a69      	ldr	r2, [pc, #420]	; (8005858 <BSP_SDRAM_MspInit+0x1cc>)
 80056b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80056b8:	6313      	str	r3, [r2, #48]	; 0x30
 80056ba:	4b67      	ldr	r3, [pc, #412]	; (8005858 <BSP_SDRAM_MspInit+0x1cc>)
 80056bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056c2:	627b      	str	r3, [r7, #36]	; 0x24
 80056c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80056c6:	4b64      	ldr	r3, [pc, #400]	; (8005858 <BSP_SDRAM_MspInit+0x1cc>)
 80056c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ca:	4a63      	ldr	r2, [pc, #396]	; (8005858 <BSP_SDRAM_MspInit+0x1cc>)
 80056cc:	f043 0304 	orr.w	r3, r3, #4
 80056d0:	6313      	str	r3, [r2, #48]	; 0x30
 80056d2:	4b61      	ldr	r3, [pc, #388]	; (8005858 <BSP_SDRAM_MspInit+0x1cc>)
 80056d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056d6:	f003 0304 	and.w	r3, r3, #4
 80056da:	623b      	str	r3, [r7, #32]
 80056dc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80056de:	4b5e      	ldr	r3, [pc, #376]	; (8005858 <BSP_SDRAM_MspInit+0x1cc>)
 80056e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e2:	4a5d      	ldr	r2, [pc, #372]	; (8005858 <BSP_SDRAM_MspInit+0x1cc>)
 80056e4:	f043 0308 	orr.w	r3, r3, #8
 80056e8:	6313      	str	r3, [r2, #48]	; 0x30
 80056ea:	4b5b      	ldr	r3, [pc, #364]	; (8005858 <BSP_SDRAM_MspInit+0x1cc>)
 80056ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ee:	f003 0308 	and.w	r3, r3, #8
 80056f2:	61fb      	str	r3, [r7, #28]
 80056f4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80056f6:	4b58      	ldr	r3, [pc, #352]	; (8005858 <BSP_SDRAM_MspInit+0x1cc>)
 80056f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056fa:	4a57      	ldr	r2, [pc, #348]	; (8005858 <BSP_SDRAM_MspInit+0x1cc>)
 80056fc:	f043 0310 	orr.w	r3, r3, #16
 8005700:	6313      	str	r3, [r2, #48]	; 0x30
 8005702:	4b55      	ldr	r3, [pc, #340]	; (8005858 <BSP_SDRAM_MspInit+0x1cc>)
 8005704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005706:	f003 0310 	and.w	r3, r3, #16
 800570a:	61bb      	str	r3, [r7, #24]
 800570c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800570e:	4b52      	ldr	r3, [pc, #328]	; (8005858 <BSP_SDRAM_MspInit+0x1cc>)
 8005710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005712:	4a51      	ldr	r2, [pc, #324]	; (8005858 <BSP_SDRAM_MspInit+0x1cc>)
 8005714:	f043 0320 	orr.w	r3, r3, #32
 8005718:	6313      	str	r3, [r2, #48]	; 0x30
 800571a:	4b4f      	ldr	r3, [pc, #316]	; (8005858 <BSP_SDRAM_MspInit+0x1cc>)
 800571c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800571e:	f003 0320 	and.w	r3, r3, #32
 8005722:	617b      	str	r3, [r7, #20]
 8005724:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8005726:	4b4c      	ldr	r3, [pc, #304]	; (8005858 <BSP_SDRAM_MspInit+0x1cc>)
 8005728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800572a:	4a4b      	ldr	r2, [pc, #300]	; (8005858 <BSP_SDRAM_MspInit+0x1cc>)
 800572c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005730:	6313      	str	r3, [r2, #48]	; 0x30
 8005732:	4b49      	ldr	r3, [pc, #292]	; (8005858 <BSP_SDRAM_MspInit+0x1cc>)
 8005734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800573a:	613b      	str	r3, [r7, #16]
 800573c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800573e:	4b46      	ldr	r3, [pc, #280]	; (8005858 <BSP_SDRAM_MspInit+0x1cc>)
 8005740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005742:	4a45      	ldr	r2, [pc, #276]	; (8005858 <BSP_SDRAM_MspInit+0x1cc>)
 8005744:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005748:	6313      	str	r3, [r2, #48]	; 0x30
 800574a:	4b43      	ldr	r3, [pc, #268]	; (8005858 <BSP_SDRAM_MspInit+0x1cc>)
 800574c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800574e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005752:	60fb      	str	r3, [r7, #12]
 8005754:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8005756:	2302      	movs	r3, #2
 8005758:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800575a:	2301      	movs	r3, #1
 800575c:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800575e:	2302      	movs	r3, #2
 8005760:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8005762:	230c      	movs	r3, #12
 8005764:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8005766:	2308      	movs	r3, #8
 8005768:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 800576a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800576e:	4619      	mov	r1, r3
 8005770:	483a      	ldr	r0, [pc, #232]	; (800585c <BSP_SDRAM_MspInit+0x1d0>)
 8005772:	f7fc f8c7 	bl	8001904 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8005776:	f24c 7303 	movw	r3, #50947	; 0xc703
 800577a:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800577c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005780:	4619      	mov	r1, r3
 8005782:	4837      	ldr	r0, [pc, #220]	; (8005860 <BSP_SDRAM_MspInit+0x1d4>)
 8005784:	f7fc f8be 	bl	8001904 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8005788:	f64f 7383 	movw	r3, #65411	; 0xff83
 800578c:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800578e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005792:	4619      	mov	r1, r3
 8005794:	4833      	ldr	r0, [pc, #204]	; (8005864 <BSP_SDRAM_MspInit+0x1d8>)
 8005796:	f7fc f8b5 	bl	8001904 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800579a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800579e:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80057a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80057a4:	4619      	mov	r1, r3
 80057a6:	4830      	ldr	r0, [pc, #192]	; (8005868 <BSP_SDRAM_MspInit+0x1dc>)
 80057a8:	f7fc f8ac 	bl	8001904 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 80057ac:	f248 1333 	movw	r3, #33075	; 0x8133
 80057b0:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80057b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80057b6:	4619      	mov	r1, r3
 80057b8:	482c      	ldr	r0, [pc, #176]	; (800586c <BSP_SDRAM_MspInit+0x1e0>)
 80057ba:	f7fc f8a3 	bl	8001904 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 80057be:	2328      	movs	r3, #40	; 0x28
 80057c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 80057c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80057c6:	4619      	mov	r1, r3
 80057c8:	4829      	ldr	r0, [pc, #164]	; (8005870 <BSP_SDRAM_MspInit+0x1e4>)
 80057ca:	f7fc f89b 	bl	8001904 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80057ce:	4b29      	ldr	r3, [pc, #164]	; (8005874 <BSP_SDRAM_MspInit+0x1e8>)
 80057d0:	2200      	movs	r2, #0
 80057d2:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80057d4:	4b27      	ldr	r3, [pc, #156]	; (8005874 <BSP_SDRAM_MspInit+0x1e8>)
 80057d6:	2280      	movs	r2, #128	; 0x80
 80057d8:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80057da:	4b26      	ldr	r3, [pc, #152]	; (8005874 <BSP_SDRAM_MspInit+0x1e8>)
 80057dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057e0:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 80057e2:	4b24      	ldr	r3, [pc, #144]	; (8005874 <BSP_SDRAM_MspInit+0x1e8>)
 80057e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80057e8:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80057ea:	4b22      	ldr	r3, [pc, #136]	; (8005874 <BSP_SDRAM_MspInit+0x1e8>)
 80057ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80057f0:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80057f2:	4b20      	ldr	r3, [pc, #128]	; (8005874 <BSP_SDRAM_MspInit+0x1e8>)
 80057f4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80057f8:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 80057fa:	4b1e      	ldr	r3, [pc, #120]	; (8005874 <BSP_SDRAM_MspInit+0x1e8>)
 80057fc:	2200      	movs	r2, #0
 80057fe:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8005800:	4b1c      	ldr	r3, [pc, #112]	; (8005874 <BSP_SDRAM_MspInit+0x1e8>)
 8005802:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005806:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8005808:	4b1a      	ldr	r3, [pc, #104]	; (8005874 <BSP_SDRAM_MspInit+0x1e8>)
 800580a:	2200      	movs	r2, #0
 800580c:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800580e:	4b19      	ldr	r3, [pc, #100]	; (8005874 <BSP_SDRAM_MspInit+0x1e8>)
 8005810:	2203      	movs	r2, #3
 8005812:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8005814:	4b17      	ldr	r3, [pc, #92]	; (8005874 <BSP_SDRAM_MspInit+0x1e8>)
 8005816:	2200      	movs	r2, #0
 8005818:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800581a:	4b16      	ldr	r3, [pc, #88]	; (8005874 <BSP_SDRAM_MspInit+0x1e8>)
 800581c:	2200      	movs	r2, #0
 800581e:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8005820:	4b14      	ldr	r3, [pc, #80]	; (8005874 <BSP_SDRAM_MspInit+0x1e8>)
 8005822:	4a15      	ldr	r2, [pc, #84]	; (8005878 <BSP_SDRAM_MspInit+0x1ec>)
 8005824:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	4a12      	ldr	r2, [pc, #72]	; (8005874 <BSP_SDRAM_MspInit+0x1e8>)
 800582a:	631a      	str	r2, [r3, #48]	; 0x30
 800582c:	4a11      	ldr	r2, [pc, #68]	; (8005874 <BSP_SDRAM_MspInit+0x1e8>)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8005832:	4810      	ldr	r0, [pc, #64]	; (8005874 <BSP_SDRAM_MspInit+0x1e8>)
 8005834:	f7fb fcca 	bl	80011cc <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8005838:	480e      	ldr	r0, [pc, #56]	; (8005874 <BSP_SDRAM_MspInit+0x1e8>)
 800583a:	f7fb fc19 	bl	8001070 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 800583e:	2200      	movs	r2, #0
 8005840:	210f      	movs	r1, #15
 8005842:	2038      	movs	r0, #56	; 0x38
 8005844:	f7fb faf3 	bl	8000e2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8005848:	2038      	movs	r0, #56	; 0x38
 800584a:	f7fb fb0c 	bl	8000e66 <HAL_NVIC_EnableIRQ>
}
 800584e:	bf00      	nop
 8005850:	3740      	adds	r7, #64	; 0x40
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}
 8005856:	bf00      	nop
 8005858:	40023800 	.word	0x40023800
 800585c:	40020800 	.word	0x40020800
 8005860:	40020c00 	.word	0x40020c00
 8005864:	40021000 	.word	0x40021000
 8005868:	40021400 	.word	0x40021400
 800586c:	40021800 	.word	0x40021800
 8005870:	40021c00 	.word	0x40021c00
 8005874:	20000224 	.word	0x20000224
 8005878:	40026410 	.word	0x40026410

0800587c <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b084      	sub	sp, #16
 8005880:	af00      	add	r7, sp, #0
 8005882:	4603      	mov	r3, r0
 8005884:	460a      	mov	r2, r1
 8005886:	80fb      	strh	r3, [r7, #6]
 8005888:	4613      	mov	r3, r2
 800588a:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 800588c:	2300      	movs	r3, #0
 800588e:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 8005890:	4a14      	ldr	r2, [pc, #80]	; (80058e4 <BSP_TS_Init+0x68>)
 8005892:	88fb      	ldrh	r3, [r7, #6]
 8005894:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 8005896:	4a14      	ldr	r2, [pc, #80]	; (80058e8 <BSP_TS_Init+0x6c>)
 8005898:	88bb      	ldrh	r3, [r7, #4]
 800589a:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 800589c:	4b13      	ldr	r3, [pc, #76]	; (80058ec <BSP_TS_Init+0x70>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	2070      	movs	r0, #112	; 0x70
 80058a2:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 80058a4:	4b11      	ldr	r3, [pc, #68]	; (80058ec <BSP_TS_Init+0x70>)
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	2070      	movs	r0, #112	; 0x70
 80058aa:	4798      	blx	r3
 80058ac:	4603      	mov	r3, r0
 80058ae:	2b51      	cmp	r3, #81	; 0x51
 80058b0:	d111      	bne.n	80058d6 <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 80058b2:	4b0f      	ldr	r3, [pc, #60]	; (80058f0 <BSP_TS_Init+0x74>)
 80058b4:	4a0d      	ldr	r2, [pc, #52]	; (80058ec <BSP_TS_Init+0x70>)
 80058b6:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 80058b8:	4b0e      	ldr	r3, [pc, #56]	; (80058f4 <BSP_TS_Init+0x78>)
 80058ba:	2270      	movs	r2, #112	; 0x70
 80058bc:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 80058be:	4b0e      	ldr	r3, [pc, #56]	; (80058f8 <BSP_TS_Init+0x7c>)
 80058c0:	2208      	movs	r2, #8
 80058c2:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 80058c4:	4b0a      	ldr	r3, [pc, #40]	; (80058f0 <BSP_TS_Init+0x74>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	68db      	ldr	r3, [r3, #12]
 80058ca:	4a0a      	ldr	r2, [pc, #40]	; (80058f4 <BSP_TS_Init+0x78>)
 80058cc:	7812      	ldrb	r2, [r2, #0]
 80058ce:	b292      	uxth	r2, r2
 80058d0:	4610      	mov	r0, r2
 80058d2:	4798      	blx	r3
 80058d4:	e001      	b.n	80058da <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 80058d6:	2303      	movs	r3, #3
 80058d8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80058da:	7bfb      	ldrb	r3, [r7, #15]
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3710      	adds	r7, #16
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}
 80058e4:	20000288 	.word	0x20000288
 80058e8:	2000028a 	.word	0x2000028a
 80058ec:	20000014 	.word	0x20000014
 80058f0:	20000284 	.word	0x20000284
 80058f4:	2000028d 	.word	0x2000028d
 80058f8:	2000028c 	.word	0x2000028c

080058fc <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 80058fc:	b590      	push	{r4, r7, lr}
 80058fe:	b097      	sub	sp, #92	; 0x5c
 8005900:	af02      	add	r7, sp, #8
 8005902:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 8005904:	2300      	movs	r3, #0
 8005906:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 800590a:	2300      	movs	r3, #0
 800590c:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 800590e:	2300      	movs	r3, #0
 8005910:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 8005912:	2300      	movs	r3, #0
 8005914:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 8005916:	4b97      	ldr	r3, [pc, #604]	; (8005b74 <BSP_TS_GetState+0x278>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	691b      	ldr	r3, [r3, #16]
 800591c:	4a96      	ldr	r2, [pc, #600]	; (8005b78 <BSP_TS_GetState+0x27c>)
 800591e:	7812      	ldrb	r2, [r2, #0]
 8005920:	b292      	uxth	r2, r2
 8005922:	4610      	mov	r0, r2
 8005924:	4798      	blx	r3
 8005926:	4603      	mov	r3, r0
 8005928:	461a      	mov	r2, r3
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	781b      	ldrb	r3, [r3, #0]
 8005932:	2b00      	cmp	r3, #0
 8005934:	f000 81a8 	beq.w	8005c88 <BSP_TS_GetState+0x38c>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 8005938:	2300      	movs	r3, #0
 800593a:	64bb      	str	r3, [r7, #72]	; 0x48
 800593c:	e197      	b.n	8005c6e <BSP_TS_GetState+0x372>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 800593e:	4b8d      	ldr	r3, [pc, #564]	; (8005b74 <BSP_TS_GetState+0x278>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	695b      	ldr	r3, [r3, #20]
 8005944:	4a8c      	ldr	r2, [pc, #560]	; (8005b78 <BSP_TS_GetState+0x27c>)
 8005946:	7812      	ldrb	r2, [r2, #0]
 8005948:	b290      	uxth	r0, r2
 800594a:	f107 0120 	add.w	r1, r7, #32
 800594e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005950:	0052      	lsls	r2, r2, #1
 8005952:	188c      	adds	r4, r1, r2
 8005954:	f107 0114 	add.w	r1, r7, #20
 8005958:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800595a:	0052      	lsls	r2, r2, #1
 800595c:	440a      	add	r2, r1
 800595e:	4621      	mov	r1, r4
 8005960:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 8005962:	4b86      	ldr	r3, [pc, #536]	; (8005b7c <BSP_TS_GetState+0x280>)
 8005964:	781b      	ldrb	r3, [r3, #0]
 8005966:	2b01      	cmp	r3, #1
 8005968:	d11b      	bne.n	80059a2 <BSP_TS_GetState+0xa6>
      {
        x[index] = brute_x[index];
 800596a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800596c:	005b      	lsls	r3, r3, #1
 800596e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8005972:	4413      	add	r3, r2
 8005974:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8005978:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800597a:	005b      	lsls	r3, r3, #1
 800597c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8005980:	440b      	add	r3, r1
 8005982:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 8005986:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005988:	005b      	lsls	r3, r3, #1
 800598a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800598e:	4413      	add	r3, r2
 8005990:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8005994:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005996:	005b      	lsls	r3, r3, #1
 8005998:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800599c:	440b      	add	r3, r1
 800599e:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 80059a2:	4b76      	ldr	r3, [pc, #472]	; (8005b7c <BSP_TS_GetState+0x280>)
 80059a4:	781b      	ldrb	r3, [r3, #0]
 80059a6:	f003 0302 	and.w	r3, r3, #2
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d010      	beq.n	80059d0 <BSP_TS_GetState+0xd4>
      {
        x[index] = 4096 - brute_x[index];
 80059ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059b0:	005b      	lsls	r3, r3, #1
 80059b2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80059b6:	4413      	add	r3, r2
 80059b8:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 80059bc:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 80059c0:	b29a      	uxth	r2, r3
 80059c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059c4:	005b      	lsls	r3, r3, #1
 80059c6:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80059ca:	440b      	add	r3, r1
 80059cc:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 80059d0:	4b6a      	ldr	r3, [pc, #424]	; (8005b7c <BSP_TS_GetState+0x280>)
 80059d2:	781b      	ldrb	r3, [r3, #0]
 80059d4:	f003 0304 	and.w	r3, r3, #4
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d010      	beq.n	80059fe <BSP_TS_GetState+0x102>
      {
        y[index] = 4096 - brute_y[index];
 80059dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059de:	005b      	lsls	r3, r3, #1
 80059e0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80059e4:	4413      	add	r3, r2
 80059e6:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 80059ea:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 80059ee:	b29a      	uxth	r2, r3
 80059f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059f2:	005b      	lsls	r3, r3, #1
 80059f4:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80059f8:	440b      	add	r3, r1
 80059fa:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 80059fe:	4b5f      	ldr	r3, [pc, #380]	; (8005b7c <BSP_TS_GetState+0x280>)
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	f003 0308 	and.w	r3, r3, #8
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d01b      	beq.n	8005a42 <BSP_TS_GetState+0x146>
      {
        y[index] = brute_x[index];
 8005a0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a0c:	005b      	lsls	r3, r3, #1
 8005a0e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8005a12:	4413      	add	r3, r2
 8005a14:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8005a18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a1a:	005b      	lsls	r3, r3, #1
 8005a1c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8005a20:	440b      	add	r3, r1
 8005a22:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 8005a26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a28:	005b      	lsls	r3, r3, #1
 8005a2a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8005a2e:	4413      	add	r3, r2
 8005a30:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8005a34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a36:	005b      	lsls	r3, r3, #1
 8005a38:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8005a3c:	440b      	add	r3, r1
 8005a3e:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 8005a42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a44:	005b      	lsls	r3, r3, #1
 8005a46:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8005a4a:	4413      	add	r3, r2
 8005a4c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8005a50:	4619      	mov	r1, r3
 8005a52:	4a4b      	ldr	r2, [pc, #300]	; (8005b80 <BSP_TS_GetState+0x284>)
 8005a54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a5a:	4299      	cmp	r1, r3
 8005a5c:	d90e      	bls.n	8005a7c <BSP_TS_GetState+0x180>
 8005a5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a60:	005b      	lsls	r3, r3, #1
 8005a62:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8005a66:	4413      	add	r3, r2
 8005a68:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8005a6c:	4944      	ldr	r1, [pc, #272]	; (8005b80 <BSP_TS_GetState+0x284>)
 8005a6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a70:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005a74:	b29b      	uxth	r3, r3
 8005a76:	1ad3      	subs	r3, r2, r3
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	e00d      	b.n	8005a98 <BSP_TS_GetState+0x19c>
 8005a7c:	4a40      	ldr	r2, [pc, #256]	; (8005b80 <BSP_TS_GetState+0x284>)
 8005a7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a84:	b29a      	uxth	r2, r3
 8005a86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a88:	005b      	lsls	r3, r3, #1
 8005a8a:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8005a8e:	440b      	add	r3, r1
 8005a90:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8005a94:	1ad3      	subs	r3, r2, r3
 8005a96:	b29b      	uxth	r3, r3
 8005a98:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8005a9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a9e:	005b      	lsls	r3, r3, #1
 8005aa0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8005aa4:	4413      	add	r3, r2
 8005aa6:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8005aaa:	4619      	mov	r1, r3
 8005aac:	4a35      	ldr	r2, [pc, #212]	; (8005b84 <BSP_TS_GetState+0x288>)
 8005aae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ab0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ab4:	4299      	cmp	r1, r3
 8005ab6:	d90e      	bls.n	8005ad6 <BSP_TS_GetState+0x1da>
 8005ab8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005aba:	005b      	lsls	r3, r3, #1
 8005abc:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8005ac0:	4413      	add	r3, r2
 8005ac2:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8005ac6:	492f      	ldr	r1, [pc, #188]	; (8005b84 <BSP_TS_GetState+0x288>)
 8005ac8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005aca:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	1ad3      	subs	r3, r2, r3
 8005ad2:	b29b      	uxth	r3, r3
 8005ad4:	e00d      	b.n	8005af2 <BSP_TS_GetState+0x1f6>
 8005ad6:	4a2b      	ldr	r2, [pc, #172]	; (8005b84 <BSP_TS_GetState+0x288>)
 8005ad8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ada:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ade:	b29a      	uxth	r2, r3
 8005ae0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ae2:	005b      	lsls	r3, r3, #1
 8005ae4:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8005ae8:	440b      	add	r3, r1
 8005aea:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8005aee:	1ad3      	subs	r3, r2, r3
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

      if ((x_diff + y_diff) > 5)
 8005af6:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8005afa:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005afe:	4413      	add	r3, r2
 8005b00:	2b05      	cmp	r3, #5
 8005b02:	dd17      	ble.n	8005b34 <BSP_TS_GetState+0x238>
      {
        _x[index] = x[index];
 8005b04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b06:	005b      	lsls	r3, r3, #1
 8005b08:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8005b0c:	4413      	add	r3, r2
 8005b0e:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8005b12:	4619      	mov	r1, r3
 8005b14:	4a1a      	ldr	r2, [pc, #104]	; (8005b80 <BSP_TS_GetState+0x284>)
 8005b16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b18:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 8005b1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b1e:	005b      	lsls	r3, r3, #1
 8005b20:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8005b24:	4413      	add	r3, r2
 8005b26:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8005b2a:	4619      	mov	r1, r3
 8005b2c:	4a15      	ldr	r2, [pc, #84]	; (8005b84 <BSP_TS_GetState+0x288>)
 8005b2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b30:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 8005b34:	4b10      	ldr	r3, [pc, #64]	; (8005b78 <BSP_TS_GetState+0x27c>)
 8005b36:	781b      	ldrb	r3, [r3, #0]
 8005b38:	2b70      	cmp	r3, #112	; 0x70
 8005b3a:	d125      	bne.n	8005b88 <BSP_TS_GetState+0x28c>
      {
        TS_State->touchX[index] = x[index];
 8005b3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b3e:	005b      	lsls	r3, r3, #1
 8005b40:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8005b44:	4413      	add	r3, r2
 8005b46:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 8005b4a:	687a      	ldr	r2, [r7, #4]
 8005b4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b4e:	005b      	lsls	r3, r3, #1
 8005b50:	4413      	add	r3, r2
 8005b52:	460a      	mov	r2, r1
 8005b54:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 8005b56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b58:	005b      	lsls	r3, r3, #1
 8005b5a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8005b5e:	4413      	add	r3, r2
 8005b60:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 8005b64:	687a      	ldr	r2, [r7, #4]
 8005b66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b68:	3304      	adds	r3, #4
 8005b6a:	005b      	lsls	r3, r3, #1
 8005b6c:	4413      	add	r3, r2
 8005b6e:	460a      	mov	r2, r1
 8005b70:	809a      	strh	r2, [r3, #4]
 8005b72:	e02c      	b.n	8005bce <BSP_TS_GetState+0x2d2>
 8005b74:	20000284 	.word	0x20000284
 8005b78:	2000028d 	.word	0x2000028d
 8005b7c:	2000028c 	.word	0x2000028c
 8005b80:	20000290 	.word	0x20000290
 8005b84:	200002a4 	.word	0x200002a4
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 8005b88:	4b42      	ldr	r3, [pc, #264]	; (8005c94 <BSP_TS_GetState+0x398>)
 8005b8a:	881b      	ldrh	r3, [r3, #0]
 8005b8c:	4619      	mov	r1, r3
 8005b8e:	4a42      	ldr	r2, [pc, #264]	; (8005c98 <BSP_TS_GetState+0x39c>)
 8005b90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b96:	fb03 f301 	mul.w	r3, r3, r1
 8005b9a:	0b1b      	lsrs	r3, r3, #12
 8005b9c:	b299      	uxth	r1, r3
 8005b9e:	687a      	ldr	r2, [r7, #4]
 8005ba0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ba2:	005b      	lsls	r3, r3, #1
 8005ba4:	4413      	add	r3, r2
 8005ba6:	460a      	mov	r2, r1
 8005ba8:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 8005baa:	4b3c      	ldr	r3, [pc, #240]	; (8005c9c <BSP_TS_GetState+0x3a0>)
 8005bac:	881b      	ldrh	r3, [r3, #0]
 8005bae:	4619      	mov	r1, r3
 8005bb0:	4a3b      	ldr	r2, [pc, #236]	; (8005ca0 <BSP_TS_GetState+0x3a4>)
 8005bb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bb8:	fb03 f301 	mul.w	r3, r3, r1
 8005bbc:	0b1b      	lsrs	r3, r3, #12
 8005bbe:	b299      	uxth	r1, r3
 8005bc0:	687a      	ldr	r2, [r7, #4]
 8005bc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bc4:	3304      	adds	r3, #4
 8005bc6:	005b      	lsls	r3, r3, #1
 8005bc8:	4413      	add	r3, r2
 8005bca:	460a      	mov	r2, r1
 8005bcc:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 8005bce:	4b35      	ldr	r3, [pc, #212]	; (8005ca4 <BSP_TS_GetState+0x3a8>)
 8005bd0:	781b      	ldrb	r3, [r3, #0]
 8005bd2:	b298      	uxth	r0, r3
 8005bd4:	f107 010c 	add.w	r1, r7, #12
 8005bd8:	f107 0210 	add.w	r2, r7, #16
 8005bdc:	f107 0308 	add.w	r3, r7, #8
 8005be0:	9300      	str	r3, [sp, #0]
 8005be2:	460b      	mov	r3, r1
 8005be4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005be6:	f7fe fd61 	bl	80046ac <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	b2d9      	uxtb	r1, r3
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bf2:	4413      	add	r3, r2
 8005bf4:	3316      	adds	r3, #22
 8005bf6:	460a      	mov	r2, r1
 8005bf8:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	b2d9      	uxtb	r1, r3
 8005bfe:	687a      	ldr	r2, [r7, #4]
 8005c00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c02:	4413      	add	r3, r2
 8005c04:	3320      	adds	r3, #32
 8005c06:	460a      	mov	r2, r1
 8005c08:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	2b03      	cmp	r3, #3
 8005c0e:	d827      	bhi.n	8005c60 <BSP_TS_GetState+0x364>
 8005c10:	a201      	add	r2, pc, #4	; (adr r2, 8005c18 <BSP_TS_GetState+0x31c>)
 8005c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c16:	bf00      	nop
 8005c18:	08005c29 	.word	0x08005c29
 8005c1c:	08005c37 	.word	0x08005c37
 8005c20:	08005c45 	.word	0x08005c45
 8005c24:	08005c53 	.word	0x08005c53
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 8005c28:	687a      	ldr	r2, [r7, #4]
 8005c2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c2c:	4413      	add	r3, r2
 8005c2e:	331b      	adds	r3, #27
 8005c30:	2201      	movs	r2, #1
 8005c32:	701a      	strb	r2, [r3, #0]
          break;
 8005c34:	e018      	b.n	8005c68 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 8005c36:	687a      	ldr	r2, [r7, #4]
 8005c38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c3a:	4413      	add	r3, r2
 8005c3c:	331b      	adds	r3, #27
 8005c3e:	2202      	movs	r2, #2
 8005c40:	701a      	strb	r2, [r3, #0]
          break;
 8005c42:	e011      	b.n	8005c68 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 8005c44:	687a      	ldr	r2, [r7, #4]
 8005c46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c48:	4413      	add	r3, r2
 8005c4a:	331b      	adds	r3, #27
 8005c4c:	2203      	movs	r2, #3
 8005c4e:	701a      	strb	r2, [r3, #0]
          break;
 8005c50:	e00a      	b.n	8005c68 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 8005c52:	687a      	ldr	r2, [r7, #4]
 8005c54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c56:	4413      	add	r3, r2
 8005c58:	331b      	adds	r3, #27
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	701a      	strb	r2, [r3, #0]
          break;
 8005c5e:	e003      	b.n	8005c68 <BSP_TS_GetState+0x36c>
        default :
          ts_status = TS_ERROR;
 8005c60:	2301      	movs	r3, #1
 8005c62:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
          break;
 8005c66:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 8005c68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c6a:	3301      	adds	r3, #1
 8005c6c:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	781b      	ldrb	r3, [r3, #0]
 8005c72:	461a      	mov	r2, r3
 8005c74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c76:	4293      	cmp	r3, r2
 8005c78:	f4ff ae61 	bcc.w	800593e <BSP_TS_GetState+0x42>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f000 f813 	bl	8005ca8 <BSP_TS_Get_GestureId>
 8005c82:	4603      	mov	r3, r0
 8005c84:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 8005c88:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3754      	adds	r7, #84	; 0x54
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd90      	pop	{r4, r7, pc}
 8005c94:	20000288 	.word	0x20000288
 8005c98:	20000290 	.word	0x20000290
 8005c9c:	2000028a 	.word	0x2000028a
 8005ca0:	200002a4 	.word	0x200002a4
 8005ca4:	2000028d 	.word	0x2000028d

08005ca8 <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b084      	sub	sp, #16
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 8005cb8:	4b3b      	ldr	r3, [pc, #236]	; (8005da8 <BSP_TS_Get_GestureId+0x100>)
 8005cba:	781b      	ldrb	r3, [r3, #0]
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	f107 0208 	add.w	r2, r7, #8
 8005cc2:	4611      	mov	r1, r2
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f7fe fcd8 	bl	800467a <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	2b49      	cmp	r3, #73	; 0x49
 8005cce:	d05e      	beq.n	8005d8e <BSP_TS_Get_GestureId+0xe6>
 8005cd0:	2b49      	cmp	r3, #73	; 0x49
 8005cd2:	d860      	bhi.n	8005d96 <BSP_TS_Get_GestureId+0xee>
 8005cd4:	2b1c      	cmp	r3, #28
 8005cd6:	d83f      	bhi.n	8005d58 <BSP_TS_Get_GestureId+0xb0>
 8005cd8:	2b1c      	cmp	r3, #28
 8005cda:	d85c      	bhi.n	8005d96 <BSP_TS_Get_GestureId+0xee>
 8005cdc:	a201      	add	r2, pc, #4	; (adr r2, 8005ce4 <BSP_TS_Get_GestureId+0x3c>)
 8005cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ce2:	bf00      	nop
 8005ce4:	08005d5f 	.word	0x08005d5f
 8005ce8:	08005d97 	.word	0x08005d97
 8005cec:	08005d97 	.word	0x08005d97
 8005cf0:	08005d97 	.word	0x08005d97
 8005cf4:	08005d97 	.word	0x08005d97
 8005cf8:	08005d97 	.word	0x08005d97
 8005cfc:	08005d97 	.word	0x08005d97
 8005d00:	08005d97 	.word	0x08005d97
 8005d04:	08005d97 	.word	0x08005d97
 8005d08:	08005d97 	.word	0x08005d97
 8005d0c:	08005d97 	.word	0x08005d97
 8005d10:	08005d97 	.word	0x08005d97
 8005d14:	08005d97 	.word	0x08005d97
 8005d18:	08005d97 	.word	0x08005d97
 8005d1c:	08005d97 	.word	0x08005d97
 8005d20:	08005d97 	.word	0x08005d97
 8005d24:	08005d67 	.word	0x08005d67
 8005d28:	08005d97 	.word	0x08005d97
 8005d2c:	08005d97 	.word	0x08005d97
 8005d30:	08005d97 	.word	0x08005d97
 8005d34:	08005d6f 	.word	0x08005d6f
 8005d38:	08005d97 	.word	0x08005d97
 8005d3c:	08005d97 	.word	0x08005d97
 8005d40:	08005d97 	.word	0x08005d97
 8005d44:	08005d77 	.word	0x08005d77
 8005d48:	08005d97 	.word	0x08005d97
 8005d4c:	08005d97 	.word	0x08005d97
 8005d50:	08005d97 	.word	0x08005d97
 8005d54:	08005d7f 	.word	0x08005d7f
 8005d58:	2b40      	cmp	r3, #64	; 0x40
 8005d5a:	d014      	beq.n	8005d86 <BSP_TS_Get_GestureId+0xde>
 8005d5c:	e01b      	b.n	8005d96 <BSP_TS_Get_GestureId+0xee>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2200      	movs	r2, #0
 8005d62:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8005d64:	e01a      	b.n	8005d9c <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2201      	movs	r2, #1
 8005d6a:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8005d6c:	e016      	b.n	8005d9c <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2202      	movs	r2, #2
 8005d72:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8005d74:	e012      	b.n	8005d9c <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2203      	movs	r2, #3
 8005d7a:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8005d7c:	e00e      	b.n	8005d9c <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2204      	movs	r2, #4
 8005d82:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8005d84:	e00a      	b.n	8005d9c <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2205      	movs	r2, #5
 8005d8a:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8005d8c:	e006      	b.n	8005d9c <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2206      	movs	r2, #6
 8005d92:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8005d94:	e002      	b.n	8005d9c <BSP_TS_Get_GestureId+0xf4>
    default :
      ts_status = TS_ERROR;
 8005d96:	2301      	movs	r3, #1
 8005d98:	73fb      	strb	r3, [r7, #15]
      break;
 8005d9a:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 8005d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3710      	adds	r7, #16
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
 8005da6:	bf00      	nop
 8005da8:	2000028d 	.word	0x2000028d

08005dac <__errno>:
 8005dac:	4b01      	ldr	r3, [pc, #4]	; (8005db4 <__errno+0x8>)
 8005dae:	6818      	ldr	r0, [r3, #0]
 8005db0:	4770      	bx	lr
 8005db2:	bf00      	nop
 8005db4:	20000040 	.word	0x20000040

08005db8 <__libc_init_array>:
 8005db8:	b570      	push	{r4, r5, r6, lr}
 8005dba:	4d0d      	ldr	r5, [pc, #52]	; (8005df0 <__libc_init_array+0x38>)
 8005dbc:	4c0d      	ldr	r4, [pc, #52]	; (8005df4 <__libc_init_array+0x3c>)
 8005dbe:	1b64      	subs	r4, r4, r5
 8005dc0:	10a4      	asrs	r4, r4, #2
 8005dc2:	2600      	movs	r6, #0
 8005dc4:	42a6      	cmp	r6, r4
 8005dc6:	d109      	bne.n	8005ddc <__libc_init_array+0x24>
 8005dc8:	4d0b      	ldr	r5, [pc, #44]	; (8005df8 <__libc_init_array+0x40>)
 8005dca:	4c0c      	ldr	r4, [pc, #48]	; (8005dfc <__libc_init_array+0x44>)
 8005dcc:	f000 fc4e 	bl	800666c <_init>
 8005dd0:	1b64      	subs	r4, r4, r5
 8005dd2:	10a4      	asrs	r4, r4, #2
 8005dd4:	2600      	movs	r6, #0
 8005dd6:	42a6      	cmp	r6, r4
 8005dd8:	d105      	bne.n	8005de6 <__libc_init_array+0x2e>
 8005dda:	bd70      	pop	{r4, r5, r6, pc}
 8005ddc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005de0:	4798      	blx	r3
 8005de2:	3601      	adds	r6, #1
 8005de4:	e7ee      	b.n	8005dc4 <__libc_init_array+0xc>
 8005de6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dea:	4798      	blx	r3
 8005dec:	3601      	adds	r6, #1
 8005dee:	e7f2      	b.n	8005dd6 <__libc_init_array+0x1e>
 8005df0:	080081a8 	.word	0x080081a8
 8005df4:	080081a8 	.word	0x080081a8
 8005df8:	080081a8 	.word	0x080081a8
 8005dfc:	080081ac 	.word	0x080081ac

08005e00 <memset>:
 8005e00:	4402      	add	r2, r0
 8005e02:	4603      	mov	r3, r0
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d100      	bne.n	8005e0a <memset+0xa>
 8005e08:	4770      	bx	lr
 8005e0a:	f803 1b01 	strb.w	r1, [r3], #1
 8005e0e:	e7f9      	b.n	8005e04 <memset+0x4>

08005e10 <siprintf>:
 8005e10:	b40e      	push	{r1, r2, r3}
 8005e12:	b500      	push	{lr}
 8005e14:	b09c      	sub	sp, #112	; 0x70
 8005e16:	ab1d      	add	r3, sp, #116	; 0x74
 8005e18:	9002      	str	r0, [sp, #8]
 8005e1a:	9006      	str	r0, [sp, #24]
 8005e1c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005e20:	4809      	ldr	r0, [pc, #36]	; (8005e48 <siprintf+0x38>)
 8005e22:	9107      	str	r1, [sp, #28]
 8005e24:	9104      	str	r1, [sp, #16]
 8005e26:	4909      	ldr	r1, [pc, #36]	; (8005e4c <siprintf+0x3c>)
 8005e28:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e2c:	9105      	str	r1, [sp, #20]
 8005e2e:	6800      	ldr	r0, [r0, #0]
 8005e30:	9301      	str	r3, [sp, #4]
 8005e32:	a902      	add	r1, sp, #8
 8005e34:	f000 f868 	bl	8005f08 <_svfiprintf_r>
 8005e38:	9b02      	ldr	r3, [sp, #8]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	701a      	strb	r2, [r3, #0]
 8005e3e:	b01c      	add	sp, #112	; 0x70
 8005e40:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e44:	b003      	add	sp, #12
 8005e46:	4770      	bx	lr
 8005e48:	20000040 	.word	0x20000040
 8005e4c:	ffff0208 	.word	0xffff0208

08005e50 <__ssputs_r>:
 8005e50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e54:	688e      	ldr	r6, [r1, #8]
 8005e56:	429e      	cmp	r6, r3
 8005e58:	4682      	mov	sl, r0
 8005e5a:	460c      	mov	r4, r1
 8005e5c:	4690      	mov	r8, r2
 8005e5e:	461f      	mov	r7, r3
 8005e60:	d838      	bhi.n	8005ed4 <__ssputs_r+0x84>
 8005e62:	898a      	ldrh	r2, [r1, #12]
 8005e64:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005e68:	d032      	beq.n	8005ed0 <__ssputs_r+0x80>
 8005e6a:	6825      	ldr	r5, [r4, #0]
 8005e6c:	6909      	ldr	r1, [r1, #16]
 8005e6e:	eba5 0901 	sub.w	r9, r5, r1
 8005e72:	6965      	ldr	r5, [r4, #20]
 8005e74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005e78:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005e7c:	3301      	adds	r3, #1
 8005e7e:	444b      	add	r3, r9
 8005e80:	106d      	asrs	r5, r5, #1
 8005e82:	429d      	cmp	r5, r3
 8005e84:	bf38      	it	cc
 8005e86:	461d      	movcc	r5, r3
 8005e88:	0553      	lsls	r3, r2, #21
 8005e8a:	d531      	bpl.n	8005ef0 <__ssputs_r+0xa0>
 8005e8c:	4629      	mov	r1, r5
 8005e8e:	f000 fb47 	bl	8006520 <_malloc_r>
 8005e92:	4606      	mov	r6, r0
 8005e94:	b950      	cbnz	r0, 8005eac <__ssputs_r+0x5c>
 8005e96:	230c      	movs	r3, #12
 8005e98:	f8ca 3000 	str.w	r3, [sl]
 8005e9c:	89a3      	ldrh	r3, [r4, #12]
 8005e9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ea2:	81a3      	strh	r3, [r4, #12]
 8005ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ea8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005eac:	6921      	ldr	r1, [r4, #16]
 8005eae:	464a      	mov	r2, r9
 8005eb0:	f000 fabe 	bl	8006430 <memcpy>
 8005eb4:	89a3      	ldrh	r3, [r4, #12]
 8005eb6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005eba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ebe:	81a3      	strh	r3, [r4, #12]
 8005ec0:	6126      	str	r6, [r4, #16]
 8005ec2:	6165      	str	r5, [r4, #20]
 8005ec4:	444e      	add	r6, r9
 8005ec6:	eba5 0509 	sub.w	r5, r5, r9
 8005eca:	6026      	str	r6, [r4, #0]
 8005ecc:	60a5      	str	r5, [r4, #8]
 8005ece:	463e      	mov	r6, r7
 8005ed0:	42be      	cmp	r6, r7
 8005ed2:	d900      	bls.n	8005ed6 <__ssputs_r+0x86>
 8005ed4:	463e      	mov	r6, r7
 8005ed6:	4632      	mov	r2, r6
 8005ed8:	6820      	ldr	r0, [r4, #0]
 8005eda:	4641      	mov	r1, r8
 8005edc:	f000 fab6 	bl	800644c <memmove>
 8005ee0:	68a3      	ldr	r3, [r4, #8]
 8005ee2:	6822      	ldr	r2, [r4, #0]
 8005ee4:	1b9b      	subs	r3, r3, r6
 8005ee6:	4432      	add	r2, r6
 8005ee8:	60a3      	str	r3, [r4, #8]
 8005eea:	6022      	str	r2, [r4, #0]
 8005eec:	2000      	movs	r0, #0
 8005eee:	e7db      	b.n	8005ea8 <__ssputs_r+0x58>
 8005ef0:	462a      	mov	r2, r5
 8005ef2:	f000 fb6f 	bl	80065d4 <_realloc_r>
 8005ef6:	4606      	mov	r6, r0
 8005ef8:	2800      	cmp	r0, #0
 8005efa:	d1e1      	bne.n	8005ec0 <__ssputs_r+0x70>
 8005efc:	6921      	ldr	r1, [r4, #16]
 8005efe:	4650      	mov	r0, sl
 8005f00:	f000 fabe 	bl	8006480 <_free_r>
 8005f04:	e7c7      	b.n	8005e96 <__ssputs_r+0x46>
	...

08005f08 <_svfiprintf_r>:
 8005f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f0c:	4698      	mov	r8, r3
 8005f0e:	898b      	ldrh	r3, [r1, #12]
 8005f10:	061b      	lsls	r3, r3, #24
 8005f12:	b09d      	sub	sp, #116	; 0x74
 8005f14:	4607      	mov	r7, r0
 8005f16:	460d      	mov	r5, r1
 8005f18:	4614      	mov	r4, r2
 8005f1a:	d50e      	bpl.n	8005f3a <_svfiprintf_r+0x32>
 8005f1c:	690b      	ldr	r3, [r1, #16]
 8005f1e:	b963      	cbnz	r3, 8005f3a <_svfiprintf_r+0x32>
 8005f20:	2140      	movs	r1, #64	; 0x40
 8005f22:	f000 fafd 	bl	8006520 <_malloc_r>
 8005f26:	6028      	str	r0, [r5, #0]
 8005f28:	6128      	str	r0, [r5, #16]
 8005f2a:	b920      	cbnz	r0, 8005f36 <_svfiprintf_r+0x2e>
 8005f2c:	230c      	movs	r3, #12
 8005f2e:	603b      	str	r3, [r7, #0]
 8005f30:	f04f 30ff 	mov.w	r0, #4294967295
 8005f34:	e0d1      	b.n	80060da <_svfiprintf_r+0x1d2>
 8005f36:	2340      	movs	r3, #64	; 0x40
 8005f38:	616b      	str	r3, [r5, #20]
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	9309      	str	r3, [sp, #36]	; 0x24
 8005f3e:	2320      	movs	r3, #32
 8005f40:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005f44:	f8cd 800c 	str.w	r8, [sp, #12]
 8005f48:	2330      	movs	r3, #48	; 0x30
 8005f4a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80060f4 <_svfiprintf_r+0x1ec>
 8005f4e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005f52:	f04f 0901 	mov.w	r9, #1
 8005f56:	4623      	mov	r3, r4
 8005f58:	469a      	mov	sl, r3
 8005f5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f5e:	b10a      	cbz	r2, 8005f64 <_svfiprintf_r+0x5c>
 8005f60:	2a25      	cmp	r2, #37	; 0x25
 8005f62:	d1f9      	bne.n	8005f58 <_svfiprintf_r+0x50>
 8005f64:	ebba 0b04 	subs.w	fp, sl, r4
 8005f68:	d00b      	beq.n	8005f82 <_svfiprintf_r+0x7a>
 8005f6a:	465b      	mov	r3, fp
 8005f6c:	4622      	mov	r2, r4
 8005f6e:	4629      	mov	r1, r5
 8005f70:	4638      	mov	r0, r7
 8005f72:	f7ff ff6d 	bl	8005e50 <__ssputs_r>
 8005f76:	3001      	adds	r0, #1
 8005f78:	f000 80aa 	beq.w	80060d0 <_svfiprintf_r+0x1c8>
 8005f7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f7e:	445a      	add	r2, fp
 8005f80:	9209      	str	r2, [sp, #36]	; 0x24
 8005f82:	f89a 3000 	ldrb.w	r3, [sl]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	f000 80a2 	beq.w	80060d0 <_svfiprintf_r+0x1c8>
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	f04f 32ff 	mov.w	r2, #4294967295
 8005f92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f96:	f10a 0a01 	add.w	sl, sl, #1
 8005f9a:	9304      	str	r3, [sp, #16]
 8005f9c:	9307      	str	r3, [sp, #28]
 8005f9e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005fa2:	931a      	str	r3, [sp, #104]	; 0x68
 8005fa4:	4654      	mov	r4, sl
 8005fa6:	2205      	movs	r2, #5
 8005fa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fac:	4851      	ldr	r0, [pc, #324]	; (80060f4 <_svfiprintf_r+0x1ec>)
 8005fae:	f7fa f92f 	bl	8000210 <memchr>
 8005fb2:	9a04      	ldr	r2, [sp, #16]
 8005fb4:	b9d8      	cbnz	r0, 8005fee <_svfiprintf_r+0xe6>
 8005fb6:	06d0      	lsls	r0, r2, #27
 8005fb8:	bf44      	itt	mi
 8005fba:	2320      	movmi	r3, #32
 8005fbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005fc0:	0711      	lsls	r1, r2, #28
 8005fc2:	bf44      	itt	mi
 8005fc4:	232b      	movmi	r3, #43	; 0x2b
 8005fc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005fca:	f89a 3000 	ldrb.w	r3, [sl]
 8005fce:	2b2a      	cmp	r3, #42	; 0x2a
 8005fd0:	d015      	beq.n	8005ffe <_svfiprintf_r+0xf6>
 8005fd2:	9a07      	ldr	r2, [sp, #28]
 8005fd4:	4654      	mov	r4, sl
 8005fd6:	2000      	movs	r0, #0
 8005fd8:	f04f 0c0a 	mov.w	ip, #10
 8005fdc:	4621      	mov	r1, r4
 8005fde:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005fe2:	3b30      	subs	r3, #48	; 0x30
 8005fe4:	2b09      	cmp	r3, #9
 8005fe6:	d94e      	bls.n	8006086 <_svfiprintf_r+0x17e>
 8005fe8:	b1b0      	cbz	r0, 8006018 <_svfiprintf_r+0x110>
 8005fea:	9207      	str	r2, [sp, #28]
 8005fec:	e014      	b.n	8006018 <_svfiprintf_r+0x110>
 8005fee:	eba0 0308 	sub.w	r3, r0, r8
 8005ff2:	fa09 f303 	lsl.w	r3, r9, r3
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	9304      	str	r3, [sp, #16]
 8005ffa:	46a2      	mov	sl, r4
 8005ffc:	e7d2      	b.n	8005fa4 <_svfiprintf_r+0x9c>
 8005ffe:	9b03      	ldr	r3, [sp, #12]
 8006000:	1d19      	adds	r1, r3, #4
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	9103      	str	r1, [sp, #12]
 8006006:	2b00      	cmp	r3, #0
 8006008:	bfbb      	ittet	lt
 800600a:	425b      	neglt	r3, r3
 800600c:	f042 0202 	orrlt.w	r2, r2, #2
 8006010:	9307      	strge	r3, [sp, #28]
 8006012:	9307      	strlt	r3, [sp, #28]
 8006014:	bfb8      	it	lt
 8006016:	9204      	strlt	r2, [sp, #16]
 8006018:	7823      	ldrb	r3, [r4, #0]
 800601a:	2b2e      	cmp	r3, #46	; 0x2e
 800601c:	d10c      	bne.n	8006038 <_svfiprintf_r+0x130>
 800601e:	7863      	ldrb	r3, [r4, #1]
 8006020:	2b2a      	cmp	r3, #42	; 0x2a
 8006022:	d135      	bne.n	8006090 <_svfiprintf_r+0x188>
 8006024:	9b03      	ldr	r3, [sp, #12]
 8006026:	1d1a      	adds	r2, r3, #4
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	9203      	str	r2, [sp, #12]
 800602c:	2b00      	cmp	r3, #0
 800602e:	bfb8      	it	lt
 8006030:	f04f 33ff 	movlt.w	r3, #4294967295
 8006034:	3402      	adds	r4, #2
 8006036:	9305      	str	r3, [sp, #20]
 8006038:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006104 <_svfiprintf_r+0x1fc>
 800603c:	7821      	ldrb	r1, [r4, #0]
 800603e:	2203      	movs	r2, #3
 8006040:	4650      	mov	r0, sl
 8006042:	f7fa f8e5 	bl	8000210 <memchr>
 8006046:	b140      	cbz	r0, 800605a <_svfiprintf_r+0x152>
 8006048:	2340      	movs	r3, #64	; 0x40
 800604a:	eba0 000a 	sub.w	r0, r0, sl
 800604e:	fa03 f000 	lsl.w	r0, r3, r0
 8006052:	9b04      	ldr	r3, [sp, #16]
 8006054:	4303      	orrs	r3, r0
 8006056:	3401      	adds	r4, #1
 8006058:	9304      	str	r3, [sp, #16]
 800605a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800605e:	4826      	ldr	r0, [pc, #152]	; (80060f8 <_svfiprintf_r+0x1f0>)
 8006060:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006064:	2206      	movs	r2, #6
 8006066:	f7fa f8d3 	bl	8000210 <memchr>
 800606a:	2800      	cmp	r0, #0
 800606c:	d038      	beq.n	80060e0 <_svfiprintf_r+0x1d8>
 800606e:	4b23      	ldr	r3, [pc, #140]	; (80060fc <_svfiprintf_r+0x1f4>)
 8006070:	bb1b      	cbnz	r3, 80060ba <_svfiprintf_r+0x1b2>
 8006072:	9b03      	ldr	r3, [sp, #12]
 8006074:	3307      	adds	r3, #7
 8006076:	f023 0307 	bic.w	r3, r3, #7
 800607a:	3308      	adds	r3, #8
 800607c:	9303      	str	r3, [sp, #12]
 800607e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006080:	4433      	add	r3, r6
 8006082:	9309      	str	r3, [sp, #36]	; 0x24
 8006084:	e767      	b.n	8005f56 <_svfiprintf_r+0x4e>
 8006086:	fb0c 3202 	mla	r2, ip, r2, r3
 800608a:	460c      	mov	r4, r1
 800608c:	2001      	movs	r0, #1
 800608e:	e7a5      	b.n	8005fdc <_svfiprintf_r+0xd4>
 8006090:	2300      	movs	r3, #0
 8006092:	3401      	adds	r4, #1
 8006094:	9305      	str	r3, [sp, #20]
 8006096:	4619      	mov	r1, r3
 8006098:	f04f 0c0a 	mov.w	ip, #10
 800609c:	4620      	mov	r0, r4
 800609e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80060a2:	3a30      	subs	r2, #48	; 0x30
 80060a4:	2a09      	cmp	r2, #9
 80060a6:	d903      	bls.n	80060b0 <_svfiprintf_r+0x1a8>
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d0c5      	beq.n	8006038 <_svfiprintf_r+0x130>
 80060ac:	9105      	str	r1, [sp, #20]
 80060ae:	e7c3      	b.n	8006038 <_svfiprintf_r+0x130>
 80060b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80060b4:	4604      	mov	r4, r0
 80060b6:	2301      	movs	r3, #1
 80060b8:	e7f0      	b.n	800609c <_svfiprintf_r+0x194>
 80060ba:	ab03      	add	r3, sp, #12
 80060bc:	9300      	str	r3, [sp, #0]
 80060be:	462a      	mov	r2, r5
 80060c0:	4b0f      	ldr	r3, [pc, #60]	; (8006100 <_svfiprintf_r+0x1f8>)
 80060c2:	a904      	add	r1, sp, #16
 80060c4:	4638      	mov	r0, r7
 80060c6:	f3af 8000 	nop.w
 80060ca:	1c42      	adds	r2, r0, #1
 80060cc:	4606      	mov	r6, r0
 80060ce:	d1d6      	bne.n	800607e <_svfiprintf_r+0x176>
 80060d0:	89ab      	ldrh	r3, [r5, #12]
 80060d2:	065b      	lsls	r3, r3, #25
 80060d4:	f53f af2c 	bmi.w	8005f30 <_svfiprintf_r+0x28>
 80060d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80060da:	b01d      	add	sp, #116	; 0x74
 80060dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060e0:	ab03      	add	r3, sp, #12
 80060e2:	9300      	str	r3, [sp, #0]
 80060e4:	462a      	mov	r2, r5
 80060e6:	4b06      	ldr	r3, [pc, #24]	; (8006100 <_svfiprintf_r+0x1f8>)
 80060e8:	a904      	add	r1, sp, #16
 80060ea:	4638      	mov	r0, r7
 80060ec:	f000 f87a 	bl	80061e4 <_printf_i>
 80060f0:	e7eb      	b.n	80060ca <_svfiprintf_r+0x1c2>
 80060f2:	bf00      	nop
 80060f4:	0800816c 	.word	0x0800816c
 80060f8:	08008176 	.word	0x08008176
 80060fc:	00000000 	.word	0x00000000
 8006100:	08005e51 	.word	0x08005e51
 8006104:	08008172 	.word	0x08008172

08006108 <_printf_common>:
 8006108:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800610c:	4616      	mov	r6, r2
 800610e:	4699      	mov	r9, r3
 8006110:	688a      	ldr	r2, [r1, #8]
 8006112:	690b      	ldr	r3, [r1, #16]
 8006114:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006118:	4293      	cmp	r3, r2
 800611a:	bfb8      	it	lt
 800611c:	4613      	movlt	r3, r2
 800611e:	6033      	str	r3, [r6, #0]
 8006120:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006124:	4607      	mov	r7, r0
 8006126:	460c      	mov	r4, r1
 8006128:	b10a      	cbz	r2, 800612e <_printf_common+0x26>
 800612a:	3301      	adds	r3, #1
 800612c:	6033      	str	r3, [r6, #0]
 800612e:	6823      	ldr	r3, [r4, #0]
 8006130:	0699      	lsls	r1, r3, #26
 8006132:	bf42      	ittt	mi
 8006134:	6833      	ldrmi	r3, [r6, #0]
 8006136:	3302      	addmi	r3, #2
 8006138:	6033      	strmi	r3, [r6, #0]
 800613a:	6825      	ldr	r5, [r4, #0]
 800613c:	f015 0506 	ands.w	r5, r5, #6
 8006140:	d106      	bne.n	8006150 <_printf_common+0x48>
 8006142:	f104 0a19 	add.w	sl, r4, #25
 8006146:	68e3      	ldr	r3, [r4, #12]
 8006148:	6832      	ldr	r2, [r6, #0]
 800614a:	1a9b      	subs	r3, r3, r2
 800614c:	42ab      	cmp	r3, r5
 800614e:	dc26      	bgt.n	800619e <_printf_common+0x96>
 8006150:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006154:	1e13      	subs	r3, r2, #0
 8006156:	6822      	ldr	r2, [r4, #0]
 8006158:	bf18      	it	ne
 800615a:	2301      	movne	r3, #1
 800615c:	0692      	lsls	r2, r2, #26
 800615e:	d42b      	bmi.n	80061b8 <_printf_common+0xb0>
 8006160:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006164:	4649      	mov	r1, r9
 8006166:	4638      	mov	r0, r7
 8006168:	47c0      	blx	r8
 800616a:	3001      	adds	r0, #1
 800616c:	d01e      	beq.n	80061ac <_printf_common+0xa4>
 800616e:	6823      	ldr	r3, [r4, #0]
 8006170:	68e5      	ldr	r5, [r4, #12]
 8006172:	6832      	ldr	r2, [r6, #0]
 8006174:	f003 0306 	and.w	r3, r3, #6
 8006178:	2b04      	cmp	r3, #4
 800617a:	bf08      	it	eq
 800617c:	1aad      	subeq	r5, r5, r2
 800617e:	68a3      	ldr	r3, [r4, #8]
 8006180:	6922      	ldr	r2, [r4, #16]
 8006182:	bf0c      	ite	eq
 8006184:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006188:	2500      	movne	r5, #0
 800618a:	4293      	cmp	r3, r2
 800618c:	bfc4      	itt	gt
 800618e:	1a9b      	subgt	r3, r3, r2
 8006190:	18ed      	addgt	r5, r5, r3
 8006192:	2600      	movs	r6, #0
 8006194:	341a      	adds	r4, #26
 8006196:	42b5      	cmp	r5, r6
 8006198:	d11a      	bne.n	80061d0 <_printf_common+0xc8>
 800619a:	2000      	movs	r0, #0
 800619c:	e008      	b.n	80061b0 <_printf_common+0xa8>
 800619e:	2301      	movs	r3, #1
 80061a0:	4652      	mov	r2, sl
 80061a2:	4649      	mov	r1, r9
 80061a4:	4638      	mov	r0, r7
 80061a6:	47c0      	blx	r8
 80061a8:	3001      	adds	r0, #1
 80061aa:	d103      	bne.n	80061b4 <_printf_common+0xac>
 80061ac:	f04f 30ff 	mov.w	r0, #4294967295
 80061b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061b4:	3501      	adds	r5, #1
 80061b6:	e7c6      	b.n	8006146 <_printf_common+0x3e>
 80061b8:	18e1      	adds	r1, r4, r3
 80061ba:	1c5a      	adds	r2, r3, #1
 80061bc:	2030      	movs	r0, #48	; 0x30
 80061be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80061c2:	4422      	add	r2, r4
 80061c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80061c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80061cc:	3302      	adds	r3, #2
 80061ce:	e7c7      	b.n	8006160 <_printf_common+0x58>
 80061d0:	2301      	movs	r3, #1
 80061d2:	4622      	mov	r2, r4
 80061d4:	4649      	mov	r1, r9
 80061d6:	4638      	mov	r0, r7
 80061d8:	47c0      	blx	r8
 80061da:	3001      	adds	r0, #1
 80061dc:	d0e6      	beq.n	80061ac <_printf_common+0xa4>
 80061de:	3601      	adds	r6, #1
 80061e0:	e7d9      	b.n	8006196 <_printf_common+0x8e>
	...

080061e4 <_printf_i>:
 80061e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80061e8:	460c      	mov	r4, r1
 80061ea:	4691      	mov	r9, r2
 80061ec:	7e27      	ldrb	r7, [r4, #24]
 80061ee:	990c      	ldr	r1, [sp, #48]	; 0x30
 80061f0:	2f78      	cmp	r7, #120	; 0x78
 80061f2:	4680      	mov	r8, r0
 80061f4:	469a      	mov	sl, r3
 80061f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80061fa:	d807      	bhi.n	800620c <_printf_i+0x28>
 80061fc:	2f62      	cmp	r7, #98	; 0x62
 80061fe:	d80a      	bhi.n	8006216 <_printf_i+0x32>
 8006200:	2f00      	cmp	r7, #0
 8006202:	f000 80d8 	beq.w	80063b6 <_printf_i+0x1d2>
 8006206:	2f58      	cmp	r7, #88	; 0x58
 8006208:	f000 80a3 	beq.w	8006352 <_printf_i+0x16e>
 800620c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006210:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006214:	e03a      	b.n	800628c <_printf_i+0xa8>
 8006216:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800621a:	2b15      	cmp	r3, #21
 800621c:	d8f6      	bhi.n	800620c <_printf_i+0x28>
 800621e:	a001      	add	r0, pc, #4	; (adr r0, 8006224 <_printf_i+0x40>)
 8006220:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006224:	0800627d 	.word	0x0800627d
 8006228:	08006291 	.word	0x08006291
 800622c:	0800620d 	.word	0x0800620d
 8006230:	0800620d 	.word	0x0800620d
 8006234:	0800620d 	.word	0x0800620d
 8006238:	0800620d 	.word	0x0800620d
 800623c:	08006291 	.word	0x08006291
 8006240:	0800620d 	.word	0x0800620d
 8006244:	0800620d 	.word	0x0800620d
 8006248:	0800620d 	.word	0x0800620d
 800624c:	0800620d 	.word	0x0800620d
 8006250:	0800639d 	.word	0x0800639d
 8006254:	080062c1 	.word	0x080062c1
 8006258:	0800637f 	.word	0x0800637f
 800625c:	0800620d 	.word	0x0800620d
 8006260:	0800620d 	.word	0x0800620d
 8006264:	080063bf 	.word	0x080063bf
 8006268:	0800620d 	.word	0x0800620d
 800626c:	080062c1 	.word	0x080062c1
 8006270:	0800620d 	.word	0x0800620d
 8006274:	0800620d 	.word	0x0800620d
 8006278:	08006387 	.word	0x08006387
 800627c:	680b      	ldr	r3, [r1, #0]
 800627e:	1d1a      	adds	r2, r3, #4
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	600a      	str	r2, [r1, #0]
 8006284:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006288:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800628c:	2301      	movs	r3, #1
 800628e:	e0a3      	b.n	80063d8 <_printf_i+0x1f4>
 8006290:	6825      	ldr	r5, [r4, #0]
 8006292:	6808      	ldr	r0, [r1, #0]
 8006294:	062e      	lsls	r6, r5, #24
 8006296:	f100 0304 	add.w	r3, r0, #4
 800629a:	d50a      	bpl.n	80062b2 <_printf_i+0xce>
 800629c:	6805      	ldr	r5, [r0, #0]
 800629e:	600b      	str	r3, [r1, #0]
 80062a0:	2d00      	cmp	r5, #0
 80062a2:	da03      	bge.n	80062ac <_printf_i+0xc8>
 80062a4:	232d      	movs	r3, #45	; 0x2d
 80062a6:	426d      	negs	r5, r5
 80062a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062ac:	485e      	ldr	r0, [pc, #376]	; (8006428 <_printf_i+0x244>)
 80062ae:	230a      	movs	r3, #10
 80062b0:	e019      	b.n	80062e6 <_printf_i+0x102>
 80062b2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80062b6:	6805      	ldr	r5, [r0, #0]
 80062b8:	600b      	str	r3, [r1, #0]
 80062ba:	bf18      	it	ne
 80062bc:	b22d      	sxthne	r5, r5
 80062be:	e7ef      	b.n	80062a0 <_printf_i+0xbc>
 80062c0:	680b      	ldr	r3, [r1, #0]
 80062c2:	6825      	ldr	r5, [r4, #0]
 80062c4:	1d18      	adds	r0, r3, #4
 80062c6:	6008      	str	r0, [r1, #0]
 80062c8:	0628      	lsls	r0, r5, #24
 80062ca:	d501      	bpl.n	80062d0 <_printf_i+0xec>
 80062cc:	681d      	ldr	r5, [r3, #0]
 80062ce:	e002      	b.n	80062d6 <_printf_i+0xf2>
 80062d0:	0669      	lsls	r1, r5, #25
 80062d2:	d5fb      	bpl.n	80062cc <_printf_i+0xe8>
 80062d4:	881d      	ldrh	r5, [r3, #0]
 80062d6:	4854      	ldr	r0, [pc, #336]	; (8006428 <_printf_i+0x244>)
 80062d8:	2f6f      	cmp	r7, #111	; 0x6f
 80062da:	bf0c      	ite	eq
 80062dc:	2308      	moveq	r3, #8
 80062de:	230a      	movne	r3, #10
 80062e0:	2100      	movs	r1, #0
 80062e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80062e6:	6866      	ldr	r6, [r4, #4]
 80062e8:	60a6      	str	r6, [r4, #8]
 80062ea:	2e00      	cmp	r6, #0
 80062ec:	bfa2      	ittt	ge
 80062ee:	6821      	ldrge	r1, [r4, #0]
 80062f0:	f021 0104 	bicge.w	r1, r1, #4
 80062f4:	6021      	strge	r1, [r4, #0]
 80062f6:	b90d      	cbnz	r5, 80062fc <_printf_i+0x118>
 80062f8:	2e00      	cmp	r6, #0
 80062fa:	d04d      	beq.n	8006398 <_printf_i+0x1b4>
 80062fc:	4616      	mov	r6, r2
 80062fe:	fbb5 f1f3 	udiv	r1, r5, r3
 8006302:	fb03 5711 	mls	r7, r3, r1, r5
 8006306:	5dc7      	ldrb	r7, [r0, r7]
 8006308:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800630c:	462f      	mov	r7, r5
 800630e:	42bb      	cmp	r3, r7
 8006310:	460d      	mov	r5, r1
 8006312:	d9f4      	bls.n	80062fe <_printf_i+0x11a>
 8006314:	2b08      	cmp	r3, #8
 8006316:	d10b      	bne.n	8006330 <_printf_i+0x14c>
 8006318:	6823      	ldr	r3, [r4, #0]
 800631a:	07df      	lsls	r7, r3, #31
 800631c:	d508      	bpl.n	8006330 <_printf_i+0x14c>
 800631e:	6923      	ldr	r3, [r4, #16]
 8006320:	6861      	ldr	r1, [r4, #4]
 8006322:	4299      	cmp	r1, r3
 8006324:	bfde      	ittt	le
 8006326:	2330      	movle	r3, #48	; 0x30
 8006328:	f806 3c01 	strble.w	r3, [r6, #-1]
 800632c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006330:	1b92      	subs	r2, r2, r6
 8006332:	6122      	str	r2, [r4, #16]
 8006334:	f8cd a000 	str.w	sl, [sp]
 8006338:	464b      	mov	r3, r9
 800633a:	aa03      	add	r2, sp, #12
 800633c:	4621      	mov	r1, r4
 800633e:	4640      	mov	r0, r8
 8006340:	f7ff fee2 	bl	8006108 <_printf_common>
 8006344:	3001      	adds	r0, #1
 8006346:	d14c      	bne.n	80063e2 <_printf_i+0x1fe>
 8006348:	f04f 30ff 	mov.w	r0, #4294967295
 800634c:	b004      	add	sp, #16
 800634e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006352:	4835      	ldr	r0, [pc, #212]	; (8006428 <_printf_i+0x244>)
 8006354:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006358:	6823      	ldr	r3, [r4, #0]
 800635a:	680e      	ldr	r6, [r1, #0]
 800635c:	061f      	lsls	r7, r3, #24
 800635e:	f856 5b04 	ldr.w	r5, [r6], #4
 8006362:	600e      	str	r6, [r1, #0]
 8006364:	d514      	bpl.n	8006390 <_printf_i+0x1ac>
 8006366:	07d9      	lsls	r1, r3, #31
 8006368:	bf44      	itt	mi
 800636a:	f043 0320 	orrmi.w	r3, r3, #32
 800636e:	6023      	strmi	r3, [r4, #0]
 8006370:	b91d      	cbnz	r5, 800637a <_printf_i+0x196>
 8006372:	6823      	ldr	r3, [r4, #0]
 8006374:	f023 0320 	bic.w	r3, r3, #32
 8006378:	6023      	str	r3, [r4, #0]
 800637a:	2310      	movs	r3, #16
 800637c:	e7b0      	b.n	80062e0 <_printf_i+0xfc>
 800637e:	6823      	ldr	r3, [r4, #0]
 8006380:	f043 0320 	orr.w	r3, r3, #32
 8006384:	6023      	str	r3, [r4, #0]
 8006386:	2378      	movs	r3, #120	; 0x78
 8006388:	4828      	ldr	r0, [pc, #160]	; (800642c <_printf_i+0x248>)
 800638a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800638e:	e7e3      	b.n	8006358 <_printf_i+0x174>
 8006390:	065e      	lsls	r6, r3, #25
 8006392:	bf48      	it	mi
 8006394:	b2ad      	uxthmi	r5, r5
 8006396:	e7e6      	b.n	8006366 <_printf_i+0x182>
 8006398:	4616      	mov	r6, r2
 800639a:	e7bb      	b.n	8006314 <_printf_i+0x130>
 800639c:	680b      	ldr	r3, [r1, #0]
 800639e:	6826      	ldr	r6, [r4, #0]
 80063a0:	6960      	ldr	r0, [r4, #20]
 80063a2:	1d1d      	adds	r5, r3, #4
 80063a4:	600d      	str	r5, [r1, #0]
 80063a6:	0635      	lsls	r5, r6, #24
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	d501      	bpl.n	80063b0 <_printf_i+0x1cc>
 80063ac:	6018      	str	r0, [r3, #0]
 80063ae:	e002      	b.n	80063b6 <_printf_i+0x1d2>
 80063b0:	0671      	lsls	r1, r6, #25
 80063b2:	d5fb      	bpl.n	80063ac <_printf_i+0x1c8>
 80063b4:	8018      	strh	r0, [r3, #0]
 80063b6:	2300      	movs	r3, #0
 80063b8:	6123      	str	r3, [r4, #16]
 80063ba:	4616      	mov	r6, r2
 80063bc:	e7ba      	b.n	8006334 <_printf_i+0x150>
 80063be:	680b      	ldr	r3, [r1, #0]
 80063c0:	1d1a      	adds	r2, r3, #4
 80063c2:	600a      	str	r2, [r1, #0]
 80063c4:	681e      	ldr	r6, [r3, #0]
 80063c6:	6862      	ldr	r2, [r4, #4]
 80063c8:	2100      	movs	r1, #0
 80063ca:	4630      	mov	r0, r6
 80063cc:	f7f9 ff20 	bl	8000210 <memchr>
 80063d0:	b108      	cbz	r0, 80063d6 <_printf_i+0x1f2>
 80063d2:	1b80      	subs	r0, r0, r6
 80063d4:	6060      	str	r0, [r4, #4]
 80063d6:	6863      	ldr	r3, [r4, #4]
 80063d8:	6123      	str	r3, [r4, #16]
 80063da:	2300      	movs	r3, #0
 80063dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063e0:	e7a8      	b.n	8006334 <_printf_i+0x150>
 80063e2:	6923      	ldr	r3, [r4, #16]
 80063e4:	4632      	mov	r2, r6
 80063e6:	4649      	mov	r1, r9
 80063e8:	4640      	mov	r0, r8
 80063ea:	47d0      	blx	sl
 80063ec:	3001      	adds	r0, #1
 80063ee:	d0ab      	beq.n	8006348 <_printf_i+0x164>
 80063f0:	6823      	ldr	r3, [r4, #0]
 80063f2:	079b      	lsls	r3, r3, #30
 80063f4:	d413      	bmi.n	800641e <_printf_i+0x23a>
 80063f6:	68e0      	ldr	r0, [r4, #12]
 80063f8:	9b03      	ldr	r3, [sp, #12]
 80063fa:	4298      	cmp	r0, r3
 80063fc:	bfb8      	it	lt
 80063fe:	4618      	movlt	r0, r3
 8006400:	e7a4      	b.n	800634c <_printf_i+0x168>
 8006402:	2301      	movs	r3, #1
 8006404:	4632      	mov	r2, r6
 8006406:	4649      	mov	r1, r9
 8006408:	4640      	mov	r0, r8
 800640a:	47d0      	blx	sl
 800640c:	3001      	adds	r0, #1
 800640e:	d09b      	beq.n	8006348 <_printf_i+0x164>
 8006410:	3501      	adds	r5, #1
 8006412:	68e3      	ldr	r3, [r4, #12]
 8006414:	9903      	ldr	r1, [sp, #12]
 8006416:	1a5b      	subs	r3, r3, r1
 8006418:	42ab      	cmp	r3, r5
 800641a:	dcf2      	bgt.n	8006402 <_printf_i+0x21e>
 800641c:	e7eb      	b.n	80063f6 <_printf_i+0x212>
 800641e:	2500      	movs	r5, #0
 8006420:	f104 0619 	add.w	r6, r4, #25
 8006424:	e7f5      	b.n	8006412 <_printf_i+0x22e>
 8006426:	bf00      	nop
 8006428:	0800817d 	.word	0x0800817d
 800642c:	0800818e 	.word	0x0800818e

08006430 <memcpy>:
 8006430:	440a      	add	r2, r1
 8006432:	4291      	cmp	r1, r2
 8006434:	f100 33ff 	add.w	r3, r0, #4294967295
 8006438:	d100      	bne.n	800643c <memcpy+0xc>
 800643a:	4770      	bx	lr
 800643c:	b510      	push	{r4, lr}
 800643e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006442:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006446:	4291      	cmp	r1, r2
 8006448:	d1f9      	bne.n	800643e <memcpy+0xe>
 800644a:	bd10      	pop	{r4, pc}

0800644c <memmove>:
 800644c:	4288      	cmp	r0, r1
 800644e:	b510      	push	{r4, lr}
 8006450:	eb01 0402 	add.w	r4, r1, r2
 8006454:	d902      	bls.n	800645c <memmove+0x10>
 8006456:	4284      	cmp	r4, r0
 8006458:	4623      	mov	r3, r4
 800645a:	d807      	bhi.n	800646c <memmove+0x20>
 800645c:	1e43      	subs	r3, r0, #1
 800645e:	42a1      	cmp	r1, r4
 8006460:	d008      	beq.n	8006474 <memmove+0x28>
 8006462:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006466:	f803 2f01 	strb.w	r2, [r3, #1]!
 800646a:	e7f8      	b.n	800645e <memmove+0x12>
 800646c:	4402      	add	r2, r0
 800646e:	4601      	mov	r1, r0
 8006470:	428a      	cmp	r2, r1
 8006472:	d100      	bne.n	8006476 <memmove+0x2a>
 8006474:	bd10      	pop	{r4, pc}
 8006476:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800647a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800647e:	e7f7      	b.n	8006470 <memmove+0x24>

08006480 <_free_r>:
 8006480:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006482:	2900      	cmp	r1, #0
 8006484:	d048      	beq.n	8006518 <_free_r+0x98>
 8006486:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800648a:	9001      	str	r0, [sp, #4]
 800648c:	2b00      	cmp	r3, #0
 800648e:	f1a1 0404 	sub.w	r4, r1, #4
 8006492:	bfb8      	it	lt
 8006494:	18e4      	addlt	r4, r4, r3
 8006496:	f000 f8d3 	bl	8006640 <__malloc_lock>
 800649a:	4a20      	ldr	r2, [pc, #128]	; (800651c <_free_r+0x9c>)
 800649c:	9801      	ldr	r0, [sp, #4]
 800649e:	6813      	ldr	r3, [r2, #0]
 80064a0:	4615      	mov	r5, r2
 80064a2:	b933      	cbnz	r3, 80064b2 <_free_r+0x32>
 80064a4:	6063      	str	r3, [r4, #4]
 80064a6:	6014      	str	r4, [r2, #0]
 80064a8:	b003      	add	sp, #12
 80064aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80064ae:	f000 b8cd 	b.w	800664c <__malloc_unlock>
 80064b2:	42a3      	cmp	r3, r4
 80064b4:	d90b      	bls.n	80064ce <_free_r+0x4e>
 80064b6:	6821      	ldr	r1, [r4, #0]
 80064b8:	1862      	adds	r2, r4, r1
 80064ba:	4293      	cmp	r3, r2
 80064bc:	bf04      	itt	eq
 80064be:	681a      	ldreq	r2, [r3, #0]
 80064c0:	685b      	ldreq	r3, [r3, #4]
 80064c2:	6063      	str	r3, [r4, #4]
 80064c4:	bf04      	itt	eq
 80064c6:	1852      	addeq	r2, r2, r1
 80064c8:	6022      	streq	r2, [r4, #0]
 80064ca:	602c      	str	r4, [r5, #0]
 80064cc:	e7ec      	b.n	80064a8 <_free_r+0x28>
 80064ce:	461a      	mov	r2, r3
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	b10b      	cbz	r3, 80064d8 <_free_r+0x58>
 80064d4:	42a3      	cmp	r3, r4
 80064d6:	d9fa      	bls.n	80064ce <_free_r+0x4e>
 80064d8:	6811      	ldr	r1, [r2, #0]
 80064da:	1855      	adds	r5, r2, r1
 80064dc:	42a5      	cmp	r5, r4
 80064de:	d10b      	bne.n	80064f8 <_free_r+0x78>
 80064e0:	6824      	ldr	r4, [r4, #0]
 80064e2:	4421      	add	r1, r4
 80064e4:	1854      	adds	r4, r2, r1
 80064e6:	42a3      	cmp	r3, r4
 80064e8:	6011      	str	r1, [r2, #0]
 80064ea:	d1dd      	bne.n	80064a8 <_free_r+0x28>
 80064ec:	681c      	ldr	r4, [r3, #0]
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	6053      	str	r3, [r2, #4]
 80064f2:	4421      	add	r1, r4
 80064f4:	6011      	str	r1, [r2, #0]
 80064f6:	e7d7      	b.n	80064a8 <_free_r+0x28>
 80064f8:	d902      	bls.n	8006500 <_free_r+0x80>
 80064fa:	230c      	movs	r3, #12
 80064fc:	6003      	str	r3, [r0, #0]
 80064fe:	e7d3      	b.n	80064a8 <_free_r+0x28>
 8006500:	6825      	ldr	r5, [r4, #0]
 8006502:	1961      	adds	r1, r4, r5
 8006504:	428b      	cmp	r3, r1
 8006506:	bf04      	itt	eq
 8006508:	6819      	ldreq	r1, [r3, #0]
 800650a:	685b      	ldreq	r3, [r3, #4]
 800650c:	6063      	str	r3, [r4, #4]
 800650e:	bf04      	itt	eq
 8006510:	1949      	addeq	r1, r1, r5
 8006512:	6021      	streq	r1, [r4, #0]
 8006514:	6054      	str	r4, [r2, #4]
 8006516:	e7c7      	b.n	80064a8 <_free_r+0x28>
 8006518:	b003      	add	sp, #12
 800651a:	bd30      	pop	{r4, r5, pc}
 800651c:	200002b8 	.word	0x200002b8

08006520 <_malloc_r>:
 8006520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006522:	1ccd      	adds	r5, r1, #3
 8006524:	f025 0503 	bic.w	r5, r5, #3
 8006528:	3508      	adds	r5, #8
 800652a:	2d0c      	cmp	r5, #12
 800652c:	bf38      	it	cc
 800652e:	250c      	movcc	r5, #12
 8006530:	2d00      	cmp	r5, #0
 8006532:	4606      	mov	r6, r0
 8006534:	db01      	blt.n	800653a <_malloc_r+0x1a>
 8006536:	42a9      	cmp	r1, r5
 8006538:	d903      	bls.n	8006542 <_malloc_r+0x22>
 800653a:	230c      	movs	r3, #12
 800653c:	6033      	str	r3, [r6, #0]
 800653e:	2000      	movs	r0, #0
 8006540:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006542:	f000 f87d 	bl	8006640 <__malloc_lock>
 8006546:	4921      	ldr	r1, [pc, #132]	; (80065cc <_malloc_r+0xac>)
 8006548:	680a      	ldr	r2, [r1, #0]
 800654a:	4614      	mov	r4, r2
 800654c:	b99c      	cbnz	r4, 8006576 <_malloc_r+0x56>
 800654e:	4f20      	ldr	r7, [pc, #128]	; (80065d0 <_malloc_r+0xb0>)
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	b923      	cbnz	r3, 800655e <_malloc_r+0x3e>
 8006554:	4621      	mov	r1, r4
 8006556:	4630      	mov	r0, r6
 8006558:	f000 f862 	bl	8006620 <_sbrk_r>
 800655c:	6038      	str	r0, [r7, #0]
 800655e:	4629      	mov	r1, r5
 8006560:	4630      	mov	r0, r6
 8006562:	f000 f85d 	bl	8006620 <_sbrk_r>
 8006566:	1c43      	adds	r3, r0, #1
 8006568:	d123      	bne.n	80065b2 <_malloc_r+0x92>
 800656a:	230c      	movs	r3, #12
 800656c:	6033      	str	r3, [r6, #0]
 800656e:	4630      	mov	r0, r6
 8006570:	f000 f86c 	bl	800664c <__malloc_unlock>
 8006574:	e7e3      	b.n	800653e <_malloc_r+0x1e>
 8006576:	6823      	ldr	r3, [r4, #0]
 8006578:	1b5b      	subs	r3, r3, r5
 800657a:	d417      	bmi.n	80065ac <_malloc_r+0x8c>
 800657c:	2b0b      	cmp	r3, #11
 800657e:	d903      	bls.n	8006588 <_malloc_r+0x68>
 8006580:	6023      	str	r3, [r4, #0]
 8006582:	441c      	add	r4, r3
 8006584:	6025      	str	r5, [r4, #0]
 8006586:	e004      	b.n	8006592 <_malloc_r+0x72>
 8006588:	6863      	ldr	r3, [r4, #4]
 800658a:	42a2      	cmp	r2, r4
 800658c:	bf0c      	ite	eq
 800658e:	600b      	streq	r3, [r1, #0]
 8006590:	6053      	strne	r3, [r2, #4]
 8006592:	4630      	mov	r0, r6
 8006594:	f000 f85a 	bl	800664c <__malloc_unlock>
 8006598:	f104 000b 	add.w	r0, r4, #11
 800659c:	1d23      	adds	r3, r4, #4
 800659e:	f020 0007 	bic.w	r0, r0, #7
 80065a2:	1ac2      	subs	r2, r0, r3
 80065a4:	d0cc      	beq.n	8006540 <_malloc_r+0x20>
 80065a6:	1a1b      	subs	r3, r3, r0
 80065a8:	50a3      	str	r3, [r4, r2]
 80065aa:	e7c9      	b.n	8006540 <_malloc_r+0x20>
 80065ac:	4622      	mov	r2, r4
 80065ae:	6864      	ldr	r4, [r4, #4]
 80065b0:	e7cc      	b.n	800654c <_malloc_r+0x2c>
 80065b2:	1cc4      	adds	r4, r0, #3
 80065b4:	f024 0403 	bic.w	r4, r4, #3
 80065b8:	42a0      	cmp	r0, r4
 80065ba:	d0e3      	beq.n	8006584 <_malloc_r+0x64>
 80065bc:	1a21      	subs	r1, r4, r0
 80065be:	4630      	mov	r0, r6
 80065c0:	f000 f82e 	bl	8006620 <_sbrk_r>
 80065c4:	3001      	adds	r0, #1
 80065c6:	d1dd      	bne.n	8006584 <_malloc_r+0x64>
 80065c8:	e7cf      	b.n	800656a <_malloc_r+0x4a>
 80065ca:	bf00      	nop
 80065cc:	200002b8 	.word	0x200002b8
 80065d0:	200002bc 	.word	0x200002bc

080065d4 <_realloc_r>:
 80065d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065d6:	4607      	mov	r7, r0
 80065d8:	4614      	mov	r4, r2
 80065da:	460e      	mov	r6, r1
 80065dc:	b921      	cbnz	r1, 80065e8 <_realloc_r+0x14>
 80065de:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80065e2:	4611      	mov	r1, r2
 80065e4:	f7ff bf9c 	b.w	8006520 <_malloc_r>
 80065e8:	b922      	cbnz	r2, 80065f4 <_realloc_r+0x20>
 80065ea:	f7ff ff49 	bl	8006480 <_free_r>
 80065ee:	4625      	mov	r5, r4
 80065f0:	4628      	mov	r0, r5
 80065f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065f4:	f000 f830 	bl	8006658 <_malloc_usable_size_r>
 80065f8:	42a0      	cmp	r0, r4
 80065fa:	d20f      	bcs.n	800661c <_realloc_r+0x48>
 80065fc:	4621      	mov	r1, r4
 80065fe:	4638      	mov	r0, r7
 8006600:	f7ff ff8e 	bl	8006520 <_malloc_r>
 8006604:	4605      	mov	r5, r0
 8006606:	2800      	cmp	r0, #0
 8006608:	d0f2      	beq.n	80065f0 <_realloc_r+0x1c>
 800660a:	4631      	mov	r1, r6
 800660c:	4622      	mov	r2, r4
 800660e:	f7ff ff0f 	bl	8006430 <memcpy>
 8006612:	4631      	mov	r1, r6
 8006614:	4638      	mov	r0, r7
 8006616:	f7ff ff33 	bl	8006480 <_free_r>
 800661a:	e7e9      	b.n	80065f0 <_realloc_r+0x1c>
 800661c:	4635      	mov	r5, r6
 800661e:	e7e7      	b.n	80065f0 <_realloc_r+0x1c>

08006620 <_sbrk_r>:
 8006620:	b538      	push	{r3, r4, r5, lr}
 8006622:	4d06      	ldr	r5, [pc, #24]	; (800663c <_sbrk_r+0x1c>)
 8006624:	2300      	movs	r3, #0
 8006626:	4604      	mov	r4, r0
 8006628:	4608      	mov	r0, r1
 800662a:	602b      	str	r3, [r5, #0]
 800662c:	f7fa fa32 	bl	8000a94 <_sbrk>
 8006630:	1c43      	adds	r3, r0, #1
 8006632:	d102      	bne.n	800663a <_sbrk_r+0x1a>
 8006634:	682b      	ldr	r3, [r5, #0]
 8006636:	b103      	cbz	r3, 800663a <_sbrk_r+0x1a>
 8006638:	6023      	str	r3, [r4, #0]
 800663a:	bd38      	pop	{r3, r4, r5, pc}
 800663c:	2000043c 	.word	0x2000043c

08006640 <__malloc_lock>:
 8006640:	4801      	ldr	r0, [pc, #4]	; (8006648 <__malloc_lock+0x8>)
 8006642:	f000 b811 	b.w	8006668 <__retarget_lock_acquire_recursive>
 8006646:	bf00      	nop
 8006648:	20000444 	.word	0x20000444

0800664c <__malloc_unlock>:
 800664c:	4801      	ldr	r0, [pc, #4]	; (8006654 <__malloc_unlock+0x8>)
 800664e:	f000 b80c 	b.w	800666a <__retarget_lock_release_recursive>
 8006652:	bf00      	nop
 8006654:	20000444 	.word	0x20000444

08006658 <_malloc_usable_size_r>:
 8006658:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800665c:	1f18      	subs	r0, r3, #4
 800665e:	2b00      	cmp	r3, #0
 8006660:	bfbc      	itt	lt
 8006662:	580b      	ldrlt	r3, [r1, r0]
 8006664:	18c0      	addlt	r0, r0, r3
 8006666:	4770      	bx	lr

08006668 <__retarget_lock_acquire_recursive>:
 8006668:	4770      	bx	lr

0800666a <__retarget_lock_release_recursive>:
 800666a:	4770      	bx	lr

0800666c <_init>:
 800666c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800666e:	bf00      	nop
 8006670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006672:	bc08      	pop	{r3}
 8006674:	469e      	mov	lr, r3
 8006676:	4770      	bx	lr

08006678 <_fini>:
 8006678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800667a:	bf00      	nop
 800667c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800667e:	bc08      	pop	{r3}
 8006680:	469e      	mov	lr, r3
 8006682:	4770      	bx	lr
